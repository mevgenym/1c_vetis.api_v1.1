
Функция getStockEntryByGuid(guid, enterpriseGuid, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.GetStockEntryByGuid(guid, enterpriseGuid, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.GetStockEntryByGuid(guid, enterpriseGuid, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryApplications_1_4.getStockEntryByGuid(guid, enterpriseGuid, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

Функция getStockEntryByUuid(uuid, enterpriseGuid, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.getStockEntryByUuid(uuid, enterpriseGuid, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.getStockEntryByUuid(uuid, enterpriseGuid, issuerId, пОтказ, пОшибка);
	//ИначеЕсли Ветис.Версия_1_4() Тогда
	//	Возврат ВетисMercuryApplications_1_4.getStockEntryByUuid(uuid, enterpriseGuid, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Предназначена для получения списка записей складского журнала
//Используется самостоятельно в цикле Пока.
//Параметры:
// enterpriseGuid - Идентификатор предприятия
// issuerId       - Идентификатор ХС
// Item          - элемент списка, возвращаемый параметр
// Params     - для внутреннего использования, начальное значение - Неопределено
//Возвращаемое значение:
// Булево         - Ложь значит список пройден весь
Функция getStockEntryListNext(enterpriseGuid, issuerId = Неопределено, Item, Params, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.GetStockEntryListNext(enterpriseGuid, issuerId, Item, Params, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.GetStockEntryListNext(enterpriseGuid, issuerId, Item, Params, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryApplications_1_4.getStockEntryListNext(enterpriseGuid, issuerId, Item, Params, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

Функция getStockEntryChangesListNext(enterpriseGuid, beginDate, endDate = Неопределено, issuerId = Неопределено, Item, Params, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.GetStockEntryChangesListNext(enterpriseGuid, beginDate, endDate, issuerId, Item, Params, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.GetStockEntryChangesListNext(enterpriseGuid, beginDate, endDate, issuerId, Item, Params, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryApplications_1_4.getStockEntryChangesListNext(enterpriseGuid, beginDate, endDate, issuerId, Item, Params, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

Функция getStockEntryVersionListNext(enterpriseGuid, stockEntryGuid, issuerId = Неопределено, Item, Params, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.GetStockEntryVersionListNext(enterpriseGuid, stockEntryGuid, issuerId, Item, Params, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.GetStockEntryVersionListNext(enterpriseGuid, stockEntryGuid, issuerId, Item, Params, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryApplications_1_4.getStockEntryVersionListNext(enterpriseGuid, stockEntryGuid, issuerId, Item, Params, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

Функция getVetDocumentByUuid(vetDocumentUuid, enterpriseGuid, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.GetVetDocumentByUuid(vetDocumentUuid, enterpriseGuid, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.GetVetDocumentByUuid(vetDocumentUuid, enterpriseGuid, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryApplications_1_4.getVetDocumentByUuid(vetDocumentUuid, enterpriseGuid, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Предназначена для получения всех ВСД предприятия
//Используется самостоятельно в цикле Пока.
//Параметры:
// enterpriseGuid - Идентификатор предприятия
// issuerId       - Идентификатор ХС
// Item          - элемент списка, возвращаемый параметр
// Params     - для внутреннего использования, начальное значение - Неопределено
//Возвращаемое значение:
// Булево         - Ложь значит список пройден весь
Функция getVetDocumentListNext(enterpriseGuid, issuerId = Неопределено, Item, Params, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.GetVetDocumentListNext(enterpriseGuid, issuerId, Item, Params, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.GetVetDocumentListNext(enterpriseGuid, issuerId, Item, Params, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryApplications_1_4.getVetDocumentListNext(enterpriseGuid, issuerId, Item, Params, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

Функция getVetDocumentChangesListNext(enterpriseGuid, beginDate, endDate = Неопределено, issuerId = Неопределено, Item, Params, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.GetVetDocumentChangesListNext(enterpriseGuid, beginDate, endDate, issuerId, Item, Params, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.GetVetDocumentChangesListNext(enterpriseGuid, beginDate, endDate, issuerId, Item, Params, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryApplications_1_4.getVetDocumentChangesListNext(enterpriseGuid, beginDate, endDate, issuerId, Item, Params, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

Функция UpdateVeterinaryEvents(enterprise, stockEntry, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.UpdateVeterinaryEvents(enterprise, stockEntry, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.UpdateVeterinaryEvents(enterprise, stockEntry, issuerId, пОтказ, пОшибка);
	//ИначеЕсли Ветис.Версия_1_4() Тогда
	//	Возврат ВетисMercuryApplications_1_4.UpdateVeterinaryEvents(enterprise, stockEntry, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

Функция MergeStockEntries(guid, enterpriseGuid, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.MergeStockEntries(guid, enterpriseGuid, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.MergeStockEntries(guid, enterpriseGuid, issuerId, пОтказ, пОшибка);
	//ИначеЕсли Ветис.Версия_1_4() Тогда
	//	Возврат ВетисMercuryApplications_1_4.MergeStockEntries(guid, enterpriseGuid, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

Функция processIncomingConsignment(delivery, deliveryFacts, discrepancyReport = Неопределено, returnedDelivery = Неопределено, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.ProcessIncomingConsignment(delivery, deliveryFacts, discrepancyReport, returnedDelivery, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.ProcessIncomingConsignment(delivery, deliveryFacts, discrepancyReport, returnedDelivery, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryApplications_1_4.processIncomingConsignment(delivery, deliveryFacts, discrepancyReport, returnedDelivery, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Операция предназначена для оформления транспортной партии.
//Параметры:
// delivery - vetd:Delivery - Сведения для оформления транспортного ВСД
Функция PrepareOutgoingConsignment(delivery, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.PrepareOutgoingConsignment(delivery, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.PrepareOutgoingConsignment(delivery, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryApplications_1_4.prepareOutcomingConsignment(delivery, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Операция предназначена для устранения возможных несоответствий сведений об объёмах в складском журнале продукции системы Меркурий
//и фактических объёмов продукции на складе предприятия, выявленных по результатам проведенной инвентаризации.
//Параметры:
// enterprise - ent:Enterprise - Площадка на которой осуществляется инвентаризация
// inventoryDate - xs:dateTime - Дата проведения инвентаризации
// responsible - argc:User - Ответственный за инвентаризацию
// stockDiscrepancy - vetd:StockDiscrepancy - Сведения о результате инвентаризации (по одному факту расхождения)
// discrepancyReport - vetd:DiscrepancyReport - Сведения об акте несоответствия
Функция ResolveDiscrepancy(enterprise, inventoryDate, responsible, stockDiscrepancy, discrepancyReport, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.ResolveDiscrepancy(enterprise, inventoryDate, responsible, stockDiscrepancy, discrepancyReport, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.ResolveDiscrepancy(enterprise, inventoryDate, responsible, stockDiscrepancy, discrepancyReport, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryApplications_1_4.resolveDiscrepancy(enterprise, inventoryDate, responsible, stockDiscrepancy, discrepancyReport, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Операция предназначена для аннулирования ВСД.
//Параметры:
// vetDocumentId	- bs:UUID - Идентификатор ВСД, который аннулируется
// withdrawReason - vetd:WithdrawReason - Причина аннулирования ВСД
// withdrawDate - xs:dateTime - Дата аннулирования ВСД
// vetDoctor - argc:User - Ветеринарный врач, ответственный за аннулирование ВСД
Функция WithdrawVetDocument(vetDocumentId, withdrawReason, withdrawDate, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.WithdrawVetDocument(vetDocumentId, withdrawReason, withdrawDate, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.WithdrawVetDocument(vetDocumentId, withdrawReason, withdrawDate, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryApplications_1_4.prepareOutcomingConsignment(vetDocumentId, withdrawReason, withdrawDate, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Операция предназначена для регистрации новых ХС в реестре,
//а также для изменения информации об уже зарегистрированных.
//Параметры:
// modificationOperation - ent:BEModificationOperation - Описание операции добавления/изменения информации о ХС.
Функция ModifyBusinessEntity(modificationOperation, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.ModifyBusinessEntity(modificationOperation, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.ModifyBusinessEntity(modificationOperation, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryApplications_1_4.ModifyBusinessEntity(modificationOperation, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Операция предназначена для регистрации новых площадок (поднадзорных объектов) в реестре,
//а также для изменения информации об уже зарегистрированных.
//Параметры:
// modificationOperation - ent:ENTModificationOperation - Описание операции добавления/изменения информации о поднадзорном объекте.
Функция ModifyEnterprise(modificationOperation, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.ModifyEnterprise(modificationOperation, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.ModifyEnterprise(modificationOperation, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryApplications_1_4.ModifyEnterprise(modificationOperation, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Операция предназначена для создание связи между ХС и площадкой или удаление этой связи.
// Параметры:
//  modificationOperation - ent:BEActivityLocationsModificationOperation
Функция ModifyActivityLocations(modificationOperation, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.ModifyActivityLocations(modificationOperation, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.ModifyActivityLocations(modificationOperation, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryApplications_1_4.ModifyActivityLocations(modificationOperation, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Операция предназнчена для изменения номенклатуры продукции предприятия.
//Параметры:
// modificationOperation - prod:PSLModificationOperation
Функция ModifyProducerStockList(modificationOperation, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.ModifyProducerStockList(modificationOperation, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.ModifyProducerStockList(modificationOperation, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryApplications_1_4.ModifyProducerStockList(modificationOperation, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Предназначена для внесения номера транспортного средства в пункте перегрузке в уже оформленный ВСД
// Параметры:
Функция UpdateTransportMovementDetails(deliveryParticipant, vetDocumentUuid, shipmentRoute, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.UpdateTransportMovementDetails(deliveryParticipant, vetDocumentUuid, shipmentRoute, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.UpdateTransportMovementDetails(deliveryParticipant, vetDocumentUuid, shipmentRoute, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Предназначена для проверки возможности осуществления перевозки в рамках регионализации
// Параметры:
Функция CheckShipmentRegionalization(cargoType, shipmentRoute, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.CheckShipmentRegionalization(cargoType, shipmentRoute, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.CheckShipmentRegionalization(cargoType, shipmentRoute, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Предназначена для регистрации новых пользователей в системе Меркурий
// или привязки существующих пользователей к хозяйствующему субъекту.
// Параметры:
//  user - Описание пользователя системы - vd:User
Функция AddBusinessEntityUser(user, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.AddBusinessEntityUser(user, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.AddBusinessEntityUser(user, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Предназначена для получения данных пользователя по логину или его уникальному идентификатору
// Параметры:
//  user - Описание пользователя системы - vd:User
Функция GetBusinessEntityUser(user, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.GetBusinessEntityUser(user, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.GetBusinessEntityUser(user, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Предназначена для получения списка пользователей хозяйствующего субъекта
// Параметры:
Функция GetBusinessEntityUserListNext(issuerId = Неопределено, Item, Params, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.GetBusinessEntityUserListNext(issuerId, Item, Params, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.GetBusinessEntityUserListNext(issuerId, Item, Params, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Предназначена для назначения или изменения прав доступа пользователей в системе Меркурий.
// Роли пользователя изменяются только применительно к хозяйствующему субъекту, инициировавшему запрос на выполнение данной операции.
// Параметры:
//  user - Описание пользователя системы - vd:User
Функция UpdateUserAuthorities(user, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.UpdateUserAuthorities(user, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.UpdateUserAuthorities(user, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Предназначена для назначения зон ответственности пользователям в системе Меркурий
// Параметры:
//  user - Описание пользователя системы - vd:User
Функция UpdateUserWorkingAreas(user, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.UpdateUserWorkingAreas(user, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.UpdateUserWorkingAreas(user, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Предназначена для удаления связи между пользователем и хозяйствующим субъектом
// Параметры:
//  user - Описание пользователя системы - vd:User
Функция UnbindBusinessEntityUser(user, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.UnbindBusinessEntityUser(user, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.UnbindBusinessEntityUser(user, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Предназначена для получения списка прав пользователей для системы Меркурий
// Параметры:
Функция GetApplicableUserAuthorityListNext(issuerId = Неопределено, Item, Params, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.GetApplicableUserAuthorityListNext(issuerId, Item, Params, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.GetApplicableUserAuthorityListNext(issuerId, Item, Params, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции


Функция Создать(пИмя, пФабрика = Неопределено) Экспорт
	
	Возврат ВетисОбщегоНазначения.Создать(пИмя, URI(), пФабрика);
	
КонецФункции

Функция URI() Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.URI();
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.URI();
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryApplications_1_4.URI();
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

Функция User()
	
	Возврат ВетисMercuryVetdocument.User();
	
КонецФункции

Функция ИмяСервиса() Экспорт
	
	Возврат Перечисления.ВетисСервис.ApplicationManagementService;
	
КонецФункции

Функция ФабрикаWS()
	
	Возврат ВетисПовтИсп.ФабрикаMA(ИмяСервиса(), URI());
	
КонецФункции

Функция Прокси(пИмяОперации, пRequest, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "")
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryApplications_2_0.Прокси(пИмяОперации, пRequest, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryApplications_2_0.Прокси(пИмяОперации, пRequest, issuerId, пОтказ, пОшибка);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryApplications_1_4.Прокси(пИмяОперации, пRequest, issuerId, пОтказ, пОшибка);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
