
Функция getStockEntryByGuid(guid, enterpriseGuid, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("getStockEntryByGuid", "GetStockEntryByGuid", "stockEntry", issuerId, , пОтказ, пОшибка, "enterpriseGuid,guid", enterpriseGuid, guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("getStockEntryByGuid", "GetStockEntryByGuid", "stockEntry", issuerId, , пОтказ, пОшибка, "enterpriseGuid,guid", enterpriseGuid, guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("getStockEntryByGuid", "getStockEntryByGuid", "stockEntry", issuerId, , пОтказ, пОшибка, "enterpriseGuid,guid", enterpriseGuid, guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

Функция getStockEntryByUuid(uuid, enterpriseGuid, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("getStockEntryByUuid", "GetStockEntryByUuid", "stockEntry", issuerId, , пОтказ, пОшибка, "enterpriseGuid,uuid", enterpriseGuid, uuid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("getStockEntryByUuid", "GetStockEntryByUuid", "stockEntry", issuerId, , пОтказ, пОшибка, "enterpriseGuid,uuid", enterpriseGuid, uuid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("getStockEntryByUuid", "getStockEntryByUuid", "stockEntry", issuerId, , пОтказ, пОшибка, "enterpriseGuid,uuid", enterpriseGuid, uuid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Предназначена для получения списка записей складского журнала
//Используется самостоятельно в цикле Пока.
//Параметры:
// enterpriseGuid - Идентификатор предприятия
// issuerId       - Идентификатор ХС
// Item          - элемент списка, возвращаемый параметр
// пПараметры     - для внутреннего использования, начальное значение - Неопределено
//Возвращаемое значение:
// Булево         - Ложь значит список пройден весь
Функция getStockEntryListNext(enterpriseGuid, issuerId = Неопределено, Item, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ветис.GetListItFirst(пПараметры) Тогда
		GetListInit("getStockEntryList", "GetStockEntryList", "stockEntryList", "stockEntry", , issuerId, пПараметры, "enterpriseGuid,searchPattern", enterpriseGuid, ?(пПараметры.Свойство("searchPattern"), ВетисMercuryVetdocument.StockEntrySearchPattern(пПараметры.searchPattern), ""));
	КонецЕсли;
	
	Возврат Ветис.GetListNext(Item, пПараметры, пОтказ, пОшибка);
	
КонецФункции

Функция getStockEntryChangesListNext(enterpriseGuid, beginDate, endDate = Неопределено, issuerId = Неопределено, Item, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ветис.GetListItFirst(пПараметры) Тогда
		GetListInit("getStockEntryChangesList", "GetStockEntryChangesList", "stockEntryList", "stockEntry", , issuerId, пПараметры, "enterpriseGuid,updateDateInterval", enterpriseGuid, ВетисBase.DateInterval(beginDate, endDate));
	КонецЕсли;
	
	Возврат Ветис.GetListNext(Item, пПараметры, пОтказ, пОшибка);
	
КонецФункции

Функция getStockEntryVersionListNext(enterpriseGuid, stockEntryGuid, issuerId = Неопределено, Item, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ветис.GetListItFirst(пПараметры) Тогда
		GetListInit("getStockEntryVersionList", "GetStockEntryVersionList", "stockEntryList", "stockEntry", , issuerId, пПараметры, "enterpriseGuid,guid", enterpriseGuid, stockEntryGuid);
	КонецЕсли;
	
	Возврат Ветис.GetListNext(Item, пПараметры, пОтказ, пОшибка);
	
КонецФункции

Функция getVetDocumentByUuid(vetDocumentUuid, enterpriseGuid, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("getVetDocumentByUuid", "GetVetDocumentByUuid", "vetDocument", issuerId, , пОтказ, пОшибка, "enterpriseGuid,uuid", enterpriseGuid, vetDocumentUuid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("getVetDocumentByUuid", "GetVetDocumentByUuid", "vetDocument", issuerId, , пОтказ, пОшибка, "enterpriseGuid,uuid", enterpriseGuid, vetDocumentUuid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("getVetDocumentByUuid", "GetVetDocumentByUuid", "vetDocument", issuerId, , пОтказ, пОшибка, "enterpriseGuid,uuid", enterpriseGuid, vetDocumentUuid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Предназначена для получения всех ВСД предприятия
//Используется самостоятельно в цикле Пока.
//Параметры:
// enterpriseGuid - Идентификатор предприятия
// issuerId       - Идентификатор ХС
// Item          - элемент списка, возвращаемый параметр
// пПараметры     - для внутреннего использования, начальное значение - Неопределено
//Возвращаемое значение:
// Булево         - Ложь значит список пройден весь
Функция getVetDocumentListNext(enterpriseGuid, issuerId = Неопределено, Item, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ветис.GetListItFirst(пПараметры) Тогда
		GetListInit("getVetDocumentList", "GetVetDocumentList", "vetDocumentList", "vetDocument", , issuerId, пПараметры, "enterpriseGuid", enterpriseGuid);
	КонецЕсли;
	
	Возврат Ветис.GetListNext(Item, пПараметры, пОтказ, пОшибка);
	
КонецФункции

Функция getVetDocumentChangesListNext(enterpriseGuid, beginDate, endDate = Неопределено, issuerId = Неопределено, Item, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ветис.GetListItFirst(пПараметры) Тогда
		GetListInit("getVetDocumentChangesList", "GetVetDocumentChangesList", "vetDocumentList", "vetDocument", , issuerId, пПараметры, "enterpriseGuid,updateDateInterval", enterpriseGuid, ВетисBase.DateInterval(beginDate, endDate));
	КонецЕсли;
	
	Возврат Ветис.GetListNext(Item, пПараметры, пОтказ, пОшибка);
	
КонецФункции

Функция UpdateVeterinaryEvents(enterprise, stockEntry, issuerId = Неопределено, initiator = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("updateVeterinaryEvents", "UpdateVeterinaryEvents", "stockEntry", issuerId, initiator, пОтказ, пОшибка, "enterprise,stockEntry", enterprise, stockEntry);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("updateVeterinaryEvents", "UpdateVeterinaryEvents", "stockEntry", issuerId, initiator, пОтказ, пОшибка, "enterprise,stockEntry", enterprise, stockEntry);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

Функция MergeStockEntries(enterprise, mergeOperation, issuerId = Неопределено, initiator = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("mergeStockEntries", "MergeStockEntries", "stockEntry", issuerId, initiator, пОтказ, пОшибка, "enterprise,mergeOperation", enterprise, mergeOperation);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("mergeStockEntries", "MergeStockEntries", "stockEntry", issuerId, initiator, пОтказ, пОшибка, "enterprise,mergeOperation", enterprise, mergeOperation);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

Функция processIncomingConsignment(delivery, deliveryFacts, discrepancyReport = Неопределено, returnedDelivery = Неопределено, issuerId = Неопределено, initiator = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПрокси("processIncomingConsignment", "ProcessIncomingConsignment", , issuerId, initiator, пОтказ, пОшибка, "delivery,deliveryFacts,discrepancyReport,returnedDelivery", delivery, deliveryFacts, discrepancyReport, returnedDelivery);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПрокси("processIncomingConsignment", "ProcessIncomingConsignment", , issuerId, initiator, пОтказ, пОшибка, "delivery,deliveryFacts,discrepancyReport,returnedDelivery", delivery, deliveryFacts, discrepancyReport, returnedDelivery);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ПолучитьЧерезПрокси("processIncomingConsignment", "ProcessIncomingConsignment", , issuerId, initiator, пОтказ, пОшибка, "delivery,deliveryFacts,discrepancyReport,returnedDelivery", delivery, deliveryFacts, discrepancyReport, returnedDelivery);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Операция предназначена для оформления транспортной партии.
//Параметры:
// delivery - vetd:Delivery - Сведения для оформления транспортного ВСД
Функция PrepareOutgoingConsignment(delivery, issuerId = Неопределено, initiator = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПрокси("prepareOutgoingConsignment", "PrepareOutgoingConsignment", , issuerId, initiator, пОтказ, пОшибка, "delivery", delivery);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПрокси("prepareOutgoingConsignment", "PrepareOutgoingConsignment", , issuerId, initiator, пОтказ, пОшибка, "delivery", delivery);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ПолучитьЧерезПрокси("prepareOutcomingConsignment", "PrepareOutcomingConsignment", , issuerId, initiator, пОтказ, пОшибка, "delivery", delivery);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Операция предназначена для устранения возможных несоответствий сведений об объёмах в складском журнале продукции системы Меркурий
//и фактических объёмов продукции на складе предприятия, выявленных по результатам проведенной инвентаризации.
//Параметры:
// enterprise - ent:Enterprise - Площадка на которой осуществляется инвентаризация
// inventoryDate - xs:dateTime - Дата проведения инвентаризации
// responsible - argc:User - Ответственный за инвентаризацию
// stockDiscrepancy - vetd:StockDiscrepancy - Сведения о результате инвентаризации (по одному факту расхождения)
// discrepancyReport - vetd:DiscrepancyReport - Сведения об акте несоответствия
Функция ResolveDiscrepancy(enterprise, inventoryDate, responsible, stockDiscrepancy, discrepancyReport, issuerId = Неопределено, initiator = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("resolveDiscrepancy", "ResolveDiscrepancy", "stockEntryList", issuerId, initiator, пОтказ, пОшибка, "enterprise,inventoryDate,responsible,stockDiscrepancy,discrepancyReport", enterprise, inventoryDate, responsible, stockDiscrepancy, discrepancyReport);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("resolveDiscrepancy", "ResolveDiscrepancy", "stockEntryList", issuerId, initiator, пОтказ, пОшибка, "enterprise,inventoryDate,responsible,stockDiscrepancy,discrepancyReport", enterprise, inventoryDate, responsible, stockDiscrepancy, discrepancyReport);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("resolveDiscrepancy", "ResolveDiscrepancy", "stockEntryList", issuerId, initiator, пОтказ, пОшибка, "enterprise,inventoryDate,responsible,stockDiscrepancy,discrepancyReport", enterprise, inventoryDate, responsible, stockDiscrepancy, discrepancyReport);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Операция предназначена для аннулирования ВСД.
//Параметры:
// vetDocumentId	- bs:UUID - Идентификатор ВСД, который аннулируется
// withdrawReason - vetd:WithdrawReason - Причина аннулирования ВСД
// withdrawDate - xs:dateTime - Дата аннулирования ВСД
// vetDoctor - argc:User - Ветеринарный врач, ответственный за аннулирование ВСД
Функция WithdrawVetDocument(vetDocumentId, withdrawReason, withdrawDate, issuerId = Неопределено, initiator = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПрокси("withdrawVetDocument", "WithdrawVetDocument", , issuerId, initiator, пОтказ, пОшибка, "vetDocumentId,withdrawReason,withdrawDate,specifiedPerson", vetDocumentId, withdrawReason, withdrawDate, User());
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПрокси("withdrawVetDocument", "WithdrawVetDocument", , issuerId, initiator, пОтказ, пОшибка, "vetDocumentId,withdrawReason,withdrawDate,specifiedPerson", vetDocumentId, withdrawReason, withdrawDate, User());
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ПолучитьЧерезПрокси("withdrawVetDocument", "WithdrawVetDocument", , issuerId, initiator, пОтказ, пОшибка, "vetDocumentId,withdrawReason,withdrawDate,vetDoctor", vetDocumentId, withdrawReason, withdrawDate, User());
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Операция предназначена для регистрации новых ХС в реестре,
//а также для изменения информации об уже зарегистрированных.
//Параметры:
// modificationOperation - ent:BEModificationOperation - Описание операции добавления/изменения информации о ХС.
Функция ModifyBusinessEntity(modificationOperation, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("modifyBusinessEntity", "ModifyBusinessEntity", "businessEntity", issuerId, , пОтказ, пОшибка, "modificationOperation", modificationOperation);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("modifyBusinessEntity", "ModifyBusinessEntity", "businessEntity", issuerId, , пОтказ, пОшибка, "modificationOperation", modificationOperation);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("modifyBusinessEntity", "ModifyBusinessEntity", "businessEntity", issuerId, , пОтказ, пОшибка, "modificationOperation", modificationOperation);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Операция предназначена для регистрации новых площадок (поднадзорных объектов) в реестре,
//а также для изменения информации об уже зарегистрированных.
//Параметры:
// modificationOperation - ent:ENTModificationOperation - Описание операции добавления/изменения информации о поднадзорном объекте.
Функция ModifyEnterprise(modificationOperation, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("modifyEnterprise", "ModifyEnterprise", "enterprise", issuerId, , пОтказ, пОшибка, "modificationOperation", modificationOperation);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("modifyEnterprise", "ModifyEnterprise", "enterprise", issuerId, , пОтказ, пОшибка, "modificationOperation", modificationOperation);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("modifyEnterprise", "ModifyEnterprise", "enterprise", issuerId, , пОтказ, пОшибка, "modificationOperation", modificationOperation);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Операция предназначена для создание связи между ХС и площадкой или удаление этой связи.
// Параметры:
//  modificationOperation - ent:BEActivityLocationsModificationOperation
Функция ModifyActivityLocations(modificationOperation, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("modifyActivityLocations", "ModifyActivityLocations", "businessEntity", issuerId, , пОтказ, пОшибка, "modificationOperation", modificationOperation);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("modifyActivityLocations", "ModifyActivityLocations", "businessEntity", issuerId, , пОтказ, пОшибка, "modificationOperation", modificationOperation);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("modifyActivityLocations", "ModifyActivityLocations", "businessEntity", issuerId, , пОтказ, пОшибка, "modificationOperation", modificationOperation);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Операция предназнчена для изменения номенклатуры продукции предприятия.
//Параметры:
// modificationOperation - prod:PSLModificationOperation
Функция ModifyProducerStockList(modificationOperation, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("modifyProducerStockList", "ModifyProducerStockList", "productItemList", issuerId, , пОтказ, пОшибка, "modificationOperation", modificationOperation);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("modifyProducerStockList", "ModifyProducerStockList", "productItemList", issuerId, , пОтказ, пОшибка, "modificationOperation", modificationOperation);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("modifyProducerStockList", "ModifyProducerStockList", "productItemList", issuerId, , пОтказ, пОшибка, "modificationOperation", modificationOperation);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Предназначена для внесения номера транспортного средства в пункте перегрузке в уже оформленный ВСД
// Параметры:
Функция UpdateTransportMovementDetails(deliveryParticipant, vetDocumentUuid, shipmentRoute, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("updateTransportMovementDetails", "UpdateTransportMovementDetails", "vetDocument", issuerId, , пОтказ, пОшибка, "deliveryParticipant,vetDocumentUuid,shipmentRoute", deliveryParticipant, vetDocumentUuid, shipmentRoute);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("updateTransportMovementDetails", "UpdateTransportMovementDetails", "vetDocument", issuerId, , пОтказ, пОшибка, "deliveryParticipant,vetDocumentUuid,shipmentRoute", deliveryParticipant, vetDocumentUuid, shipmentRoute);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Предназначена для проверки возможности осуществления перевозки в рамках регионализации
// Параметры:
Функция CheckShipmentRegionalization(cargoType, shipmentRoute, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("checkShipmentRegionalization", "CheckShipmentRegionalization", "r13nRouteSection", issuerId, , пОтказ, пОшибка, "cargoType,shipmentRoute", cargoType, shipmentRoute);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("checkShipmentRegionalization", "CheckShipmentRegionalization", "r13nRouteSection", issuerId, , пОтказ, пОшибка, "cargoType,shipmentRoute", cargoType, shipmentRoute);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Предназначена для регистрации новых пользователей в системе Меркурий
// или привязки существующих пользователей к хозяйствующему субъекту.
// Параметры:
//  user - Описание пользователя системы - vd:User
Функция AddBusinessEntityUser(user, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("addBusinessEntityUser", "AddBusinessEntityUser", "user", issuerId, , пОтказ, пОшибка, "user", user);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("addBusinessEntityUser", "AddBusinessEntityUser", "user", issuerId, , пОтказ, пОшибка, "user", user);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Предназначена для получения данных пользователя по логину или его уникальному идентификатору
// Параметры:
//  user - Описание пользователя системы - vd:User
Функция GetBusinessEntityUser(user, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("getBusinessEntityUser", "GetBusinessEntityUser", "user", issuerId, , пОтказ, пОшибка, "user", user);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("getBusinessEntityUser", "GetBusinessEntityUser", "user", issuerId, , пОтказ, пОшибка, "user", user);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Предназначена для получения списка пользователей хозяйствующего субъекта
// Параметры:
Функция GetBusinessEntityUserListNext(issuerId = Неопределено, Item, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
	
	Если Ветис.GetListItFirst(пПараметры) Тогда
		GetListInit("getBusinessEntityUserList", "GetBusinessEntityUserList", "userList", "user", , issuerId, пПараметры);
	КонецЕсли;
	
	Возврат Ветис.GetListNext(Item, пПараметры, пОтказ, пОшибка);
	
КонецФункции

// Предназначена для назначения или изменения прав доступа пользователей в системе Меркурий.
// Роли пользователя изменяются только применительно к хозяйствующему субъекту, инициировавшему запрос на выполнение данной операции.
// Параметры:
//  user - Описание пользователя системы - vd:User
Функция UpdateUserAuthorities(user, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("updateUserAuthorities", "UpdateUserAuthorities", "user", issuerId, , пОтказ, пОшибка, "user", user);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("updateUserAuthorities", "UpdateUserAuthorities", "user", issuerId, , пОтказ, пОшибка, "user", user);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Предназначена для назначения зон ответственности пользователям в системе Меркурий
// Параметры:
//  user - Описание пользователя системы - vd:User
Функция UpdateUserWorkingAreas(user, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("updateUserWorkingAreas", "UpdateUserWorkingAreas", "user", issuerId, , пОтказ, пОшибка, "user", user);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("updateUserWorkingAreas", "UpdateUserWorkingAreas", "user", issuerId, , пОтказ, пОшибка, "user", user);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Предназначена для удаления связи между пользователем и хозяйствующим субъектом
// Параметры:
//  user - Описание пользователя системы - vd:User
Функция UnbindBusinessEntityUser(user, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("unbindBusinessEntityUser", "UnbindBusinessEntityUser", "user", issuerId, , пОтказ, пОшибка, "user", user);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ПолучитьЧерезПроксиТолькоОбъект("unbindBusinessEntityUser", "UnbindBusinessEntityUser", "user", issuerId, , пОтказ, пОшибка, "user", user);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Предназначена для получения списка прав пользователей для системы Меркурий
// Параметры:
Функция GetApplicableUserAuthorityListNext(issuerId = Неопределено, Item, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если Ветис.GetListItFirst(пПараметры) Тогда
		GetListInit("getApplicableUserAuthorityList", "GetApplicableUserAuthorityList", "userList", "user", , issuerId, пПараметры);
	КонецЕсли;
	
	Возврат Ветис.GetListNext(Item, пПараметры, пОтказ, пОшибка);
	
КонецФункции


Функция GetListInit(пИмяОперации, пИмяОбъекта, пИмяСписка, пИмяКоллекции, пИмяСвойства = "", issuerId, пПараметры = Неопределено,
	пИменаСвойств = Неопределено
	, пЗн1 = Неопределено, пЗн2 = Неопределено, пЗн3 = Неопределено
	, пЗн4 = Неопределено, пЗн5 = Неопределено, пЗн6 = Неопределено
	, пЗн7 = Неопределено, пЗн8 = Неопределено, пЗн9 = Неопределено) Экспорт
	
	//Если Ветис.GetListItFirst(пПараметры) Тогда
		пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
		
		_request = Создать(пИмяОбъекта+"Request", , пИменаСвойств, пЗн1, пЗн2, пЗн3, пЗн4, пЗн5, пЗн6, пЗн7, пЗн8, пЗн9);
		
		Если пПараметры.Свойство("count") ИЛИ пПараметры.Свойство("offset") Тогда
			ВетисОбщегоНазначения.УстановитьЗначение(_request, ВетисBase.ListOptions(?(пПараметры.Свойство("count"), пПараметры.count, Неопределено), ?(пПараметры.Свойство("offset"), пПараметры.offset, Неопределено)), "listOptions");
		КонецЕсли;
		
		пПараметры.Вставить("Фабрика", ФабрикаWS());
		пПараметры.Вставить("URI",     URI());
		пПараметры.Вставить("issuerId", issuerId);
		
		Ветис.GetListInit(_request, пИмяОперации+"Request", пИмяОбъекта+"Response", пИмяСписка, пИмяКоллекции, пИмяСвойства, пПараметры);
	//КонецЕсли;
	
КонецФункции

Функция Создать(пИмя, initiator = Неопределено, пИменаСвойств = Неопределено
	, пЗн1 = Неопределено, пЗн2 = Неопределено, пЗн3 = Неопределено
	, пЗн4 = Неопределено, пЗн5 = Неопределено, пЗн6 = Неопределено
	, пЗн7 = Неопределено, пЗн8 = Неопределено, пЗн9 = Неопределено
	) Экспорт
	
	_Объект = ВетисОбщегоНазначения.Создать(пИмя, URI());
	
	Если НЕ _Объект.Свойства().Получить("localTransactionId") = Неопределено Тогда
		ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Строка(Новый УникальныйИдентификатор), "localTransactionId");
	КонецЕсли;
	
	Если НЕ пИменаСвойств = Неопределено Тогда
		_Номер = 1;
		Для каждого _Имя Из СтрРазделить(пИменаСвойств, ",") Цикл
			ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Вычислить("пЗн"+_Номер), _Имя);
			_Номер = _Номер + 1;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ _Объект.Свойства().Получить("initiator") = Неопределено И _Объект.initiator = Неопределено Тогда
		Если Ложь Тогда
		ИначеЕсли ТипЗнч(initiator) = Тип("Строка") Тогда
			ВетисОбщегоНазначения.УстановитьЗначение(_Объект, User(initiator), "initiator");
		ИначеЕсли ТипЗнч(initiator) = Тип("СправочникСсылка.ВетисПользователи") Тогда
			ВетисОбщегоНазначения.УстановитьЗначение(_Объект, User(ВетисОбщегоНазначения.ЗначениеРеквизита(initiator, "Логин")), "initiator");
		ИначеЕсли ТипЗнч(initiator) = Тип("ОбъектXDTO") Тогда
			ВетисОбщегоНазначения.УстановитьЗначение(_Объект, initiator, "initiator");
		Иначе
			ВетисОбщегоНазначения.УстановитьЗначение(_Объект, User(), "initiator");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ _Объект.Свойства().Получить("listOptions") = Неопределено И _Объект.listOptions = Неопределено Тогда
		ВетисОбщегоНазначения.УстановитьЗначение(_Объект, ВетисBase.ListOptions(), "listOptions");
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция URI() Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат URI_2_0();
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат URI_2_0();
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат "http://api.vetrf.ru/schema/cdm/mercury/applications";
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция URI_2_0()
	
	Если ВетисПовтИсп.Настройки_ЦелевойСервис() = Перечисления.ВетисЦелевойСервис.mercury_g2b_service Тогда
		Возврат "http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2";
	ИначеЕсли ВетисПовтИсп.Настройки_ЦелевойСервис() = Перечисления.ВетисЦелевойСервис.mercury_vu_service Тогда
		Возврат "http://api.vetrf.ru/schema/cdm/mercury/vu/applications/v2";
	КонецЕсли;
	
КонецФункции

Функция User(пЛогин = Неопределено)
	
	Возврат ВетисMercuryVetdocument.User(?(пЛогин = Неопределено, ВетисПовтИсп.ТекущийПользователь_Логин(), пЛогин));
	
КонецФункции

Функция ИмяСервиса() Экспорт
	
	Возврат Перечисления.ВетисСервис.ApplicationManagementService;
	
КонецФункции

Функция Фабрика()
	
	Возврат ВетисПовтИсп.ФабрикаОбщая();
	
КонецФункции

Функция ФабрикаWS()
	
	Возврат ВетисПовтИсп.ФабрикаMA(ИмяСервиса(), URI());
	
КонецФункции

Функция Прокси(пИмяОперации, пRequest, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "")
	
	_Параметры = Новый Структура;
	_Параметры.Вставить("Сервис", Перечисления.ВетисСервис.amsMercuryService);
	_Параметры.Вставить("ИмяОперации", пИмяОперации);
	_Параметры.Вставить("Фабрика", ФабрикаWS());
	_Параметры.Вставить("Настройка", issuerId);
	
	_Ответ = Ветис.ВыполнитьЗапрос(пRequest, _Параметры);
	
	Если _Ответ.Отказ = Истина Тогда
		пОтказ = _Ответ.Отказ;
		пОшибка = _Ответ.ТекстОшибки;
	КонецЕсли;
	
	//Если НЕ _Ответ.Отказ Тогда
	//	Ветис.ЖурналОпераций_Добавить(_Ответ.ТекстЗапроса, пИмяОперации, "Запрос");
	//	Ветис.ЖурналОпераций_Добавить(_Ответ.ТекстОтветаЗаявки, пИмяОперации, "Запрос");
	//	Ветис.ЖурналОпераций_Добавить(_Ответ.ТекстОтвета, пИмяОперации, "Ответ");
	//	Возврат _Ответ.Result;
	//КонецЕсли;
	
	Возврат _Ответ;
	
КонецФункции

Функция ПолучитьЧерезПрокси(пИмяОперации, пИмяОбъекта, пИмяСвойства = Неопределено, issuerId = Неопределено, initiator = Неопределено, пОтказ = Ложь, пОшибка = "",
	пИменаСвойств = Неопределено
	, пЗн1 = Неопределено, пЗн2 = Неопределено, пЗн3 = Неопределено
	, пЗн4 = Неопределено, пЗн5 = Неопределено, пЗн6 = Неопределено
	, пЗн7 = Неопределено, пЗн8 = Неопределено, пЗн9 = Неопределено)
	
	_Request = Создать(пИмяОбъекта+"Request", initiator, пИменаСвойств, пЗн1, пЗн2, пЗн3, пЗн4, пЗн5, пЗн6, пЗн7, пЗн8, пЗн9);
	
	_Response = Прокси(пИмяОперации+"Request", _Request, issuerId, пОтказ, пОшибка);
	
	Если пОтказ = Истина Тогда Возврат _Response; КонецЕсли;
	
	_Объект = _Response.Result[пИмяОбъекта+"Response"];
	
	Если пИмяСвойства = Неопределено Тогда
		_Response.Вставить("Response", ВетисОбщегоНазначения.ПривестиКТипу(_Объект, пИмяОбъекта+"Response", URI()));
	Иначе
		_Response.Вставить("Response", ВетисОбщегоНазначения.ПривестиКТипу(_Объект, пИмяОбъекта+"Response", URI())[пИмяСвойства]);
	КонецЕсли;
	
	Возврат _Response;
	
КонецФункции

Функция ПолучитьЧерезПроксиТолькоОбъект(пИмяОперации, пИмяОбъекта, пИмяСвойства = Неопределено, issuerId = Неопределено, initiator = Неопределено, пОтказ = Ложь, пОшибка = "",
	пИменаСвойств = Неопределено
	, пЗн1 = Неопределено, пЗн2 = Неопределено, пЗн3 = Неопределено
	, пЗн4 = Неопределено, пЗн5 = Неопределено, пЗн6 = Неопределено
	, пЗн7 = Неопределено, пЗн8 = Неопределено, пЗн9 = Неопределено)
	
	_Ответ = ПолучитьЧерезПрокси(пИмяОперации, пИмяОбъекта, пИмяСвойства, issuerId, initiator, пОтказ, пОшибка, пИменаСвойств, пЗн1, пЗн2, пЗн3, пЗн4, пЗн5, пЗн6, пЗн7, пЗн8, пЗн9);
	
	Если _Ответ.Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат _Ответ.Response;
	КонецЕсли;
	
КонецФункции
