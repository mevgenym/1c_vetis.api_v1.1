
#Область НастройкиПодключения

Функция ПолучитьНастройкиПодключения(пСсылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	_Таблица.Логин,
	|	_Таблица.Пароль,
	|	_Таблица.КлючАПИ,
	|//1	_Таблица.BusinessEntity.guid КАК issuerId
	|//2	&issuerId КАК issuerId
	|ИЗ
	|	Справочник.ВетисНастройкиПодключения КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|//1	И _Таблица.Ссылка = &Ссылка
	|//2	И _Таблица.ИдентификаторыХС.issuerID = &issuerId
	|	И ИСТИНА");
	
	Запрос.УстановитьПараметр("Ссылка", пСсылка);
	
	Если ТипЗнч(пСсылка) = Тип("СправочникСсылка.ВетисНастройкиПодключения") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//1", "");
	ИначеЕсли ТипЗнч(пСсылка) = Тип("Строка") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//2", "");
		Запрос.УстановитьПараметр("issuerId", пСсылка);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//1", "");
		Запрос.УстановитьПараметр("Ссылка", Ветис.ТекущаяНастройка());
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		_Настройки = Новый Структура;
		_Настройки.Вставить("КлючАПИ",  Выборка.КлючАПИ);
		_Настройки.Вставить("Логин",    Выборка.Логин);
		_Настройки.Вставить("Пароль",   Выборка.Пароль);
		_Настройки.Вставить("issuerId",   Выборка.issuerId);
		
	КонецЕсли;
	
	Возврат _Настройки;
	
КонецФункции

#КонецОбласти

#Область Фабрика

Функция ФабрикаОбщая() Экспорт
	
	_url = XSDПолучитьURL();
	
	Если _url.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	_фабрика = СоздатьФабрикуXDTO(_url);
	
	_Пакеты = Новый Массив;
	
	Для Каждого _Пакет Из _фабрика.Пакеты Цикл
		_Пакеты.Добавить(_Пакет);
	КонецЦикла;
	
	Для Каждого _Пакет Из ВетисSoapEnvelope.Фабрика().Пакеты Цикл
		_Пакеты.Добавить(_Пакет);
	КонецЦикла;
	
	_фабрика = Новый ФабрикаXDTO(, _Пакеты);
	
	Возврат _фабрика;
	
КонецФункции

Функция ФабрикаWS(пИмяСервиса) Экспорт
	
	_ФабрикаXDTO = ФабрикаОбщая();
	
	_Определения = Определения(пИмяСервиса);
	
	_URI = Новый Массив;
	_URI.Добавить(ВетисRegistry_2_0.ServiceURI());
	_URI.Добавить(ВетисBase_2_0.ServiceURI());
	
	_ФабрикаWS = Новый ФабрикаXDTO(_Определения.ФабрикаXDTO.ЭкспортМоделиXDTO(_URI), _ФабрикаXDTO.Пакеты);
	
	_Пакеты = Новый Массив;
	_Пакеты.Добавить(_ФабрикаXDTO.Пакеты.Получить(ВетисSoapEnvelope.URI()));
	
	Для Каждого _Пакет Из _ФабрикаWS.Пакеты Цикл
		_Пакеты.Добавить(_Пакет);
	КонецЦикла;
	
	_фабрика = Новый ФабрикаXDTO(, _Пакеты);
	
	Возврат _фабрика;
	
КонецФункции

Функция ФабрикаMA(пИмяСервиса, пURI) Экспорт
	
	_ФабрикаXDTO = ФабрикаОбщая();
	
	_Определения = Определения(пИмяСервиса);
	
	_URI = Новый Массив;  
	
	// создаем врем. фабрику на основе пакетов из конфиги и web сервиса
	// нам нужны 2 пакета из ws, но пакет с application нужен локальный
	Если Ветис.Версия_2_0() Тогда
		_URI.Добавить(ВетисApplication_2_0.ServiceURI());
		_URI.Добавить(ВетисBase_2_0.ServiceURI());
		
	Иначе
		_URI.Добавить(ВетисApplication.ServiceURI());
		_URI.Добавить(ВетисBase.ServiceURI());
	КонецЕсли;
	
	_ФабрикаWS = Новый ФабрикаXDTO(_Определения.ФабрикаXDTO.ЭкспортМоделиXDTO(_URI), _ФабрикаXDTO.Пакеты);
	
	_Пакеты = Новый Массив;
	_Пакеты.Добавить(_ФабрикаXDTO.Пакеты.Получить(пURI));
	_Пакеты.Добавить(_ФабрикаXDTO.Пакеты.Получить(ВетисSoapEnvelope.URI()));
	
	Для Каждого _Пакет Из _ФабрикаWS.Пакеты Цикл
		_Пакеты.Добавить(_Пакет);
	КонецЦикла;
	
	_фабрика = Новый ФабрикаXDTO(, _Пакеты);
	
	Возврат _фабрика;
	
КонецФункции

#КонецОбласти

#Область Прокси

Функция Определения(пИмяСервиса) Экспорт
	
	Возврат ОпределенияПоURL(WSDLПолучить(пИмяСервиса).URL);
	
КонецФункции

Функция ОпределенияПоURL(пURL) Экспорт
	
	_ЗащищенноеСоедиенение = Новый ЗащищенноеСоединениеOpenSSL;
	
	_ТаймАутПрокси = 60;
	
	Попытка
		Если _ЗащищенноеСоедиенение = Неопределено Тогда
			_Определения = Новый WSОпределения(пURL,,,, _ТаймАутПрокси);
		Иначе
			_Определения = Новый WSОпределения(пURL,,,, _ТаймАутПрокси, _ЗащищенноеСоедиенение);
		КонецЕсли;
	Исключение
		ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат _Определения;
	
КонецФункции

Функция Прокси(пИмяСервиса) Экспорт
	
	_ЗащищенноеСоедиенение = Новый ЗащищенноеСоединениеOpenSSL;
	
	Попытка
		
		_wsdl = WSDLПолучить(пИмяСервиса);
		
		_Определения = ОпределенияПоURL(_wsdl.URL);
		
		Если _ЗащищенноеСоедиенение = Неопределено Тогда
			_Прокси = Новый WSПрокси(_Определения, _wsdl.URI, _wsdl.Сервис, _wsdl.Порт,, Ветис.Настройки_ВремяОжиданияОтвета());
		Иначе
			_Прокси = Новый WSПрокси(_Определения, _wsdl.URI, _wsdl.Сервис, _wsdl.Порт,, Ветис.Настройки_ВремяОжиданияОтвета(), _ЗащищенноеСоедиенение);
		КонецЕсли;
		
		_Настройки = ПолучитьНастройкиПодключения();
		
		_Прокси.Пользователь = _Настройки.Логин;
		_Прокси.Пароль = _Настройки.Пароль;
		
		Возврат _Прокси;
		
	Исключение
		ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область WSDL

Функция ПолучитьТаблицуWSDL(пТестовый = Неопределено, пСервис = Неопределено)
	
	_таблица = Неопределено;
	
	_Тестовый = ?(пТестовый = Неопределено, Ветис.Настройки_Тестовый(), пТестовый);
	
	_Сервис = ?(пСервис = Неопределено, Ветис.Настройки_ЦелевойСервис(), пСервис);
	
	Если Ветис.Версия_2_0() Тогда
		
		Если _Тестовый Тогда
			_имя = "http://api.vetrf.ru/schema/platform/services/2.0-RC-last/";
			_суф = "_v2.0_pilot.wsdl";
		Иначе
			_имя = "http://api.vetrf.ru/schema/platform/services/2.0-last/";
			_суф = "_v2.0_production.wsdl";
		КонецЕсли;
		
		Если _Сервис = "mercury_vu_service" Тогда
			WSDLДобавить(_таблица, Перечисления.ВетисСервис.amsMercuryService, "http://api.vetrf.ru/schema/cdm/application/service", "ApplicationManagementServiceBindingQSService", "ApplicationManagementServiceBindingQSPort", _Имя+"ams-mercury-vu.service"+_суф, Истина);
		Иначе
			WSDLДобавить(_таблица, Перечисления.ВетисСервис.amsMercuryService, "http://api.vetrf.ru/schema/cdm/application/service", "ApplicationManagementServiceBindingQSService", "ApplicationManagementServiceBindingQSPort", _Имя+"ams-mercury-g2b.service"+_суф, Истина);
		КонецЕсли;
		
		WSDLДобавить(_таблица, Перечисления.ВетисСервис.ApplicationManagementService, "http://api.vetrf.ru/schema/cdm/application/service", "ApplicationManagementServiceBindingQSService", "ApplicationManagementServiceBindingQSPort", _Имя+"ApplicationManagementService_v1.1.wsdl");
		
		WSDLДобавить(_таблица, Перечисления.ВетисСервис.DictionaryService, "http://api.vetrf.ru/schema/cdm/registry/dictionary/service/v2", "DictionaryServiceBindingQSService", "DictionaryServiceBindingQSPort", _Имя+"DictionaryService"+_суф);
		WSDLДобавить(_таблица, Перечисления.ВетисСервис.EnterpriseService, "http://api.vetrf.ru/schema/cdm/registry/enterprise/service/v2", "EnterpriseServiceBindingQSService", "EnterpriseServiceBindingQSPort", _Имя+"EnterpriseService"+_суф);
		WSDLДобавить(_таблица, Перечисления.ВетисСервис.IkarService,       "http://api.vetrf.ru/schema/cdm/registry/ikar/service/v2",       "IkarServiceBindingQSService",       "IkarServiceBindingQSPort",       _Имя+"IkarService"+_суф);
		WSDLДобавить(_таблица, Перечисления.ВетисСервис.ProductService,    "http://api.vetrf.ru/schema/cdm/registry/product/service/v2",    "ProductServiceBindingQSService",    "ProductServiceBindingQSPort",    _Имя+"ProductService"+_суф);
		WSDLДобавить(_таблица, Перечисления.ВетисСервис.RegionalizationService, "http://api.vetrf.ru/schema/cdm/registry/r13n/service/v2",  "RegionalizationServiceBindingQSService", "RegionalizationServiceBindingQSPort", _Имя+"RegionalizationService"+_суф);
		
	Иначе
		
		_имя = "http://api.vetrf.ru/schema/platform/";
		
		Если _Тестовый Тогда
			_суф = "_v1.4_pilot.wsdl";
		Иначе
			_суф = "_v1.3_production.wsdl";
		КонецЕсли;
		
		//для совместиовсти с 2.0
		WSDLДобавить(_таблица, Перечисления.ВетисСервис.amsMercuryService, "http://api.vetrf.ru/schema/cdm/application/service", "ApplicationManagementServiceBindingQSService", "ApplicationManagementServiceBindingQSPort", _Имя+"services/ApplicationManagementService"+_суф, Истина);
		
		WSDLДобавить(_таблица, Перечисления.ВетисСервис.ApplicationManagementService, "http://api.vetrf.ru/schema/cdm/application/service", "ApplicationManagementServiceBindingQSService", "ApplicationManagementServiceBindingQSPort", _Имя+"services/ApplicationManagementService"+_суф);
		
		WSDLДобавить(_таблица, Перечисления.ВетисСервис.DictionaryService, "http://api.vetrf.ru/schema/cdm/registry/service", "DictionaryServiceBindingQSService", "DictionaryServiceBindingQSPort", _Имя+"services/DictionaryService"+_суф);
		WSDLДобавить(_таблица, Перечисления.ВетисСервис.EnterpriseService, "http://api.vetrf.ru/schema/cdm/registry/service", "EnterpriseServiceBindingQSService", "EnterpriseServiceBindingQSPort", _Имя+"cerberus/services/EnterpriseService"+_суф);
		WSDLДобавить(_таблица, Перечисления.ВетисСервис.IkarService,       "http://api.vetrf.ru/schema/cdm/registry/service", "IkarServiceBindingQSService",       "IkarServiceBindingQSPort",       _Имя+"ikar/services/IkarService"+_суф);
		WSDLДобавить(_таблица, Перечисления.ВетисСервис.ProductService,    "http://api.vetrf.ru/schema/cdm/registry/service", "ProductServiceBindingQSService",    "ProductServiceBindingQSPort",    _Имя+"services/ProductService"+_суф);
	КонецЕсли;
	
	Возврат _таблица;
	
КонецФункции

Процедура WSDLДобавить(пТаблица, пИмя, пURI, пСервис, пПорт, пURL, пОпределятьАдрес = Ложь)
	
	Если пТаблица = Неопределено Тогда
		пТаблица = Новый ТаблицаЗначений;
		//пТаблица.Колонки.Добавить("Версия");
		пТаблица.Колонки.Добавить("Имя");
		пТаблица.Колонки.Добавить("URI");
		пТаблица.Колонки.Добавить("Сервис");
		пТаблица.Колонки.Добавить("Порт");
		пТаблица.Колонки.Добавить("URL");
		пТаблица.Колонки.Добавить("Адрес");
		пТаблица.Колонки.Добавить("Составные");
	КонецЕсли;
	
	_строка = пТаблица.Добавить();
	//_строка.Версия = пВерсия;
	_строка.Имя    = пИмя;
	_строка.URI    = пURI;
	_строка.Сервис = пСервис;
	_строка.Порт   = пПорт;
	_строка.URL    = пURL;
	
	Если пОпределятьАдрес = Истина Тогда
		_определения = ВетисПовтИсп.ОпределенияПоURL(_строка.URL);
		_сервис = ПолучитьЭлементКоллекции(_Определения.Сервисы, _строка.Сервис);
		Если НЕ _сервис = Неопределено Тогда
			_точка = ПолучитьЭлементКоллекции(_сервис.ТочкиПодключения, _строка.Порт);
			Если НЕ _точка = Неопределено Тогда
				_строка.Адрес     = _точка.Местоположение;
				_строка.Составные = РазложитьАдрес(_точка.Местоположение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция WSDLПолучить(пИмяСервиса, пОпределятьАдрес = Ложь) Экспорт
	
	_таблица = ПолучитьТаблицуWSDL();
	
	_строка = _таблица.Найти(пИмяСервиса, "Имя");
	
	Если пОпределятьАдрес = Истина И ПустаяСтрока(_строка.Адрес) Тогда
		_определения = ВетисПовтИсп.ОпределенияПоURL(_строка.URL);
		_сервис = ПолучитьЭлементКоллекции(_Определения.Сервисы, _строка.Сервис);
		Если НЕ _сервис = Неопределено Тогда
			_точка = ПолучитьЭлементКоллекции(_сервис.ТочкиПодключения, _строка.Порт);
			Если НЕ _точка = Неопределено Тогда
				_строка.Адрес     = _точка.Местоположение;
				_строка.Составные = РазложитьАдрес(_точка.Местоположение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат _строка;
	
КонецФункции

Функция WSDLПолучитьURL() Экспорт
	
	_таблица = ПолучитьТаблицуWSDL();
	
	_список = Новый Массив;
	
	Для каждого _строка Из _таблица Цикл
		_список.Добавить(_строка.url);
	КонецЦикла;
	
	Возврат _список;
	
КонецФункции

Функция ПолучитьЭлементКоллекции(пКоллекция, пИмя)
	
	Для каждого _Элемент Из пКоллекция Цикл
		Если _Элемент.Имя = пИмя Тогда
			Возврат _Элемент;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция РазложитьАдрес(пСтрока)
	
	_результат = Новый Структура;
	
	_строка = пСтрока;
	
	_позиция = Найти(_строка, "://");
	
	_результат.Вставить("ЗащищенноеСоединение", ?(ВРег(Лев(_строка, _позиция - 1)) = "HTTPS", Новый ЗащищенноеСоединениеOpenSSL, Неопределено));
	
	_строка = Сред(_строка, _позиция + 3);
	
	_позиция = Найти(_строка, "/");
	
	_результат.Вставить("Ресурс", Сред(_строка, _позиция + 1));
	
	_строка = Лев(_строка, _позиция - 1);
	
	_позиция = Найти(_строка, ":");
	
	Если _позиция = 0 Тогда
		_результат.Вставить("Сервер", _строка);
		_результат.Вставить("Порт", Неопределено);
	Иначе
		_результат.Вставить("Сервер", Лев(_строка, _позиция - 1));
		_результат.Вставить("Порт", Число(Сред(_строка, _позиция + 1)));
	КонецЕсли;
	
	Возврат _результат;
	
КонецФункции

#КонецОбласти

#Область XSD

Функция ПолучитьТаблицуXSD(пТестовый = Неопределено, пСервис = Неопределено)
	
	_таблица = Неопределено;
	
	_Тестовый = ?(пТестовый = Неопределено, Ветис.Настройки_Тестовый(), пТестовый);
	
	_Сервис = ?(пСервис = Неопределено, Ветис.Настройки_ЦелевойСервис(), пСервис);
	
	Если Ветис.Версия_2_0() Тогда
		Если _Тестовый Тогда
			_имя = "http://api.vetrf.ru/schema/platform/services/2.0-RC-last/";
			_суф = "_v2.0.xsd";
		Иначе
			_имя = "http://api.vetrf.ru/schema/platform/services/2.0-last/";
			_суф = "_v2.0.xsd";
		КонецЕсли;
		
		XSDДобавить(_таблица, _Имя+"application_v1.1.xsd",          ВетисApplication_2_0.URI());
		XSDДобавить(_таблица, _Имя+"base_v1.1.xsd",                 ВетисBase_2_0.URI());
		XSDДобавить(_таблица, _Имя+"dictionary"+_суф,               ВетисDictionary_2_0.URI());
		XSDДобавить(_таблица, _Имя+"document"+_суф,                 ВетисMercuryVetdocument_2_0.URI());
		//XSDДобавить(_таблица, _Имя+"registry_ws_definitions"+_суф,  ВетисRegistry_2_0.ServiceURI());
		
		Если _Сервис = Перечисления.ВетисЦелевойСервис.mercury_vu_service Тогда
			XSDДобавить(_таблица, _Имя+"mercury_vu_applications"+_суф, ВетисMercuryApplications_2_0.URI());
		Иначе
			XSDДобавить(_таблица, _Имя+"mercury_g2b_applications"+_суф, ВетисMercuryApplications_2_0.URI());
		КонецЕсли;
		
	Иначе
		
		_имя = "http://api.vetrf.ru/schema/platform/mercury/g2b/";
		_суф = "_v1.4.xsd";
		
		XSDДобавить(_таблица, _Имя+"application"+_суф,         ВетисApplication.URI());
		XSDДобавить(_таблица, _Имя+"argus_common"+_суф,        ВетисArgusCommon.URI());
		XSDДобавить(_таблица, _Имя+"production"+_суф,          ВетисArgusProduction.URI());
		XSDДобавить(_таблица, _Имя+"argus_shipment"+_суф,      ВетисArgusShipment.URI());
		XSDДобавить(_таблица, _Имя+"base"+_суф,                ВетисBase.URI());
		XSDДобавить(_таблица, _Имя+"enterprise"+_суф,          ВетисCerberusEnterprise.URI());
		XSDДобавить(_таблица, _Имя+"ikar"+_суф,                ВетисIkar.URI());
		XSDДобавить(_таблица, _Имя+"applications"+_суф,        ВетисMercuryApplications.URI());
		XSDДобавить(_таблица, _Имя+"veterinary_document"+_суф, ВетисMercuryVetdocument.URI());
	КонецЕсли;
	
	Возврат _таблица;
	
КонецФункции

Процедура XSDДобавить(пТаблица, URL, URI)
	
	Если пТаблица = Неопределено Тогда
		пТаблица = Новый ТаблицаЗначений;
		пТаблица.Колонки.Добавить("URI");
		пТаблица.Колонки.Добавить("URL");
	КонецЕсли;
	
	_строка = пТаблица.Добавить();
	_строка.URI    = URI;
	_строка.URL    = URL;
	
КонецПроцедуры

Функция XSDПолучитьURL() Экспорт
	
	_таблица = ПолучитьТаблицуXSD();
	
	_список = Новый Массив;
	
	Для каждого _строка Из _таблица Цикл
		_список.Добавить(_строка.url);
	КонецЦикла;
	
	Возврат _список;
	
КонецФункции

#КонецОбласти
