
Функция getProductItemByGuid(guid, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_ИмяСервиса = ВетисProductService.ИмяСервиса();
	_Фабрика = ВетисПовтИсп.ФабрикаRegistry(_ИмяСервиса);
	_request = Создать("getProductItemByGuidRequest", _Фабрика);
	_request.guid = guid;
	_response = Прокси(_ИмяСервиса, _request, пОтказ, пОшибка);
	
	Если НЕ пОтказ = Истина Тогда
		Возврат ПривестиКТипу(_response, "getProductItemByGuidResponse", "productItem", _Фабрика);
	КонецЕсли;
	
КонецФункции


Функция getBusinessEntityByGuid(guid, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_ИмяСервиса = ВетисEnterpriseService.ИмяСервиса();
	_Фабрика = ВетисПовтИсп.ФабрикаRegistry(_ИмяСервиса);
	_request = Создать("getBusinessEntityByGuidRequest", _Фабрика);
	_request.guid = guid;
	_response = Прокси(_ИмяСервиса, _request, пОтказ, пОшибка);
	
	Если НЕ пОтказ = Истина Тогда
		Возврат ПривестиКТипу(_response, "getBusinessEntityByGuidResponse", "businessEntity", _Фабрика);
	КонецЕсли;
	
КонецФункции

Функция getBusinessEntityListNext(filter = Неопределено, пItem, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если пПараметры = Неопределено ИЛИ НЕ пПараметры.Свойство("Индекс") Тогда
		пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
		_ИмяСервиса = ВетисEnterpriseService.ИмяСервиса();
		_Фабрика = ВетисПовтИсп.ФабрикаRegistry(_ИмяСервиса);
		_request = Создать("getBusinessEntityListRequest", _Фабрика);
		_request.listOptions = ListOptions(_Фабрика);
		Если НЕ filter = Неопределено Тогда
			_request.businessEntity = ВетисОбщегоНазначения.Создать("BusinessEntity", ВетисDictionary.URI(), _Фабрика);
			ВетисОбщегоНазначения.УстановитьЗначение(_request.businessEntity, filter);
		КонецЕсли;
		GetListInit(_ИмяСервиса, _Фабрика, _request, "getBusinessEntityListResponse", "businessEntityList", "businessEntity", , пПараметры);
	КонецЕсли;
	
	Возврат GetListNext(пItem, пПараметры, пОтказ, пОшибка);
	
КонецФункции

Функция getEnterpriseByGuid(guid, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_ИмяСервиса = ВетисEnterpriseService.ИмяСервиса();
	_Фабрика = ВетисПовтИсп.ФабрикаRegistry(_ИмяСервиса);
	_request = Создать("getEnterpriseByGuidRequest", _Фабрика);
	_request.guid = guid;
	_response = Прокси(_ИмяСервиса, _request, пОтказ, пОшибка);
	Если НЕ пОтказ = Истина Тогда
		Возврат ПривестиКТипу(_response, "getEnterpriseByGuidResponse", "enterprise", _Фабрика);
	КонецЕсли;
	
КонецФункции

Функция getRussianEnterpriseListNext(filter = Неопределено, пItem, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если пПараметры = Неопределено ИЛИ НЕ пПараметры.Свойство("Индекс") Тогда
		пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
		_ИмяСервиса = ВетисEnterpriseService.ИмяСервиса();
		_Фабрика = ВетисПовтИсп.ФабрикаRegistry(_ИмяСервиса);
		_request = Создать("getRussianEnterpriseListRequest", _Фабрика);
		_request.listOptions = ListOptions(_Фабрика);
		Если НЕ filter = Неопределено Тогда
			_request.enterprise = ВетисОбщегоНазначения.Создать("Enterprise", ВетисDictionary.URI(), _Фабрика);
			ВетисОбщегоНазначения.УстановитьЗначение(_request.enterprise, filter);
		КонецЕсли;
		GetListInit(_ИмяСервиса, _Фабрика, _request, "getRussianEnterpriseListResponse", "enterpriseList", "enterprise", , пПараметры);
	КонецЕсли;
	
	Возврат GetListNext(пItem, пПараметры, пОтказ, пОшибка);
	
КонецФункции

Функция getRussianEnterpriseChangesListNext(beginDate, endDate = Неопределено, пItem, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если пПараметры = Неопределено ИЛИ НЕ пПараметры.Свойство("Индекс") Тогда
		пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
		_ИмяСервиса = ВетисEnterpriseService.ИмяСервиса();
		_Фабрика = ВетисПовтИсп.ФабрикаRegistry(_ИмяСервиса);
		_request = Создать("getRussianEnterpriseChangesListRequest", _Фабрика);
		_request.listOptions = ListOptions(_Фабрика);
		//_request.updateDateInterval = ВетисBase.DateInterval(beginDate, endDate);
		_request.updateDateInterval = ВетисОбщегоНазначения.Создать("DateInterval", ВетисDictionary.URI(), _Фабрика);
		_request.updateDateInterval.beginDate = beginDate;
		_request.updateDateInterval.endDate = endDate;
		GetListInit(_ИмяСервиса, _Фабрика, _request, "getRussianEnterpriseChangesListResponse", "enterpriseList", "enterprise", , пПараметры);
	КонецЕсли;
	
	Возврат GetListNext(пItem, пПараметры, пОтказ, пОшибка);
	
КонецФункции

Функция getActivityLocationListNext(businessEntityGuid, пItem, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если пПараметры = Неопределено ИЛИ НЕ пПараметры.Свойство("Индекс") Тогда
		пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
		_ИмяСервиса = ВетисEnterpriseService.ИмяСервиса();
		_Фабрика = ВетисПовтИсп.ФабрикаRegistry(_ИмяСервиса);
		_request = Создать("getActivityLocationListRequest", _Фабрика);
		_request.listOptions = ListOptions(_Фабрика);
		_request.BusinessEntity = ВетисОбщегоНазначения.Создать("BusinessEntity", ВетисDictionary.URI(), _Фабрика);
		_request.BusinessEntity.guid = businessEntityGuid;
		GetListInit(_ИмяСервиса, _Фабрика, _request, "getActivityLocationListResponse", "activityLocationList", "location", "enterprise", пПараметры);
	КонецЕсли;
	
	Возврат GetListNext(пItem, пПараметры, пОтказ, пОшибка);
	
КонецФункции


Функция getProductItemListNext(productType = Неопределено, product = Неопределено, subProduct = Неопределено, businessEntity = Неопределено, enterprise = Неопределено, пItem, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если пПараметры = Неопределено ИЛИ НЕ пПараметры.Свойство("Индекс") Тогда
		пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
		_ИмяСервиса = ВетисProductService.ИмяСервиса();
		_Фабрика = ВетисПовтИсп.ФабрикаRegistry(_ИмяСервиса);
		
		_request = Создать("getProductItemListRequest", _Фабрика);
		
		_request.listOptions = ListOptions(_Фабрика, ?(пПараметры.Свойство("count"), пПараметры.count, Неопределено), ?(пПараметры.Свойство("offset"), пПараметры.offset, Неопределено));
		
		Если НЕ productType = Неопределено Тогда
			_request.productType = productType;
		КонецЕсли;
		
		Если НЕ product = Неопределено Тогда
			_request.product = ВетисОбщегоНазначения.Создать("Product", ВетисDictionary.URI(), _Фабрика);
			ВетисОбщегоНазначения.ЗаполнитьЗначенияСвойствXDTO(_request.product, product);
		КонецЕсли;
		
		Если НЕ subProduct = Неопределено Тогда
			_request.subProduct = ВетисОбщегоНазначения.Создать("SubProduct", ВетисDictionary.URI(), _Фабрика);
			ВетисОбщегоНазначения.ЗаполнитьЗначенияСвойствXDTO(_request.subProduct, subProduct);
		КонецЕсли;
		
		Если НЕ enterprise = Неопределено Тогда
			_request.enterprise = ВетисОбщегоНазначения.Создать("Enterprise", ВетисDictionary.URI(), _Фабрика);
			ВетисОбщегоНазначения.ЗаполнитьЗначенияСвойствXDTO(_request.enterprise, enterprise);
		КонецЕсли;
		
		Если НЕ businessEntity = Неопределено Тогда
			_request.businessEntity = ВетисОбщегоНазначения.Создать("BusinessEntity", ВетисDictionary.URI(), _Фабрика);
			ВетисОбщегоНазначения.ЗаполнитьЗначенияСвойствXDTO(_request.businessEntity, businessEntity);
		КонецЕсли;
		
		GetListInit(_ИмяСервиса, _Фабрика, _request, "getProductItemListResponse", "productItemList", "productItem", , пПараметры);
	КонецЕсли;
	
	Возврат GetListNext(пItem, пПараметры, пОтказ, пОшибка);
	
КонецФункции

Функция getProductItemChangesListNext(businessEntity = Неопределено, enterprise = Неопределено, beginDate = Неопределено, endDate = Неопределено, пItem, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если пПараметры = Неопределено ИЛИ НЕ пПараметры.Свойство("Индекс") Тогда
		пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
		_ИмяСервиса = ВетисProductService.ИмяСервиса();
		_Фабрика = ВетисПовтИсп.ФабрикаRegistry(_ИмяСервиса);
		
		_request = Создать("getProductItemChangesListRequest", _Фабрика);
		
		_request.listOptions = ListOptions(_Фабрика, ?(пПараметры.Свойство("count"), пПараметры.count, Неопределено), ?(пПараметры.Свойство("offset"), пПараметры.offset, Неопределено));
		
		_request.updateDateInterval = DateInterval(_Фабрика, beginDate, endDate);
		
		Если НЕ enterprise = Неопределено Тогда
			_request.enterprise = ВетисОбщегоНазначения.Создать("Enterprise", ВетисDictionary.URI(), _Фабрика);
			ВетисОбщегоНазначения.ЗаполнитьЗначенияСвойствXDTO(_request.enterprise, enterprise);
		КонецЕсли;
		
		Если НЕ businessEntity = Неопределено Тогда
			_request.businessEntity = ВетисОбщегоНазначения.Создать("BusinessEntity", ВетисDictionary.URI(), _Фабрика);
			ВетисОбщегоНазначения.ЗаполнитьЗначенияСвойствXDTO(_request.businessEntity, businessEntity);
		КонецЕсли;
		
		GetListInit(_ИмяСервиса, _Фабрика, _request, "getProductItemChangesListResponse", "productItemList", "productItem", , пПараметры);
	КонецЕсли;
	
	Возврат GetListNext(пItem, пПараметры, пОтказ, пОшибка);
	
КонецФункции


Функция getR13nConditionListNext(пЗаболевание = Неопределено, пУсловие, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если пПараметры = Неопределено ИЛИ НЕ пПараметры.Свойство("Индекс") Тогда
		пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
		_ИмяСервиса = ВетисRegionalizationService.ИмяСервиса();
		_Фабрика = ВетисПовтИсп.ФабрикаRegistry(_ИмяСервиса);
		_request = Создать("getR13nConditionListRequest", _Фабрика);
		_request.listOptions = ListOptions(_Фабрика);
		_request.disease = ВетисDictionary.AnimalDisease(пЗаболевание);
		GetListInit(_ИмяСервиса, _Фабрика, _request, "getR13nConditionListResponse", "r13nConditionList", "condition", "", пПараметры);
	КонецЕсли;
	
	Возврат GetListNext(пУсловие, пПараметры, пОтказ, пОшибка);
	
КонецФункции


Функция GetListNext(пItem, пПараметры, пОтказ = Ложь, пОшибка = "")
	
	Если НЕ пПараметры.Свойство("ListResponse") Тогда
		//
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListRequest.ListOptions.offset + пПараметры.ListRequest.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListRequest.ListOptions.offset = пПараметры.ListRequest.ListOptions.offset + пПараметры.ListRequest.ListOptions.count;
				пПараметры.Индекс = 0;
				пПараметры.Вставить("offset", пПараметры.ListRequest.ListOptions.offset);
			КонецЕсли;
		Иначе
			пItem = Вычислить(пПараметры.СтрокаПолученияЭлементаКоллекции);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	_ListResponse = Прокси(пПараметры.ИмяСервиса, пПараметры.ListRequest, пОтказ, пОшибка);
	
	Если пОтказ = Истина Тогда
		Возврат Ложь;
	Иначе
		пПараметры.Вставить("ListResponse", ПривестиКТипу(_ListResponse, пПараметры.ResponseИмя, пПараметры.ИмяСписка, пПараметры.Фабрика));
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Возврат Ложь;
		Иначе
			пItem = Вычислить(пПараметры.СтрокаПолученияЭлементаКоллекции);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция GetListInit(пИмяСервиса, пФабрика, пRequest, пResponseИмя, пИмяСписка, пИмяКоллекции, пИмяСвойства = "", пПараметры = Неопределено)
	
	пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
	пПараметры.Вставить("Индекс", 0);
	пПараметры.Вставить("ИмяСервиса", пИмяСервиса);
	пПараметры.Вставить("Фабрика", пФабрика);
	пПараметры.Вставить("ListRequest", пRequest);
	пПараметры.Вставить("ResponseИмя", пResponseИмя);
	пПараметры.Вставить("ИмяСписка", пИмяСписка);
	пПараметры.Вставить("ИмяКоллекции", пИмяКоллекции);
	пПараметры.Вставить("ИмяСвойства", пИмяСвойства);
	пПараметры.Вставить("СтрокаПолученияЭлементаКоллекции", "пПараметры.ListResponse."+пИмяКоллекции+"[пПараметры.Индекс]"+?(пИмяСвойства = "", "", "."+пИмяСвойства))
	
КонецФункции


Функция ListOptions(пФабрика, count = Неопределено, offset = Неопределено) Экспорт
	
	_Объект = ВетисОбщегоНазначения.Создать("ListOptions", ВетисBase.URI(), пФабрика);
	
	_Объект.count = ?(count = Неопределено, Ветис.Настройки_КоличествоОбъектовВСписке(), count);
	_Объект.offset = ?(offset = Неопределено, 0, offset);
	
	Возврат _Объект;
	
КонецФункции

Функция DateInterval(пФабрика, beginDate = Неопределено, endDate = Неопределено) Экспорт
	
	_Объект = ВетисОбщегоНазначения.Создать("DateInterval", ВетисBase.URI(), пФабрика);
	
	Если beginDate = Неопределено Тогда
		_Объект.beginDate = Дата(2000,1,1);
	Иначе
		_Объект.beginDate = beginDate;
	КонецЕсли;
	
	Если НЕ endDate = Неопределено Тогда
		_Объект.endDate = endDate;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция ПривестиКТипу(пResponse, пИмяОперации, пИмяСвойства, пФабрика) Экспорт
	
	Возврат ВетисОбщегоНазначения.ПривестиКТипу(пResponse[пИмяОперации], пИмяОперации, ServiceURI(), пФабрика)[пИмяСвойства];
	
КонецФункции

Функция Создать(пИмя, пФабрика = Неопределено) Экспорт
	
	Возврат ВетисОбщегоНазначения.Создать(пИмя, ServiceURI(), пФабрика);
	
КонецФункции

Функция ServiceURI() Экспорт
	
	Возврат "http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2";
	
КонецФункции

Функция Прокси(пИмяСервиса, пRequest, пОтказ, пОшибка)
	
	Возврат Ветис.ПроксиHttp(пИмяСервиса, пRequest, пОтказ, пОшибка);
	
КонецФункции
