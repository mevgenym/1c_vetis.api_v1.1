
Функция ОбработатьВходящийЗапрос(пЗапрос) Экспорт
	
	//ВетисОбщегоНазначения.Пауза(10);
	
	_Отказ = Ложь;
	
	_Обновление = Истина;
	
	_Сообщение = "";
	
	_Запрос = Десериализовать(пЗапрос.ПолучитьТелоКакСтроку());
	
	Если НЕ ТипЗнч(_Запрос) = Тип("ХранилищеЗначения") Тогда
		Возврат ОтветСервер("Неправильный формат запроса", Истина);
	КонецЕсли;
	
	_Запрос = _Запрос.Получить();
	
	//проверка запроса
	Если НЕ ТипЗнч(_Запрос) = Тип("Структура") Тогда
		Возврат ОтветСервер("Неправильный формат запроса", Истина);
	КонецЕсли;
	
	//обработчик
	_ответ = Новый Структура;
	//_Выгруженные = Неопределено;
	Если _Запрос.Свойство("BusinessEntity") И ТипЗнч(_Запрос.BusinessEntity) = Тип("Массив") Тогда
		_ответ.Вставить("BusinessEntity", Новый Массив);
		Для каждого _ЭлементЗапроса Из _Запрос.BusinessEntity Цикл
			
			_Отказ = Ложь; _Ошибка = "";
			Если _ЭлементЗапроса.Свойство("inn") И ЗначениеЗаполнено(_ЭлементЗапроса.inn) Тогда
				_список = Новый Массив;
				_ссылка = Справочники.ВетисBusinessEntity.НайтиПоРеквизиту("inn", _ЭлементЗапроса.inn);
				Если ЗначениеЗаполнено(_ссылка) Тогда
					_список.Добавить(ПолучитьСтруктуруОбъекта(_ссылка));
				Иначе
					_ОтветСервиса = ВетисEnterpriseService_2_0.GetBusinessEntityByINN(_ЭлементЗапроса.inn, _Отказ, _Ошибка);
					Если _Отказ = Истина Тогда
						Возврат ОтветСервер(_Ошибка, Истина);
					КонецЕсли;
					Для каждого _ОбъектСервиса Из _ОтветСервиса Цикл
						_список.Добавить(ПолучитьСтруктуруОбъекта(ВетисDictionaryСлой1с.BusinessEntity(_ОбъектСервиса)));
					КонецЦикла;
				КонецЕсли;
				_ответ.BusinessEntity.Добавить(Новый Структура("inn, Объекты", _ЭлементЗапроса.inn, _список));
				
			ИначеЕсли _ЭлементЗапроса.Свойство("guid") И ЗначениеЗаполнено(_ЭлементЗапроса.guid) Тогда
				_список = Новый Массив;
				_ссылка = ВетисDictionaryСлой1с.BusinessEntity(_ЭлементЗапроса.guid);
				_список.Добавить(ПолучитьСтруктуруОбъекта(_ссылка));
				_ответ.BusinessEntity.Добавить(Новый Структура("guid, Объекты", _ЭлементЗапроса.guid, _список));
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли _Запрос.Свойство("РеализацияТоваровУслуг") И ТипЗнч(_Запрос.РеализацияТоваровУслуг) = Тип("Массив") Тогда
		Для каждого _ЗапросОбъект Из _Запрос.РеализацияТоваровУслуг Цикл
			_Ссылка = ОбработатьСсылку(_ЗапросОбъект);
			//_ссылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(_ЗапросОбъект.ref));
			//_Объект = _ссылка.ПолучитьОбъект();
			//Если _Объект = Неопределено Тогда
			//	_Объект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			//КонецЕсли;
			//Для каждого _ЗапросОбъектСвойство Из _ЗапросОбъект Цикл
			//	Если ТипЗнч(_ЗапросОбъектСвойство.Значение) = Тип("Массив") Тогда
			//		//Для каждого  Из _ЗапросОбъектСвойство.Значение Цикл
			//		//	
			//		//КонецЦикла;
			//	Иначе
			//		_Объект[_ЗапросОбъектСвойство.Ключ] = _ЗапросОбъектСвойство.Значение;
			//	КонецЕсли;
			//КонецЦикла;
			
		КонецЦикла;
		
		
	ИначеЕсли _Запрос.Свойство("Enterprise") И ТипЗнч(_Запрос.Enterprise) = Тип("Массив") Тогда
		_ответ.Вставить("Enterprise", Новый Массив);
		Для каждого _ЭлементЗапроса Из _Запрос.Enterprise Цикл
			
			_Отказ = Ложь; _Ошибка = "";
			Если _ЭлементЗапроса.Свойство("businessEntityGuid") И ЗначениеЗаполнено(_ЭлементЗапроса.businessEntityGuid) Тогда
				_список = Новый Массив;
				_enterprise = Неопределено;
				_параметры = Неопределено;
				Пока ВетисEnterpriseService_2_0.GetActivityLocationListNext(_ЭлементЗапроса.businessEntityGuid, _enterprise, _параметры, _Отказ, _Ошибка) Цикл
					_список.Добавить(ПолучитьСтруктуруОбъекта(ВетисDictionaryСлой1с.Enterprise(_enterprise)));
				КонецЦикла;
				Если _Отказ = Истина Тогда
					Возврат ОтветСервер(_Ошибка, Истина);
				КонецЕсли;
				_ответ.Enterprise.Добавить(Новый Структура("businessEntityGuid, Объекты", _ЭлементЗапроса.businessEntityGuid, _список));
				
			ИначеЕсли _ЭлементЗапроса.Свойство("guid") И ЗначениеЗаполнено(_ЭлементЗапроса.guid) Тогда
				_список = Новый Массив;
				_ссылка = ВетисDictionaryСлой1с.Enterprise(_ЭлементЗапроса.guid);
				_список.Добавить(ПолучитьСтруктуруОбъекта(_ссылка));
				_ответ.Enterprise.Добавить(Новый Структура("guid, Объекты", _ЭлементЗапроса.guid, _список));
				
			Иначе
				_отбор = ВетисDictionary_2_0.Enterprise();
				Если _ЭлементЗапроса.Свойство("name") И ЗначениеЗаполнено(_ЭлементЗапроса.name) Тогда
					_отбор.name = _ЭлементЗапроса.name;
				КонецЕсли;
				Если _ЭлементЗапроса.Свойство("number") И ЗначениеЗаполнено(_ЭлементЗапроса.number) Тогда
					_отбор.numberList = ВетисDictionary_2_0.EnterpriseNumberList();
					_отбор.numberList.enterpriseNumber.Добавить(_ЭлементЗапроса.number);
				КонецЕсли;
				Если _ЭлементЗапроса.Свойство("country") И ЗначениеЗаполнено(_ЭлементЗапроса.country) Тогда
					_отбор.address = ВетисDictionary_2_0.Address();
					_отбор.address.country = ВетисDictionary_2_0.Country(_ЭлементЗапроса.country);
					Если _ЭлементЗапроса.Свойство("region") И ЗначениеЗаполнено(_ЭлементЗапроса.region) Тогда
						_отбор.address.region = ВетисDictionary_2_0.Region(_ЭлементЗапроса.region);
					КонецЕсли;
				КонецЕсли;
				_список = Новый Массив;
				_enterprise = Неопределено;
				_параметры = Неопределено;
				_макс = 1000;
				Пока ВетисEnterpriseService_2_0.GetRussianEnterpriseListNext(_отбор, _enterprise, _параметры) Цикл
					_список.Добавить(ПолучитьСтруктуруОбъекта(ВетисDictionaryСлой1с.Enterprise(_enterprise)));
					_макс = _макс - 1;
					Если _макс <= 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				_ответ.Enterprise.Добавить(Новый Структура("Объекты", _список));
				
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли _Запрос.Свойство("Country") Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	_Таблица.Наименование КАК name,
		|	_Таблица.guid
		|ИЗ
		|	Справочник.ВетисCountry КАК _Таблица
		|ГДЕ
		|	ИСТИНА
		|	И НЕ _Таблица.ПометкаУдаления
		|//1	И _Таблица.Наименование подобно ""%<имя>%""
		|	И ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование");
		
		Если ЗначениеЗаполнено(_Запрос.Country) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//1", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "<имя>", _Запрос.Country);
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		_ответ.Вставить("Country", Новый Массив);
		
		Пока Выборка.Следующий() Цикл
			_ответ.Country.Добавить(Новый Структура("name,guid", Выборка.name, Выборка.guid));
		КонецЦикла;
		
	ИначеЕсли _Запрос.Свойство("Region") Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	_Таблица.Наименование КАК name,
		|	_Таблица.guid,
		|	_Таблица.Country.Наименование КАК CountryName,
		|	_Таблица.Country.guid КАК CountryGuid
		|ИЗ
		|	Справочник.ВетисRegion КАК _Таблица
		|ГДЕ
		|	ИСТИНА
		|	И НЕ _Таблица.ПометкаУдаления
		|//1	И _Таблица.Наименование подобно ""%<имя>%""
		|	И ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование");
		
		Если ЗначениеЗаполнено(_Запрос.Region) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//1", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "<имя>", _Запрос.Region);
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		_ответ.Вставить("Region", Новый Массив);
		
		Пока Выборка.Следующий() Цикл
			_Объект = Новый Структура;
			_Объект.Вставить("name", Выборка.name);
			_Объект.Вставить("guid", Выборка.guid);
			_Объект.Вставить("Country", Новый Структура("name,guid", Выборка.CountryName, Выборка.CountryGuid));
			_ответ.Region.Добавить(_Объект);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОтветСервер(_Сообщение, ,, _ответ);
	
КонецФункции


Функция ОтветСервер(пСообщение, пОтказ = Ложь, пГотово = Ложь, пОтвет = Неопределено)
	
	_Ответ = Новый Структура("Готово,Отказ,Сообщение,Ответ", пГотово, пОтказ, пСообщение, пОтвет);
	
	_Ответ = Новый ХранилищеЗначения(_Ответ, Новый СжатиеДанных(9));
	
	Возврат Сериализовать(_Ответ);
	
КонецФункции


Функция Сериализовать(пОбъект) Экспорт
	
	_ЗаписьXML = Новый ЗаписьXML;
	_ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЗаписатьXML(_ЗаписьXML, пОбъект);
	
	Возврат _ЗаписьXML.Закрыть();
	
КонецФункции

Функция Десериализовать(пТекст) Экспорт
	
	_Чтение = Новый ЧтениеXML;
	
	_Чтение.УстановитьСтроку(пТекст);
	
	_Результат = ПрочитатьXML(_Чтение);
	
	_Чтение.Закрыть();
	
	Возврат _Результат;
	
КонецФункции

Функция ПолучитьСтруктуруОбъекта(пОбъект, пВыгруженные = Неопределено, пПодробно = Истина, пПодробноПоСсылке = Истина)
	
	Возврат ВетисОбщегоНазначения.ПолучитьСтруктуруОбъектаДляОбмена(пОбъект, пВыгруженные, пПодробно, пПодробноПоСсылке)
	
КонецФункции


Функция ОбработатьСсылку(пОбъект, пОшибка = "", пОбновление = Ложь, пОбменДаннымиЗагрузка = Истина, пУдаление = Ложь) Экспорт
	
	Если НЕ ТипЗнч(пОбъект) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	_Ссылка = Неопределено;
	
	Если НЕ пОбъект.Свойство("Тип") Тогда
		пОшибка = "Некорректные входные данные 1";
		Возврат Неопределено;
	ИначеЕсли пОбъект.Тип = "УдалениеОбъекта" Тогда
		Возврат ОбработатьСсылку(пОбъект.Объект, пОшибка, пОбновление, пОбменДаннымиЗагрузка, Истина);
	КонецЕсли;
	
	_менеджер = МенеджерПоИмени(пОбъект.Тип, пОшибка);
	
	Если НЕ пОшибка = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если _менеджер.Тип = Документы Тогда
		_Ссылка = ЗаполнитьДокумент(_менеджер.менеджер, пОбъект, пОшибка, пОбновление, пОбменДаннымиЗагрузка, пУдаление);
	ИначеЕсли _менеджер.Тип = Справочники Тогда
		_Ссылка = ЗаполнитьСправочник(_менеджер.менеджер, пОбъект, пОшибка, пОбновление, пОбменДаннымиЗагрузка, пУдаление);
	ИначеЕсли _менеджер.Тип = Перечисления Тогда
		Если НЕ пОбъект.Свойство("Имя") Тогда
			пОшибка = "Некорректные входные данные 2";
			Возврат Неопределено;
		ИначеЕсли пОбъект.Имя = "" Тогда
			_Ссылка = _менеджер.менеджер.ПустаяСсылка();
		Иначе
			_Ссылка = _менеджер.менеджер[пОбъект.Имя];
		КонецЕсли;
	ИначеЕсли _менеджер.Тип = РегистрыСведений Тогда
		_Ссылка = ЗаполнитьРегистрСведений(_менеджер, пОбъект, пОшибка, пОбновление, пОбменДаннымиЗагрузка, пУдаление);
	ИначеЕсли _менеджер.Тип = РегистрыНакопления Тогда
		_Ссылка = ЗаполнитьРегистрНакопления(_менеджер, пОбъект, пОшибка, пОбновление, пОбменДаннымиЗагрузка, пУдаление);
	КонецЕсли;
	
	Возврат _Ссылка;
	
КонецФункции

Функция ЗаполнитьСправочник(пМенеджер, пОбъект, пОшибка = "", пОбновление = Ложь, пОбменДаннымиЗагрузка = Истина, пУдаление = Ложь)
	
	_менеджер = пМенеджер;
	
	Если НЕ пОбъект.Свойство("ref") Тогда
		Возврат _менеджер.ПустаяСсылка();
	КонецЕсли;
	
	Если пОбъект.ref = "00000000-0000-0000-0000-000000000000" Тогда
		Возврат _менеджер.ПустаяСсылка();
	КонецЕсли;
	
	_ref = Новый УникальныйИдентификатор(пОбъект.ref);
	
	_Ссылка = _менеджер.ПолучитьСсылку(_ref);
	
	_Объект = _Ссылка.ПолучитьОбъект();
	
	//если количество больше 2, считаем что объект передан полностью и возможно его обновление
	_Обновление = _Объект = Неопределено ИЛИ пОбновление = Истина И пОбъект.Количество()>2;
	
	Если _Обновление И ПравоДоступа("Изменение",_менеджер.ПустаяСсылка().Метаданные()) Тогда
		Если _Объект = Неопределено Тогда
			_Объект = _менеджер.СоздатьЭлемент();
			_Объект.УстановитьСсылкуНового(_Ссылка);
		КонецЕсли;
		_Объект.ОбменДанными.Загрузка = пОбменДаннымиЗагрузка;
		УстановитьЗначение(_Объект, пОбъект, "Код");
		УстановитьЗначение(_Объект, пОбъект, "Наименование");
		УстановитьЗначение(_Объект, пОбъект, "ПометкаУдаления");
		Попытка
			_Объект.Записать();
		Исключение
			пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат _Ссылка;
	
КонецФункции

Функция ЗаполнитьДокумент(пМенеджер, пОбъект, пОшибка = "", пОбновление = Ложь, пОбменДаннымиЗагрузка = Истина, пУдаление = Ложь)
	
	//Если НЕ пОбъект.Свойство("ref") Тогда
	//	пОшибка = "Некорректные входные данные";
	//	Возврат Неопределено;
	//КонецЕсли;
	
	_менеджер = пМенеджер;
	
	Если НЕ пОбъект.Свойство("ref") Тогда
		//пОшибка = "Некорректные входные данные";
		//Возврат Неопределено;
		Возврат _менеджер.ПустаяСсылка();
	КонецЕсли;
	
	Если пОбъект.ref = "00000000-0000-0000-0000-000000000000" Тогда
		Возврат _менеджер.ПустаяСсылка();
	КонецЕсли;
	
	_ref = Новый УникальныйИдентификатор(пОбъект.ref);
	
	_Ссылка = _менеджер.ПолучитьСсылку(_ref);
	
	_Объект = _Ссылка.ПолучитьОбъект();
	
	//если количество больше 2, считаем что объект передан полностью и возможно его обновление
	_Обновление = _Объект = Неопределено ИЛИ пОбновление = Истина И пОбъект.Количество()>2;
	
	Если _Обновление И ПравоДоступа("Изменение",_менеджер.ПустаяСсылка().Метаданные()) Тогда
		Если _Объект = Неопределено Тогда
			_Объект = _менеджер.СоздатьДокумент();
			_Объект.УстановитьСсылкуНового(_Ссылка);
		КонецЕсли;
		_Объект.ОбменДанными.Загрузка = пОбменДаннымиЗагрузка;
		УстановитьЗначение(_Объект, пОбъект, "Дата");
		УстановитьЗначение(_Объект, пОбъект, "Номер");
		УстановитьЗначение(_Объект, пОбъект, "Проведен");
		УстановитьЗначение(_Объект, пОбъект, "ПометкаУдаления");
		
		
		Попытка
			_Объект.Записать();
		Исключение
			пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат _Ссылка;
	
КонецФункции

Функция ЗаполнитьРегистрСведений(пМенеджер, пОбъект, пОшибка = "", пОбновление = Ложь, пОбменДаннымиЗагрузка = Истина, пУдаление = Ложь)
	
	Если НЕ пОбъект.Свойство("Записи") Тогда
		пОшибка = "Некорректные входные данные 4";
		Возврат Неопределено;
	КонецЕсли;
	
	_менеджер = пМенеджер.менеджер;
	
	_Объект = _менеджер.СоздатьНаборЗаписей();
	
	_Обновление = пОбновление = Истина;
	
	Если _Обновление И ПравоДоступа("Изменение",пМенеджер.Метаданные) Тогда
		_Объект.ОбменДанными.Загрузка = пОбменДаннымиЗагрузка;
		
		Если Ложь Тогда
		//Если _менеджер = РегистрыСведений.КомплектацияКонтейнеровОстатки Тогда
		//	Для каждого _Запись Из пОбъект.Записи Цикл
		//		_ОбъектЗапись = _Объект.Добавить();
		//		Если _Запись.Свойство("Контейнер") Тогда
		//			_ОбъектЗапись.Контейнер = ОбработатьСсылку(_Запись.Контейнер, пОшибка, _Обновление);
		//			Если НЕ пОшибка = "" Тогда
		//				Возврат Неопределено;
		//			КонецЕсли;
		//		КонецЕсли;
		//		Если _Запись.Свойство("Коробка") Тогда
		//			_ОбъектЗапись.Коробка = ОбработатьСсылку(_Запись.Коробка, пОшибка, _Обновление);
		//			Если НЕ пОшибка = "" Тогда
		//				Возврат Неопределено;
		//			КонецЕсли;
		//		КонецЕсли;
		//		УстановитьЗначение(_ОбъектЗапись, _Запись, "Порядок");
		//		УстановитьЗначение(_ОбъектЗапись, _Запись, "Количество");
		//		УстановитьЗначение(_ОбъектЗапись, _Запись, "КоличествоМест");
		//	КонецЦикла;
		//ИначеЕсли _менеджер = РегистрыСведений.РазмещениеКонтейнеровОстатки Тогда
		//	Для каждого _Запись Из пОбъект.Записи Цикл
		//		_ОбъектЗапись = _Объект.Добавить();
		//		Если _Запись.Свойство("Размещение") Тогда
		//			_ОбъектЗапись.Размещение = ОбработатьСсылку(_Запись.Размещение, пОшибка, _Обновление);
		//			Если НЕ пОшибка = "" Тогда
		//				Возврат Неопределено;
		//			КонецЕсли;
		//		КонецЕсли;
		//		Если _Запись.Свойство("Контейнер") Тогда
		//			_ОбъектЗапись.Контейнер = ОбработатьСсылку(_Запись.Контейнер, пОшибка, _Обновление);
		//			Если НЕ пОшибка = "" Тогда
		//				Возврат Неопределено;
		//			КонецЕсли;
		//		КонецЕсли;
		//		УстановитьЗначение(_ОбъектЗапись, _Запись, "Порядок");
		//		УстановитьЗначение(_ОбъектЗапись, _Запись, "Количество");
		//		УстановитьЗначение(_ОбъектЗапись, _Запись, "КоличествоМест");
		//	КонецЦикла;
		Иначе
			//Возврат;
		КонецЕсли;
		
		Попытка
			_Объект.Записать();
		Исключение
			пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция ЗаполнитьРегистрНакопления(пМенеджер, пОбъект, пОшибка = "", пОбновление = Ложь, пОбменДаннымиЗагрузка = Истина, пУдаление = Ложь)
	
	#Если НЕ МобильноеПриложениеСервер Тогда
		Возврат Неопределено;
	#КонецЕсли
	
	Если НЕ пОбъект.Свойство("Записи") Тогда
		пОшибка = "Некорректные входные данные 4";
		Возврат Неопределено;
	КонецЕсли;
	
	_менеджер = пМенеджер.менеджер;
	
	_Объект = _менеджер.СоздатьНаборЗаписей();
	
	//_Обновление = пОбновление = Истина;
	//
	//Если _Обновление И ПравоДоступа("Изменение",пМенеджер.Метаданные) Тогда
	//	_Объект.ОбменДанными.Загрузка = пОбменДаннымиЗагрузка;
	//	
	//	Попытка
	//		_Объект.Записать();
	//	Исключение
	//		пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	//		Возврат Неопределено;
	//	КонецПопытки;
	//КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция МенеджерПоИмени(пИмя, пОшибка = "") Экспорт
	
	_Метаданные = Метаданные.НайтиПоПолномуИмени(пИмя);
	
	Если Метаданные.Справочники.Содержит(_Метаданные) Тогда
		_ТипМетаданных = Справочники;
		_менеджер = Справочники[_Метаданные.Имя];
	ИначеЕсли Метаданные.Документы.Содержит(_Метаданные) Тогда
		_ТипМетаданных = Документы;
		_менеджер = Документы[_Метаданные.Имя];
	ИначеЕсли Метаданные.Перечисления.Содержит(_Метаданные) Тогда
		_ТипМетаданных = Перечисления;
		_менеджер = Перечисления[_Метаданные.Имя];
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(_Метаданные) Тогда
		_ТипМетаданных = РегистрыСведений;
		_менеджер = РегистрыСведений[_Метаданные.Имя];
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(_Метаданные) Тогда
		_ТипМетаданных = РегистрыНакопления;
		_менеджер = РегистрыНакопления[_Метаданные.Имя];
	Иначе
		пОшибка = "Некорректные входные данные 3 " + пИмя;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("Менеджер, Тип, Метаданные", _менеджер, _ТипМетаданных, _метаданные);
	
КонецФункции

Процедура УстановитьЗначение(пПриемник, пИсточник, пИмяСвойства)
	
	Если пИсточник.Свойство(пИмяСвойства) Тогда
		_Источник = пИсточник[пИмяСвойства];
		Если ТипЗнч(_Источник) = Тип("Структура") Тогда
			Если _Источник.Свойство("Тип") Тогда
				Если _Источник.Тип = "Дата" Тогда
					_Источник = Дата(_Источник.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		пПриемник[пИмяСвойства] = _Источник;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеСсылки(пПриемник, пИсточник, пИмяСвойства, пОшибка, пОбновление)
	
	Если пИсточник.Свойство(пИмяСвойства) Тогда
		пПриемник[пИмяСвойства] = ОбработатьСсылку(пИсточник[пИмяСвойства], пОшибка, пОбновление);
	КонецЕсли;
	
КонецПроцедуры
