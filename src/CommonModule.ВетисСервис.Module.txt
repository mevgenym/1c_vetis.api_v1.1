
Функция Синхронизировать(пЗапрос) Экспорт
	
	//ВетисОбщегоНазначения.Пауза(10);
	
	_Отказ = Ложь;
	_Ответ = Новый Структура;
	_Ошибка = "";
	
	_Обновление = Истина;
	
	_Запрос = ВетисОбменДанными.Десериализовать(пЗапрос.ПолучитьТелоКакСтроку());
	
	Если НЕ ТипЗнч(_Запрос) = Тип("ХранилищеЗначения") Тогда
		Возврат ОтветСервер("Неправильный формат запроса", Истина);
	КонецЕсли;
	
	_Запрос = _Запрос.Получить();
	
	//проверка запроса
	Если НЕ ТипЗнч(_Запрос) = Тип("Структура") Тогда
		Возврат ОтветСервер("Неправильный формат запроса", Истина);
	КонецЕсли;
	
	Если _Запрос.Свойство("НомерПринятого") Тогда
		ПланыОбмена.ВетисКлиенты.УдалитьРегистрациюИзменений(_Запрос.НомерПринятого);
		ПланыОбмена.ВетисКлиенты.УстановитьНомерОтправленного(_Запрос.НомерПринятого);
	КонецЕсли;
	
	Если _Запрос.Свойство("Изменения") Тогда
		
		Для каждого _ОбъектСтруктура Из _Запрос.Изменения Цикл
			Если _ОбъектСтруктура.Тип = Метаданные.Документы.ВетисТранспортнаяПартия.ПолноеИмя() Тогда
				Если НЕ ОбработатьТранспортнаяПартия(_ОбъектСтруктура, _Ответ, _Ошибка) Тогда
					Возврат ОтветСервер(_Ошибка, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если _Запрос.Свойство("НомерОтправленного") Тогда
			ПланыОбмена.ВетисКлиенты.УстановитьНомерПринятого(_Запрос.НомерОтправленного);
		КонецЕсли;
		
		_НомерОтправленного = 0;
		_НомерПринятого = 0;
		
		_Ответ.Вставить("Изменения", ВыбратьИзменения(_НомерОтправленного, _НомерПринятого));
		
		_Ответ.Вставить("НомерОтправленного", _НомерОтправленного);
		_Ответ.Вставить("НомерПринятого",     _НомерПринятого);
	КонецЕсли;
	
	ОбработатьВходящийЗапрос(_Запрос, _ответ, _Ошибка);
	
	Возврат ОтветСервер(_Ошибка, НЕ ПустаяСтрока(_Ошибка),, _ответ);
	
КонецФункции

Функция ВыбратьИзменения(пНомерОтправленного, пНомерПринятого)
	
	_Узел = ПланыОбмена.ВетисКлиенты.ПолучитьУзел();
	
	пНомерОтправленного = _Узел.НомерОтправленного+1;
	пНомерПринятого     = _Узел.НомерПринятого;
	
	_объекты = Новый Массив;
	
	_Выборка = ПланыОбмена.ВыбратьИзменения(_Узел, пНомерОтправленного);
	
	_Выгруженные = Неопределено;
	Пока _Выборка.Следующий() Цикл
		
		_Данные = _Выборка.Получить();
		
		Если Ложь Тогда
		ИначеЕсли ТипЗнч(_Данные) = Тип("УдалениеОбъекта") Тогда
			Если Ложь Тогда
			ИначеЕсли _Данные.Ссылка.Метаданные() = Метаданные.Документы.ВетисТранспортнаяПартия Тогда
				_ДанныеСтруктура = ПолучитьСтруктуруТранспортнаяПартия(_Данные.Ссылка);
			Иначе
				_ДанныеСтруктура = ВетисОбменДанными.ПолучитьСтруктуруОбъекта(_Данные.Ссылка);
			КонецЕсли;
			_объекты.Добавить(Новый Структура("Тип,Объект", "УдалениеОбъекта", _ДанныеСтруктура));
		//ИначеЕсли _Данные.Метаданные() = Метаданные.Справочники.ВетисStockEntry Тогда
		//ИначеЕсли _Данные.Метаданные() = Метаданные.Документы.ВетисВетеринарноСопроводительныйДокумент Тогда
		ИначеЕсли _Данные.Метаданные() = Метаданные.Документы.ВетисТранспортнаяПартия Тогда
			_объекты.Добавить(ПолучитьСтруктуруТранспортнаяПартия(_Данные));
		Иначе
			_объекты.Добавить(ВетисОбменДанными.ПолучитьСтруктуруОбъекта(_Данные));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат _объекты;
	
КонецФункции


Функция ОбработатьВходящийЗапрос(пЗапрос, пОтвет, пОшибка) Экспорт
	
	//ВетисОбщегоНазначения.Пауза(10);
	
	//обработчик
	Для каждого _Блок Из пЗапрос Цикл
		_Имя = _Блок.Ключ;
		_Блок = _Блок.Значение;
		Если Ложь Тогда
			//
		ИначеЕсли _Имя = "ТранспортнаяПартия" Тогда
			Если ТипЗнч(_Блок) = Тип("Структура") Тогда
				пОтвет.Вставить("ТранспортнаяПартия", Новый Массив);
				Для каждого _ЗапросОбъект Из _Блок.Объекты Цикл
					Если НЕ (ТипЗнч(_ЗапросОбъект) = Тип("Структура"))
						ИЛИ НЕ _ЗапросОбъект.Свойство("ref")
						ИЛИ ПустаяСтрока(_ЗапросОбъект.ref)
						ИЛИ _ЗапросОбъект.ref = "00000000-0000-0000-0000-000000000000" Тогда
						Возврат ОтветСервер("Некорректные входные данные", Истина);
					КонецЕсли;
					_ОбъектСтруктура = ПолучитьСтруктуруТранспортнаяПартия(_ЗапросОбъект.ref);
					пОтвет.ТранспортнаяПартия.Добавить(_ОбъектСтруктура);
				КонецЦикла;
			Иначе
				Если ТипЗнч(_Блок) = Тип("Массив") Тогда
					Для каждого _ЗапросОбъект Из _Блок Цикл
						Если НЕ ОбработатьТранспортнаяПартия(_ЗапросОбъект, пОтвет, пОшибка) Тогда
							Возврат ОтветСервер(пОшибка, Истина);
						КонецЕсли;
					КонецЦикла;
				Иначе
					Если НЕ ОбработатьТранспортнаяПартия(_Блок, пОтвет, пОшибка) Тогда
						Возврат ОтветСервер(пОшибка, Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
	//		
	//	ИначеЕсли _Имя = "VetDocument" Тогда
	//		Если НЕ ОбработатьVetDocument(_Блок, пОтвет, пОшибка) Тогда
	//			Возврат ОтветСервер(пОшибка, Истина);
	//		КонецЕсли;
	//		
		ИначеЕсли _Имя = "StockEntry" Тогда
			Если НЕ ОбработатьStockEntry(_Блок, пОтвет, пОшибка) Тогда
				Возврат ОтветСервер(пОшибка, Истина);
			КонецЕсли;
		ИначеЕсли _Имя = "BusinessEntity" Тогда
			Если НЕ ОбработатьBusinessEntity(_Блок, пОтвет, пОшибка) Тогда
				Возврат ОтветСервер(пОшибка, Истина);
			КонецЕсли;
		ИначеЕсли _Имя = "Enterprise" Тогда
			Если НЕ ОбработатьEnterprise(_Блок, пОтвет, пОшибка) Тогда
				Возврат ОтветСервер(пОшибка, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ОбработатьТранспортнаяПартия(пОбъект, пОтвет, пОшибка)
	
	Если НЕ (ТипЗнч(пОбъект) = Тип("Структура")) Тогда
		пОшибка = "Некорректные входные данные";
		Возврат Ложь;
	КонецЕсли;
	
	_Ссылка = Неопределено;
	
	_менеджер = Документы.ВетисТранспортнаяПартия;
	
	Если НЕ пОбъект.Свойство("ref")
		ИЛИ ПустаяСтрока(пОбъект.ref)
		ИЛИ пОбъект.ref = "00000000-0000-0000-0000-000000000000" Тогда
		пОшибка = "Пустая ссылка";
		Возврат Ложь;
	КонецЕсли;
	
	_ref = Новый УникальныйИдентификатор(пОбъект.ref);
	
	_Ссылка = _менеджер.ПолучитьСсылку(_ref);
	
	_Объект = _Ссылка.ПолучитьОбъект();
	
	Если _Объект = Неопределено Тогда
		_Объект = _менеджер.СоздатьДокумент();
		_Объект.УстановитьСсылкуНового(_Ссылка);
		_Объект.Дата = ТекущаяДата();
		//_Объект.Ответственный = Ветис.ТекущийПользователь();
		
		_всд = _Объект.ВСД.Добавить();
		_всд.НазначениеГруза       = Ветис.Настройки_ВСД_НазначениеГруза();
		_всд.БлагополучиеМестности = Ветис.Настройки_ВСД_БлагополучиеМестности();
		_всд.Ветсанэкспертиза20    = Ветис.Настройки_ВСД_ВСЭ();
		_всд.КонтрольГосВетврачем  = Ветис.Настройки_ВСД_КонтрольГосВетврачем();
		
		_ттн = _Объект.ТТН.Добавить();
		_ттн.Дата      = ТекущаяДата();
		_ттн.Тип       = Перечисления.ВетисDocumentType.ТовароТранспортнаяНакладная;
		_ттн.Транспорт = Ветис.Настройки_ТТН_Транспорт();
		
		Если ЗначениеЗаполнено(_ттн.Транспорт) Тогда
			_ттн.ТипТранспорта  = _ттн.Транспорт.ТипТранспорта;
			_ттн.НомерТранспорта= _ттн.Транспорт.Номер;
			_ттн.НомерПрицепа   = _ттн.Транспорт.НомерПрицепа;
			_ттн.Посредник      = _ттн.Транспорт.Перевозчик;
			_ттн.СпособХранения = _ттн.Транспорт.СпособХранения;
		Иначе
			_ттн.ТипТранспорта  = Перечисления.ВетисTransportType.Автомобильный;
			_ттн.Посредник      = Ветис.Настройки_ТТН_Посредник();
			_ттн.СпособХранения = Ветис.Настройки_ТТН_СпособХранения();
		КонецЕсли;
		
	ИначеЕсли _Объект.СтатусТранзакции = Перечисления.ВетисСтатусТранзакции.Аннулирована Тогда
		Возврат Истина;
	ИначеЕсли _Объект.СтатусТранзакции = Перечисления.ВетисСтатусТранзакции.Отправлена Тогда
		Если пОбъект.Свойство("СтатусТранзакции") Тогда
			_СтатусТранзакции = ВетисОбменДанными.ОбработатьСсылку(пОбъект.СтатусТранзакции);
			Если _СтатусТранзакции = Перечисления.ВетисСтатусТранзакции.Аннулирована Тогда
				РегистрыСведений.ВетисОтложенныеОперации.Добавить(_Объект.Ссылка, Перечисления.ВетисОтложенныеОперации.Аннулировать);
				Возврат Истина;
			Иначе
				Возврат Истина;
			КонецЕсли;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	_Метаданные = _менеджер.ПустаяСсылка().Метаданные();
	
	ВетисОбменДанными.ЗаполнитьРеквизиты(_Метаданные.СтандартныеРеквизиты, _Объект, пОбъект, пОшибка, Ложь);
	
	ВетисОбменДанными.ЗаполнитьРеквизиты(_Метаданные.Реквизиты, _Объект, пОбъект, пОшибка, Ложь);
	
	_Объект.ДокументОснование = ВетисОбменДанными.ОбработатьСсылку(пОбъект.ДокументОснование, пОшибка, Истина);
	
	//ВетисОбменДанными.ЗаполнитьРеквизиты(_Метаданные.СтандартныеРеквизиты, _Объект, пОбъект, пОшибка);
	
	Если НЕ пОшибка = "" Тогда
		пОшибка = "Ошибка при заполнении реквизитов";
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(_Объект.ДокументОснование) Тогда
		пОшибка = "Не заполнен документ основание";
		Возврат Ложь;
	КонецЕсли;
	
	Если пОбъект.Свойство("ТТН") Тогда
		_ттн = ?(_Объект.ТТН.Количество() = 0, _Объект.ТТН.Добавить(), _Объект.ТТН.Получить(0));
		пОбъект.ТТН.Свойство("Дата", _ттн.Дата);
		пОбъект.ТТН.Свойство("Номер", _ттн.Номер);
		пОбъект.ТТН.Свойство("НомерТранспорта", _ттн.НомерТранспорта);
	КонецЕсли;
	
	_Объект.Партии.Очистить();
	Для каждого _ПартииСтрока Из пОбъект.Партии Цикл
		
		_StockEntry = ВетисОбменДанными.ОбработатьСсылку(_ПартииСтрока.StockEntry, , Ложь);
		
		_ТЧСтрока = _Объект.Партии.Добавить();
		_список = _Объект.Партии.Выгрузить().ВыгрузитьКолонку("КлючСтроки");
		Для _Индекс = 1 По 999 Цикл
			Если _список.Найти(_Индекс) = Неопределено Тогда
				_ТЧСтрока.КлючСтроки = _Индекс;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		_ТЧСтрока.StockEntry = _StockEntry;
		
		_ТЧСтрока.unit = _StockEntry.unit;
		
		_ТЧСтрока.producer = _StockEntry.producer;
		
		_ТЧСтрока.Количество = _ПартииСтрока.Количество;
		
		_ТЧСтрока.ProductItemName = _ПартииСтрока.Наименование;
		
	КонецЦикла;
	
	//_Объект.ОбменДанными.Загрузка = Истина;
	_Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	
	_Объект.ПометкаУдаления = пОбъект.ПометкаУдаления;
	
	_Объект.Проведен = пОбъект.Проведен;
	
	Попытка
		_Объект.Записать();
	Исключение
		пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	
	РегистрыСведений.ВетисОтложенныеОперации.Добавить(_Объект.Ссылка);
	
	Возврат Истина;
	
КонецФункции

Функция ОбработатьBusinessEntity(пПараметры, пОтвет, пОшибка)
	
	Если НЕ ТипЗнч(пПараметры) = Тип("Массив") Тогда
		пОшибка = "Некорректные входные данные";
		Возврат Ложь;
	КонецЕсли;
	
	пОтвет.Вставить("BusinessEntity", Новый Массив);
	Для каждого _ЭлементЗапроса Из пПараметры Цикл
		
		_Отказ = Ложь;
		Если _ЭлементЗапроса.Свойство("inn") И ЗначениеЗаполнено(_ЭлементЗапроса.inn) Тогда
			_список = Новый Массив;
			_ссылка = Справочники.ВетисBusinessEntity.НайтиПоРеквизиту("inn", _ЭлементЗапроса.inn);
			Если ЗначениеЗаполнено(_ссылка) Тогда
				_список.Добавить(ВетисОбменДанными.ПолучитьСтруктуруОбъекта(_ссылка));
			Иначе
				_ОтветСервиса = ВетисEnterpriseService.GetBusinessEntityByINN(_ЭлементЗапроса.inn, _Отказ, пОшибка);
				Если _Отказ = Истина Тогда
					Возврат Ложь;
				КонецЕсли;
				Для каждого _ОбъектСервиса Из _ОтветСервиса Цикл
					_список.Добавить(ВетисОбменДанными.ПолучитьСтруктуруОбъекта(ВетисDictionaryСлой1с.BusinessEntity(_ОбъектСервиса)));
				КонецЦикла;
			КонецЕсли;
			пОтвет.BusinessEntity.Добавить(Новый Структура("inn, Объекты", _ЭлементЗапроса.inn, _список));
			
		ИначеЕсли _ЭлементЗапроса.Свойство("guid") И ЗначениеЗаполнено(_ЭлементЗапроса.guid) Тогда
			_список = Новый Массив;
			_ссылка = ВетисDictionaryСлой1с.BusinessEntity(_ЭлементЗапроса.guid);
			_список.Добавить(ВетисОбменДанными.ПолучитьСтруктуруОбъекта(_ссылка));
			пОтвет.BusinessEntity.Добавить(Новый Структура("guid, Объекты", _ЭлементЗапроса.guid, _список));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ОбработатьEnterprise(пПараметры, пОтвет, пОшибка)
	
	Если НЕ ТипЗнч(пПараметры) = Тип("Массив") Тогда
		_Параметры = Новый Массив;
		_Параметры.Добавить(пПараметры);
	Иначе
		_Параметры = пПараметры;
	КонецЕсли;
	
	пОтвет.Вставить("Enterprise", Новый Массив);
	
	Для каждого _ЭлементЗапроса Из _Параметры Цикл
		
		Если НЕ ТипЗнч(_ЭлементЗапроса) = Тип("Структура") Тогда
			пОшибка = "Некорректные входные данные";
			Возврат Ложь;
		КонецЕсли;
		
		_Отказ = Ложь; _Ошибка = "";
		Если _ЭлементЗапроса.Свойство("businessEntityGuid") И ЗначениеЗаполнено(_ЭлементЗапроса.businessEntityGuid) Тогда
			_список = Новый Массив;
			_enterprise = Неопределено;
			_параметры = Неопределено;
			Пока ВетисEnterpriseService.GetActivityLocationListNext(_ЭлементЗапроса.businessEntityGuid, _enterprise, _параметры, _Отказ, _Ошибка) Цикл
				_список.Добавить(ВетисОбменДанными.ПолучитьСтруктуруОбъекта(ВетисDictionaryСлой1с.Enterprise(_enterprise)));
			КонецЦикла;
			Если _Отказ = Истина Тогда
				Возврат Ложь;
			КонецЕсли;
			пОтвет.Enterprise.Добавить(Новый Структура("businessEntityGuid, Объекты", _ЭлементЗапроса.businessEntityGuid, _список));
			
		ИначеЕсли _ЭлементЗапроса.Свойство("guid") И ЗначениеЗаполнено(_ЭлементЗапроса.guid) Тогда
			_список = Новый Массив;
			_ссылка = ВетисDictionaryСлой1с.Enterprise(_ЭлементЗапроса.guid);
			_список.Добавить(ВетисОбменДанными.ПолучитьСтруктуруОбъекта(_ссылка));
			пОтвет.Enterprise.Добавить(Новый Структура("guid, Объекты", _ЭлементЗапроса.guid, _список));
			
		Иначе
			_отбор = ВетисDictionary.Enterprise();
			Если _ЭлементЗапроса.Свойство("name") И ЗначениеЗаполнено(_ЭлементЗапроса.name) Тогда
				_отбор.name = _ЭлементЗапроса.name;
			КонецЕсли;
			Если _ЭлементЗапроса.Свойство("number") И ЗначениеЗаполнено(_ЭлементЗапроса.number) Тогда
				_отбор.numberList = ВетисDictionary.EnterpriseNumberList();
				_отбор.numberList.enterpriseNumber.Добавить(_ЭлементЗапроса.number);
			КонецЕсли;
			Если _ЭлементЗапроса.Свойство("country") И ЗначениеЗаполнено(_ЭлементЗапроса.country) Тогда
				_отбор.address = ВетисDictionary.Address();
				_отбор.address.country = ВетисDictionary.Country(_ЭлементЗапроса.country);
				Если _ЭлементЗапроса.Свойство("region") И ЗначениеЗаполнено(_ЭлементЗапроса.region) Тогда
					_отбор.address.region = ВетисDictionary.Region(_ЭлементЗапроса.region);
				КонецЕсли;
				Если _ЭлементЗапроса.Свойство("district") И ЗначениеЗаполнено(_ЭлементЗапроса.district) Тогда
					_отбор.address.district = ВетисDictionary.District(_ЭлементЗапроса.district);
				КонецЕсли;
				Если _ЭлементЗапроса.Свойство("locality") И ЗначениеЗаполнено(_ЭлементЗапроса.locality) Тогда
					_отбор.address.locality = ВетисDictionary.Locality(_ЭлементЗапроса.locality);
				КонецЕсли;
			КонецЕсли;
			_список = Новый Массив;
			_enterprise = Неопределено;
			_параметры = Новый Структура("filter", _отбор);
			_макс = 1000;
			Пока ВетисEnterpriseService.GetRussianEnterpriseListNext(_enterprise, _параметры) Цикл
				_список.Добавить(ВетисОбменДанными.ПолучитьСтруктуруОбъекта(ВетисDictionaryСлой1с.Enterprise(_enterprise)));
				_макс = _макс - 1;
				Если _макс <= 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			пОтвет.Enterprise.Добавить(Новый Структура("Объекты", _список));
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ОбработатьCountry(Country, пОтвет, пОшибка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Наименование КАК name,
	|	_Таблица.guid
	|ИЗ
	|	Справочник.ВетисCountry КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления
	|//1	И _Таблица.Наименование подобно ""%<имя>%""
	|	И ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");
	
	Если ЗначениеЗаполнено(Country) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//1", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "<имя>", Country);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	пОтвет.Вставить("Country", Новый Массив);
	
	Пока Выборка.Следующий() Цикл
		пОтвет.Country.Добавить(Новый Структура("name,guid", Выборка.name, Выборка.guid));
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ОбработатьRegion(Region, пОтвет, пОшибка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Наименование КАК name,
	|	_Таблица.guid,
	|	_Таблица.Country.Наименование КАК CountryName,
	|	_Таблица.Country.guid КАК CountryGuid
	|ИЗ
	|	Справочник.ВетисRegion КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления
	|//1	И _Таблица.Наименование подобно ""%<имя>%""
	|	И ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");
	
	Если ЗначениеЗаполнено(Region) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//1", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "<имя>", Region);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	пОтвет.Вставить("Region", Новый Массив);
	
	Пока Выборка.Следующий() Цикл
		_Объект = Новый Структура;
		_Объект.Вставить("name", Выборка.name);
		_Объект.Вставить("guid", Выборка.guid);
		_Объект.Вставить("Country", Новый Структура("name,guid", Выборка.CountryName, Выборка.CountryGuid));
		пОтвет.Region.Добавить(_Объект);
	КонецЦикла;
	
КонецФункции

Функция ОбработатьLocality(Locality, пОтвет, пОшибка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Наименование КАК name,
	|	_Таблица.guid,
	|	_Таблица.Country.Наименование КАК CountryName,
	|	_Таблица.Country.guid КАК CountryGuid,
	|	_Таблица.Region.Наименование КАК RegionName,
	|	_Таблица.Region.guid КАК RegionGuid,
	|	_Таблица.District.Наименование КАК DistrictName,
	|	_Таблица.District.guid КАК DistrictGuid
	|ИЗ
	|	Справочник.ВетисLocality КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления
	|//1	И _Таблица.Наименование подобно ""%<имя>%""
	|	И ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");
	
	Если ЗначениеЗаполнено(Locality) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//1", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "<имя>", Locality);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	пОтвет.Вставить("Locality", Новый Массив);
	
	Пока Выборка.Следующий() Цикл
		_Объект = Новый Структура;
		_Объект.Вставить("name", Выборка.name);
		_Объект.Вставить("guid", Выборка.guid);
		_Объект.Вставить("Country", Новый Структура("name,guid", Выборка.CountryName, Выборка.CountryGuid));
		_Объект.Вставить("Region", Новый Структура("name,guid", Выборка.RegionName, Выборка.RegionGuid));
		_Объект.Вставить("District", Новый Структура("name,guid", Выборка.DistrictName, Выборка.DistrictGuid));
		пОтвет.Locality.Добавить(_Объект);
	КонецЦикла;
	
КонецФункции

Функция ОбработатьVetDocument(пПараметры, пОтвет, пОшибка = Ложь)
	
	Если НЕ (ТипЗнч(пПараметры) = Тип("Структура")) Тогда
		пОшибка = "Некорректные входные данные";
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"//оп2ВЫБРАТЬ
	|//оп2	_Таблица.Ссылка
	|//оп2 ПОМЕСТИТЬ ВПолучательПредприятие
	|//оп2ИЗ
	|//оп2	Справочник.ВетисEnterprise КАК _Таблица
	|//оп2ГДЕ
	|//оп2	ИСТИНА
	|//оп2	И (_Таблица.Ссылка.guid = &ПолучательПредприятие
	|//оп2	ИЛИ _Таблица.next.guid = &ПолучательПредприятие)
	|//оп2	И ИСТИНА
	|//оп2;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.uuid,
	|	_Таблица.Дата,
	|	_Таблица.Номер,
	|	_Таблица.НомерВеб,
	|	_Таблица.ДатаТТН,
	|	_Таблица.НомерТТН,
	|	_Таблица.Форма,
	|	_Таблица.Статус,
	|	_Таблица.Отправитель,
	|	_Таблица.Отправитель.guid КАК ОтправительGuid,
	|	_Таблица.Отправитель.Наименование КАК ОтправительНаименование,
	|	_Таблица.Отправитель.inn КАК ОтправительИНН,
	|	_Таблица.ОтправительПредприятие,
	|	_Таблица.ОтправительПредприятие.guid КАК ОтправительПредприятиеGuid,
	|	_Таблица.ОтправительПредприятие.last КАК ОтправительПредприятиеLast,
	|	_Таблица.ОтправительПредприятие.active КАК ОтправительПредприятиеActive,
	|	_Таблица.ОтправительПредприятие.Наименование КАК ОтправительПредприятиеНаименование,
	|	_Таблица.ОтправительПредприятие.addressView КАК ОтправительПредприятиеАдрес,
	|	_Таблица.ОтправительПредприятие.enterpriseNumber КАК ОтправительПредприятиеНомер,
	|	_Таблица.ОтправительПредприятие.next КАК ОтправительПредприятиеNext,
	|	_Таблица.ОтправительПредприятие.next.guid КАК ОтправительПредприятиеNextGuid,
	//|	_Таблица.ОтправительПредприятие.next.last КАК ОтправительПредприятиеNextLast,
	//|	_Таблица.ОтправительПредприятие.next.active КАК ОтправительПредприятиеNextActive,
	//|	_Таблица.ОтправительПредприятие.next.Наименование КАК ОтправительПредприятиеNextНаименование,
	//|	_Таблица.ОтправительПредприятие.next.addressView КАК ОтправительПредприятиеNextАдрес,
	//|	_Таблица.ОтправительПредприятие.next.enterpriseNumber КАК ОтправительПредприятиеNextНомер,
	|	_Таблица.Получатель,
	|	_Таблица.Получатель.guid КАК ПолучательGuid,
	|	_Таблица.Получатель.Наименование КАК ПолучательНаименование,
	|	_Таблица.Получатель.inn КАК ПолучательИНН,
	|	_Таблица.ПолучательПредприятие,
	|	_Таблица.ПолучательПредприятие.guid КАК ПолучательПредприятиеGuid,
	|	_Таблица.ПолучательПредприятие.last КАК ПолучательПредприятиеLast,
	|	_Таблица.ПолучательПредприятие.active КАК ПолучательПредприятиеActive,
	|	_Таблица.ПолучательПредприятие.Наименование КАК ПолучательПредприятиеНаименование,
	|	_Таблица.ПолучательПредприятие.addressView КАК ПолучательПредприятиеАдрес,
	|	_Таблица.ПолучательПредприятие.enterpriseNumber КАК ПолучательПредприятиеНомер,
	|	_Таблица.ПолучательПредприятие.next КАК ПолучательПредприятиеNext,
	|	_Таблица.ПолучательПредприятие.next.guid КАК ПолучательПредприятиеNextGuid,
	//|	_Таблица.ПолучательПредприятие.next.last КАК ПолучательПредприятиеNextLast,
	//|	_Таблица.ПолучательПредприятие.next.active КАК ПолучательПредприятиеNextActive,
	//|	_Таблица.ПолучательПредприятие.next.Наименование КАК ПолучательПредприятиеNextНаименование,
	//|	_Таблица.ПолучательПредприятие.next.addressView КАК ПолучательПредприятиеNextАдрес,
	//|	_Таблица.ПолучательПредприятие.next.enterpriseNumber КАК ПолучательПредприятиеNextНомер,
	|	_Таблица.ДатаВыработки,
	|	_Таблица.СрокГодности,
	|	_Таблица.СтранаПроисхождения,
	|	_Таблица.СтранаПроисхождения.guid КАК СтранаПроисхожденияGuid,
	|	_Таблица.СтранаПроисхождения.Наименование КАК СтранаПроисхожденияНаименование,
	//|	_Таблица.Производитель,
	//|	_Таблица.Производитель.guid КАК ПроизводительGuid,
	//|	_Таблица.Производитель.last КАК ПроизводительLast,
	//|	_Таблица.Производитель.active КАК ПроизводительActive,
	//|	_Таблица.Производитель.Наименование КАК ПроизводительНаименование,
	//|	_Таблица.Производитель.addressView КАК ПроизводительАдрес,
	//|	_Таблица.Производитель.enterpriseNumber КАК ПроизводительНомер,
	//|	_Таблица.Производитель.next КАК ПроизводительNext,
	//|	_Таблица.Производитель.next.guid КАК ПроизводительNextGuid,
	//|	_Таблица.Производитель.next.last КАК ПроизводительNextLast,
	//|	_Таблица.Производитель.next.active КАК ПроизводительNextActive,
	//|	_Таблица.Производитель.next.Наименование КАК ПроизводительNextНаименование,
	//|	_Таблица.Производитель.next.addressView КАК ПроизводительNextАдрес,
	//|	_Таблица.Производитель.next.enterpriseNumber КАК ПроизводительNextНомер,
	|	_Таблица.ProductItemName,
	|	_Таблица.Количество,
	|	_Таблица.Производители.(
	|		Предприятие,
	|		Предприятие.guid КАК ПредприятиеGuid,
	|		Предприятие.last КАК ПредприятиеLast,
	|		Предприятие.active КАК ПредприятиеActive,
	|		Предприятие.Наименование КАК ПредприятиеНаименование,
	|		Предприятие.addressView КАК ПредприятиеАдрес,
	|		Предприятие.enterpriseNumber КАК ПредприятиеНомер,
	|		Предприятие.next КАК ПредприятиеNext,
	|		Предприятие.next.guid КАК ПредприятиеNextGuid,
	|		Наименование КАК Наименование,
	|	) Производители
	|ИЗ
	|	Документ.ВетисВетеринарноСопроводительныйДокумент КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И _Таблица.Проведен
	|//о1	И _Таблица.Ссылка В (&Ссылка)
	|//ос	И _Таблица.Статус = &Статус
	|//оо1	И _Таблица.Отправитель.guid = &Отправитель
	|//оо2	И _Таблица.ОтправительПредприятие.guid = &ОтправительПредприятие
	|//оп1	И _Таблица.Получатель.guid = &Получатель
	|//оп2	И _Таблица.ПолучательПредприятие В (Выбрать Ссылка ИЗ ВПолучательПредприятие)
	|	И ИСТИНА");
	
	Если пПараметры.Свойство("Ссылка") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о1", "");
		Запрос.УстановитьПараметр("Ссылка", пПараметры.Ссылка);
	КонецЕсли;
	
	Если пПараметры.Свойство("Статус") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ос", "");
		Запрос.УстановитьПараметр("Статус", ВетисОбменДанными.ОбработатьСсылку(пПараметры.Статус));
	КонецЕсли;
	
	Если пПараметры.Свойство("Отправитель") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//оо1", "");
		Запрос.УстановитьПараметр("Отправитель", пПараметры.Отправитель);
	КонецЕсли;
	
	Если пПараметры.Свойство("ОтправительПредприятие") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//оо2", "");
		Запрос.УстановитьПараметр("ОтправительПредприятие", пПараметры.ОтправительПредприятие);
	КонецЕсли;
	
	Если пПараметры.Свойство("Получатель") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//оп1", "");
		Запрос.УстановитьПараметр("Получатель", пПараметры.Получатель);
	КонецЕсли;
	
	Если пПараметры.Свойство("ПолучательПредприятие") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//оп2", "");
		Запрос.УстановитьПараметр("ПолучательПредприятие", пПараметры.ПолучательПредприятие);
	КонецЕсли;
	
	//Попытка
	Результат = Запрос.Выполнить();
	//Исключение
	//_=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	//КонецПопытки;
	Выборка = Результат.Выбрать();
	
	пОтвет.Вставить("VetDocument", Новый Массив);
	
	_be = Метаданные.Справочники.ВетисBusinessEntity.ПолноеИмя();
	_en = Метаданные.Справочники.ВетисEnterprise.ПолноеИмя();
	_cn = Метаданные.Справочники.ВетисCountry.ПолноеИмя();
	
	Пока Выборка.Следующий() Цикл
		_Объект = Новый Структура;
		_Объект.Вставить("Тип", Метаданные.Документы.ВетисВетеринарноСопроводительныйДокумент.ПолноеИмя());
		_Объект.Вставить("ref", Выборка.uuid);
		_Объект.Вставить("uuid", Выборка.uuid);
		_Объект.Вставить("Дата", Выборка.Дата);
		_Объект.Вставить("Номер", Выборка.Номер);
		_Объект.Вставить("НомерВеб", Выборка.НомерВеб);
		_Объект.Вставить("ДатаТТН", Выборка.ДатаТТН);
		_Объект.Вставить("НомерТТН", Выборка.НомерТТН);
		_Объект.Вставить("Форма", ВетисОбменДанными.ПолучитьСтруктуруОбъекта(Выборка.Форма));
		_Объект.Вставить("Статус", ВетисОбменДанными.ПолучитьСтруктуруОбъекта(Выборка.Статус));
		_Объект.Вставить("Отправитель", Новый Структура("Тип,ref,guid, Наименование, inn", _be, Выборка.ОтправительGuid, Выборка.ОтправительGuid, Выборка.ОтправительНаименование, Выборка.ОтправительИНН));
		_Объект.Вставить("Получатель", Новый Структура("Тип,ref,guid, Наименование, inn", _be, Выборка.ПолучательGuid, Выборка.ПолучательGuid, Выборка.ПолучательНаименование, Выборка.ПолучательИНН));
		_Объект.Вставить("ОтправительПредприятие", Новый Структура("Тип,ref,guid, last, active, Наименование, addressView, enterpriseNumber", _en, Выборка.ОтправительПредприятиеGuid, Выборка.ОтправительПредприятиеGuid, Выборка.ОтправительПредприятиеLast, Выборка.ОтправительПредприятиеActive, Выборка.ОтправительПредприятиеНаименование, Выборка.ОтправительПредприятиеАдрес, Выборка.ОтправительПредприятиеНомер));
		_Объект.Вставить("ПолучательПредприятие", Новый Структура("Тип,ref,guid, last, active, Наименование, addressView, enterpriseNumber", _en, Выборка.ПолучательПредприятиеGuid, Выборка.ПолучательПредприятиеGuid, Выборка.ПолучательПредприятиеLast, Выборка.ПолучательПредприятиеActive, Выборка.ПолучательПредприятиеНаименование, Выборка.ПолучательПредприятиеАдрес, Выборка.ПолучательПредприятиеНомер));
		Если ЗначениеЗаполнено(Выборка.ОтправительПредприятиеNext) Тогда
			_Объект.ОтправительПредприятие.Вставить("next", Новый Структура("Тип,ref,guid", _en, Выборка.ОтправительПредприятиеNextGuid, Выборка.ОтправительПредприятиеNextGuid));
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ПолучательПредприятиеNext) Тогда
			_Объект.ПолучательПредприятие.Вставить("next", Новый Структура("Тип,ref,guid", _en, Выборка.ПолучательПредприятиеNextGuid, Выборка.ПолучательПредприятиеNextGuid));
		КонецЕсли;
		_Объект.Вставить("Производители", Новый Массив);
		
		ВыборкаПр = Выборка.Производители.Выбрать();
		Пока ВыборкаПр.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаПр.Предприятие) Тогда
				_Предприятие = Новый Структура("Тип,ref,guid, last, active, Наименование, addressView, enterpriseNumber", _en, ВыборкаПр.ПредприятиеGuid, ВыборкаПр.ПредприятиеGuid, ВыборкаПр.ПредприятиеLast, ВыборкаПр.ПредприятиеActive, ВыборкаПр.ПредприятиеНаименование, ВыборкаПр.ПредприятиеАдрес, ВыборкаПр.ПредприятиеНомер);
				Если ЗначениеЗаполнено(ВыборкаПр.ПредприятиеNext) Тогда
					_Предприятие.Вставить("next", Новый Структура("Тип,ref,guid", _en, ВыборкаПр.ПредприятиеNextGuid, ВыборкаПр.ПредприятиеNextGuid));
				КонецЕсли;
			Иначе
				_Предприятие = Новый Структура;
			КонецЕсли;
			_Объект.Производители.Добавить(Новый Структура("Предприятие, Наименование", _Предприятие, ВыборкаПр.Наименование));
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Выборка.СтранаПроисхождения) Тогда
			_Объект.Вставить("СтранаПроисхождения", Новый Структура("Тип,ref,guid, Наименование", _cn, Выборка.СтранаПроисхожденияGuid, Выборка.СтранаПроисхожденияGuid, Выборка.СтранаПроисхожденияНаименование));
		КонецЕсли;
		_Объект.Вставить("ДатаВыработки", Выборка.ДатаВыработки);
		_Объект.Вставить("СрокГодности", Выборка.СрокГодности);
		_Объект.Вставить("ProductItemName", Выборка.ProductItemName);
		_Объект.Вставить("Количество", Выборка.Количество);
		пОтвет.VetDocument.Добавить(_Объект);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ОбработатьStockEntry(пПараметры, пОтвет, пОшибка = Ложь)
	
	Если НЕ (ТипЗнч(пПараметры) = Тип("Структура")) Тогда
		пОшибка = "Некорректные входные данные";
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.guid,
	|	_Таблица.Код entryNumber,
	|	_Таблица.last,
	|	_Таблица.active,
	|	_Таблица.createDate,
	|	_Таблица.updateDate,
	|	_Таблица.BusinessEntity,
	|	_Таблица.BusinessEntity.guid КАК BusinessEntityGuid,
	|	_Таблица.BusinessEntity.Наименование КАК BusinessEntityName,
	|	_Таблица.BusinessEntity.inn КАК BusinessEntityINN,
	|	_Таблица.Enterprise,
	|	_Таблица.Enterprise.guid КАК EnterpriseGuid,
	|	_Таблица.Enterprise.last КАК EnterpriseLast,
	|	_Таблица.Enterprise.active КАК EnterpriseActive,
	|	_Таблица.Enterprise.Наименование КАК EnterpriseName,
	|	_Таблица.Enterprise.addressView КАК EnterpriseAddress,
	|	_Таблица.Enterprise.enterpriseNumber КАК EnterpriseNumber,
	|	_Таблица.Enterprise.next КАК EnterpriseNext,
	|	_Таблица.Enterprise.next.guid КАК EnterpriseNextGuid,
	|	_Таблица.volume,
	//|	_Таблица.packingAmount,
	|	_Таблица.productMarking,
	|	_Таблица.ProductItemName,
	|	_Таблица.producerName КАК producerName,
	|	_Таблица.country,
	|	_Таблица.country.guid КАК countryGuid,
	|	_Таблица.country.Наименование КАК countryName,
	|	_Таблица.dateOfProduction,
	|	_Таблица.expiryDate,
	|	_Таблица.PackageList.(
	|		КлючСтроки,
	|		level,
	|		packingType,
	|		quantity
	|	),
	|	_Таблица.ProductMarks.(
	|		КлючСвязи,
	|		value,
	|		class
	|	)
	|ИЗ
	|	Справочник.ВетисStockEntry КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И _Таблица.last
	|	И _Таблица.active
	|	И _Таблица.volume > 0
	|	И НЕ _Таблица.status = Значение(Перечисление.ВетисVersionStatus.WITHDRAWN)
	|//о1	И _Таблица.BusinessEntity.guid = &BusinessEntity
	|//о2	И _Таблица.Enterprise.guid = &Enterprise
	|//о3	И _Таблица.Ссылка В (&Ссылка)
	|	И ИСТИНА");
	
	Если пПараметры.Свойство("Ссылка") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о3", "");
		Запрос.УстановитьПараметр("Ссылка", пПараметры.Ссылка);
	КонецЕсли;
	
	Если пПараметры.Свойство("ХС") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о1", "");
		Запрос.УстановитьПараметр("BusinessEntity", пПараметры.ХС);
	КонецЕсли;
	
	Если пПараметры.Свойство("Предприятие") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о2", "");
		Запрос.УстановитьПараметр("Enterprise", пПараметры.Предприятие);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_be = Метаданные.Справочники.ВетисBusinessEntity.ПолноеИмя();
	_en = Метаданные.Справочники.ВетисEnterprise.ПолноеИмя();
	_cn = Метаданные.Справочники.ВетисCountry.ПолноеИмя();
	
	пОтвет.Вставить("StockEntry", Новый Массив);
	
	Пока Выборка.Следующий() Цикл
		_Объект = Новый Структура;
		_Объект.Вставить("Тип", Метаданные.Справочники.ВетисStockEntry.ПолноеИмя());
		_Объект.Вставить("ref", Выборка.guid);
		_Объект.Вставить("guid", Выборка.guid);
		_Объект.Вставить("entryNumber", Выборка.entryNumber);
		_Объект.Вставить("last", Выборка.last);
		_Объект.Вставить("active", Выборка.active);
		_Объект.Вставить("createDate", Выборка.createDate);
		_Объект.Вставить("updateDate", Выборка.updateDate);
		_Объект.Вставить("BusinessEntity", Новый Структура("Тип,ref,guid, Наименование, inn", _be, Выборка.BusinessEntityGuid, Выборка.BusinessEntityGuid, Выборка.BusinessEntityName, Выборка.BusinessEntityINN));
		_Объект.Вставить("Enterprise", Новый Структура("Тип,ref,guid, last, active, Наименование, addressView, enterpriseNumber", _en, Выборка.EnterpriseGuid, Выборка.EnterpriseGuid, Выборка.EnterpriseLast, Выборка.EnterpriseActive, Выборка.EnterpriseName, Выборка.EnterpriseAddress, Выборка.EnterpriseNumber));
		Если ЗначениеЗаполнено(Выборка.EnterpriseNext) Тогда
			//_Объект.Enterprise.Вставить("next", Новый Структура("guid, last, active, Наименование, addressView, enterpriseNumber", Выборка.EnterpriseNextGuid, Выборка.EnterpriseNextLast, Выборка.EnterpriseNextActive, Выборка.EnterpriseNextНаименование, Выборка.EnterpriseNextАдрес, Выборка.EnterpriseNextНомер));
			_Объект.Enterprise.Вставить("next", Новый Структура("Тип,ref,guid", _en, Выборка.EnterpriseNextGuid, Выборка.EnterpriseNextGuid));
		КонецЕсли;
		_Объект.Вставить("ProductItemName", Выборка.ProductItemName);
		_Объект.Вставить("volume", Выборка.volume);
		//_Объект.Вставить("packingAmount", Выборка.packingAmount);
		_Объект.Вставить("productMarking", Выборка.productMarking);
		//Если ЗначениеЗаполнено(Выборка.producer) Тогда
		//	_Объект.Вставить("producer", Новый Структура("guid, last, active, Наименование, addressView, enterpriseNumber", Выборка.producerGuid, Выборка.producerLast, Выборка.producerActive, Выборка.producerName, Выборка.producerAddress, Выборка.producerNumber));
		//	Если ЗначениеЗаполнено(Выборка.producerNext) Тогда
		//		//_Объект.producer.Вставить("next", Новый Структура("guid, last, active, Наименование, addressView, enterpriseNumber", Выборка.producerNextGuid, Выборка.producerNextLast, Выборка.producerNextActive, Выборка.producerNextНаименование, Выборка.producerNextАдрес, Выборка.producerNextНомер));
		//		_Объект.producer.Вставить("next", Новый Структура("guid", Выборка.producerNextGuid));
		//	КонецЕсли;
		//КонецЕсли;
		_Объект.Вставить("producerName", Выборка.producerName);
		Если ЗначениеЗаполнено(Выборка.country) Тогда
			_Объект.Вставить("country", Новый Структура("Тип,ref,guid, Наименование", _cn, Выборка.countryGuid, Выборка.countryGuid, Выборка.countryName));
		КонецЕсли;
		//Если ЗначениеЗаполнено(Выборка.vetDocument) Тогда
		//	_Объект.Вставить("vetDocument", Новый Структура("uuid", Выборка.vetDocumentUuid));
		//КонецЕсли;
		
		_Объект.Вставить("dateOfProduction", Выборка.dateOfProduction);
		_Объект.Вставить("expiryDate", Выборка.expiryDate);
		_Объект.Вставить("vetDocument", Новый Структура);
		
		_Объект.Вставить("PackageList", Новый Массив);
		ВыборкаТЧ = Выборка.PackageList.Выбрать();
		Пока ВыборкаТЧ.Следующий() Цикл
			
			_СтрокаСтруктура = Новый Структура;
			_СтрокаСтруктура.Вставить("КлючСтроки", ВыборкаТЧ.КлючСтроки);
			_СтрокаСтруктура.Вставить("level", ВетисОбменДанными.ПолучитьСтруктуруОбъекта(ВыборкаТЧ.level));
			_СтрокаСтруктура.Вставить("packingType", ВетисОбменДанными.ПолучитьСтруктуруОбъекта(ВыборкаТЧ.packingType));
			_СтрокаСтруктура.Вставить("quantity", ВыборкаТЧ.quantity);
			
			_Объект.PackageList.Добавить(_СтрокаСтруктура);
		КонецЦикла;
		
		_Объект.Вставить("ProductMarks", Новый Массив);
		ВыборкаТЧ = Выборка.ProductMarks.Выбрать();
		Пока ВыборкаТЧ.Следующий() Цикл
			
			_СтрокаСтруктура = Новый Структура;
			_СтрокаСтруктура.Вставить("КлючСвязи", ВыборкаТЧ.КлючСвязи);
			_СтрокаСтруктура.Вставить("class", ВетисОбменДанными.ПолучитьСтруктуруОбъекта(ВыборкаТЧ.class));
			_СтрокаСтруктура.Вставить("value", ВыборкаТЧ.value);
			
			_Объект.ProductMarks.Добавить(_СтрокаСтруктура);
		КонецЦикла;
		
		пОтвет.StockEntry.Добавить(_Объект);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСтруктуруStockEntry(ref)
	
	_Объект = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисStockEntry, ref);
	
	_ОбъектСтруктура = Новый Структура;
	_ОбъектСтруктура.Вставить("ref", ref);
	_ОбъектСтруктура.Вставить("Партии", Новый Массив);
	
КонецФункции

Функция ПолучитьСтруктуруТранспортнаяПартия(пОбъект)
	
	Если ТипЗнч(пОбъект) = Тип("ДокументОбъект.ВетисТранспортнаяПартия") Тогда
		_Объект = пОбъект;
		_ref = Строка(пОбъект.Ссылка.УникальныйИдентификатор());
	ИначеЕсли ТипЗнч(пОбъект) = Тип("ДокументСсылка.ВетисТранспортнаяПартия") Тогда
		_Объект = пОбъект.ПолучитьОбъект();
		_ref = Строка(пОбъект.УникальныйИдентификатор());
	Иначе
		_Объект = ВетисОбменДанными.ПолучитьОбъект(Документы.ВетисТранспортнаяПартия, пОбъект);
		_ref = пОбъект;
	КонецЕсли;
	
	_ОбъектСтруктура = Новый Структура;
	_ОбъектСтруктура.Вставить("Тип", Метаданные.Документы.ВетисТранспортнаяПартия.ПолноеИмя());
	_ОбъектСтруктура.Вставить("ref", _ref);
	_ОбъектСтруктура.Вставить("Проведен", _Объект.Проведен);
	_ОбъектСтруктура.Вставить("ПометкаУдаления", _Объект.ПометкаУдаления);
	_ОбъектСтруктура.Вставить("Партии", Новый Массив);
	
	Если _Объект = Неопределено Тогда
		_ОбъектСтруктура.Вставить("Статус", ВетисОбменДанными.ПолучитьСтруктуруОбъекта(Перечисления.ВетисVetDocumentStatus.ПустаяСсылка()));
		_ОбъектСтруктура.Вставить("СтатусТранзакции", ВетисОбменДанными.ПолучитьСтруктуруОбъекта(Перечисления.ВетисСтатусТранзакции.ПустаяСсылка()));
	Иначе
		_ОбъектСтруктура.Вставить("Статус", ВетисОбменДанными.ПолучитьСтруктуруОбъекта(_Объект.Статус));
		_ОбъектСтруктура.Вставить("СтатусТранзакции", ВетисОбменДанными.ПолучитьСтруктуруОбъекта(_Объект.СтатусТранзакции));
		_ОбъектСтруктура.Вставить("Партии", Новый Массив);
		Для каждого _ПартииСтрока Из _Объект.Партии Цикл
			
			_ПартииСтруктура = Новый Структура;
			_ПартииСтруктура.Вставить("НомерСтроки", _ПартииСтрока.НомерСтроки);
			_ПартииСтруктура.Вставить("Количество", _ПартииСтрока.Количество);
			_ПартииСтруктура.Вставить("Наименование", _ПартииСтрока.ProductItemName);
			_ПартииСтруктура.Вставить("Статус", ВетисОбменДанными.ПолучитьСтруктуруОбъекта(_ПартииСтрока.Статус));
			_ПартииСтруктура.Вставить("StockEntry", ВетисОбменДанными.ПолучитьСтруктуруОбъекта(_ПартииСтрока.StockEntry, , Ложь));
			_ПартииСтруктура.Вставить("ВСД", ВетисОбменДанными.ПолучитьСтруктуруОбъекта(_ПартииСтрока.ВСД, , Ложь));
			
			_ОбъектСтруктура.Партии.Добавить(_ПартииСтруктура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат _ОбъектСтруктура;
	
КонецФункции



Функция ОтветСервер(пСообщение, пОтказ = Ложь, пГотово = Ложь, пОтвет = Неопределено)
	
	_Ответ = Новый Структура("Готово,Отказ,Сообщение,Ответ", пГотово, пОтказ, пСообщение, пОтвет);
	
	_Ответ = Новый ХранилищеЗначения(_Ответ, Новый СжатиеДанных(9));
	
	Возврат ВетисОбменДанными.Сериализовать(_Ответ);
	
КонецФункции

