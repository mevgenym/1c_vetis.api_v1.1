
Функция Синхронизировать(пЗапрос) Экспорт
	
	//ВетисОбщегоНазначения.Пауза(10);
	
	_Отказ = Ложь;
	_Ответ = Новый Структура("Отказ,Сообщение", Ложь, "");
	_Ошибка = "";
	
	_Обновление = Истина;
	
	_Запрос = Десериализовать(пЗапрос.ПолучитьТелоКакСтроку());
	
	Если НЕ ТипЗнч(_Запрос) = Тип("ХранилищеЗначения") Тогда
		Возврат ОтветСервер("Неправильный формат запроса");
	КонецЕсли;
	
	_Запрос = _Запрос.Получить();
	
	//проверка запроса
	Если НЕ ТипЗнч(_Запрос) = Тип("Структура") Тогда
		Возврат ОтветСервер("Неправильный формат запроса");
	КонецЕсли;
	
	Если _Запрос.Свойство("nodename") И НЕ ПустаяСтрока(_Запрос.nodename) Тогда
		_Узел = ПланыОбмена.ВетисКлиенты.ПолучитьУзел(_Запрос.nodename);
	Иначе
		_Узел = ПланыОбмена.ВетисКлиенты.ПолучитьУзел("trade");
	КонецЕсли;
	
	Если _Узел = Неопределено Тогда
		Возврат ОтветСервер("Не найден узел");
	КонецЕсли;
	
	Если _Запрос.Свойство("Изменения") Тогда
		Если НЕ ОбработатьИзменения(_Запрос, _Узел, _Ошибка) Тогда
			Возврат ОтветСервер(_Ошибка);
		КонецЕсли;
		//обновим номера сообщений
		_Узел = ПланыОбмена.ВетисКлиенты.ПолучитьУзел(_Запрос.nodename);
		ВыбратьИзменения(_Ответ, _Узел);
	КонецЕсли;
	
	Если _Запрос.Свойство("ОбъектыДляУточнения") Тогда
		Если НЕ ОбработатьОбъектыДляУточнения(_Запрос, _Ответ, _Узел, _Ошибка) Тогда
			Возврат ОтветСервер(_Ошибка);
		КонецЕсли;
		ВыбратьОбъектыДляУточнения(_Ответ, _Узел);
	КонецЕсли;
	
	Если _Запрос.Свойство("ТранспортнаяПартия") Тогда
		Если НЕ ОбработатьТранспортнаяПартия(_Запрос, _Ответ, _Узел, _Ошибка) Тогда
			Возврат ОтветСервер(_Ошибка);
		КонецЕсли;
	КонецЕсли;
	
	Если _Запрос.Свойство("StockEntry") Тогда
		Если НЕ ВыбратьStockEntry(_Запрос.StockEntry, _Ответ, _Ошибка) Тогда
			Возврат ОтветСервер(_Ошибка);
		КонецЕсли;
	КонецЕсли;
	
	Если _Запрос.Свойство("BusinessEntity") Тогда
		Если НЕ ВыбратьBusinessEntity(_Запрос.BusinessEntity, _Ответ, _Ошибка) Тогда
			Возврат ОтветСервер(_Ошибка);
		КонецЕсли;
	КонецЕсли;
	
	Если _Запрос.Свойство("Enterprise") Тогда
		Если НЕ ВыбратьEnterprise(_Запрос.Enterprise, _Ответ, _Ошибка) Тогда
			Возврат ОтветСервер(_Ошибка);
		КонецЕсли;
	КонецЕсли;
	
	Если _Запрос.Свойство("VetDocument") Тогда
		Если НЕ ВыбратьVetDocument(_Запрос.VetDocument, _Ответ, _Ошибка) Тогда
			Возврат ОтветСервер(_Ошибка);
		КонецЕсли;
	КонецЕсли;
	
	Если _Запрос.Свойство("ShipmentRegionalization") Тогда
		Если НЕ ВыбратьCheckShipmentRegionalization(_Запрос.ShipmentRegionalization, _Ответ, _Ошибка) Тогда
			Возврат ОтветСервер(_Ошибка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Сериализовать(Новый ХранилищеЗначения(_Ответ, Новый СжатиеДанных(9)));
	
КонецФункции


Функция ОбработатьИзменения(пЗапрос, пУзел, пОшибка)
	
	Если пЗапрос.Свойство("НомерПринятого") Тогда
		ПланыОбмена.ВетисКлиенты.УстановитьНомерОтправленного(пУзел.Ссылка, пЗапрос.НомерПринятого);
	КонецЕсли;
	
	Если пЗапрос.Свойство("Изменения") Тогда
		
		//
		Для каждого _ОбъектСтруктура Из пЗапрос.Изменения Цикл
			Если _ОбъектСтруктура.Тип = "Документ.ВетисТранспортнаяПартия" Тогда
				//Если ОбработатьТранспортнаяПартия1(_ОбъектСтруктура, пУзел.Ссылка, пОшибка) = Неопределено Тогда
				//	Возврат Ложь;
				//КонецЕсли;
				_Объект = ОбработатьТранспортнаяПартия1(_ОбъектСтруктура, пУзел.Ссылка, пОшибка);
				Если _Объект = Неопределено Тогда
					Возврат Ложь;
				Иначе
					РегистрыСведений.ВетисОтложенныеОперации.Добавить(_Объект.Ссылка, "Отправить", _Объект.Отправитель, _Объект.Ответственный);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если пЗапрос.Свойство("НомерОтправленного") Тогда
			ПланыОбмена.ВетисКлиенты.УстановитьНомерПринятого(пУзел.Ссылка, пЗапрос.НомерОтправленного);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОбработатьОбъектыДляУточнения(пЗапрос, пОтвет, пУзел, пОшибка)
	
	Если пЗапрос.Свойство("ОбъектыДляУточнения") И ТипЗнч(пЗапрос.ОбъектыДляУточнения) = Тип("Структура") Тогда
		
		//пришел запрос на уточнение
		Если пЗапрос.ОбъектыДляУточнения.Свойство("Запрос") И ТипЗнч(пЗапрос.ОбъектыДляУточнения.Запрос) = Тип("Массив") Тогда
			_Объекты = Новый Массив;
			_параметры1 = Новый Структура("Узел", пУзел.Ссылка);
			_параметры2 = Новый Структура("Подробно", Истина);
			Для каждого _объект Из пЗапрос.ОбъектыДляУточнения.Запрос Цикл
				_Ссылка = ОбработатьСсылку(_объект, _параметры1);
				Если НЕ _параметры1.Ошибка = "" Тогда пОшибка = _параметры1.Ошибка; Возврат Ложь; КонецЕсли;
				_Объекты.Добавить(Новый Структура("Искомый,Найденный", _объект, ?(_Ссылка = Неопределено, Неопределено, ПолучитьСтруктуруОбъекта(_Ссылка, _параметры2))));
			КонецЦикла;
			Если _Объекты.Количество() > 0 Тогда
				_Значение = Неопределено;
				Если пОтвет.Свойство("ОбъектыДляУточнения", _Значение) Тогда
					_Значение.Вставить("Ответ", _объекты);
				Иначе
					пОтвет.Вставить("ОбъектыДляУточнения", Новый Структура("Ответ", _объекты))
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//пришел ответ на наш запрос
		Если пЗапрос.ОбъектыДляУточнения.Свойство("Ответ") И ТипЗнч(пЗапрос.ОбъектыДляУточнения.Ответ) = Тип("Массив") Тогда
			_параметры1 = Новый Структура("Узел", пУзел.Ссылка);
			_параметры2 = Новый Структура("Узел, Обновление", пУзел.Ссылка, Истина);
			Для каждого _ОбъектСтруктура Из пЗапрос.ОбъектыДляУточнения.Ответ Цикл
				_ссылка1 = ОбработатьСсылку(_ОбъектСтруктура.Искомый, _параметры1);//исходный объект запроса
				Если НЕ _параметры1.Ошибка = "" Тогда пОшибка = _параметры1.Ошибка; Возврат Ложь; КонецЕсли;
				Если НЕ _ОбъектСтруктура.Найденный = Неопределено Тогда
					_ссылка2 = ОбработатьСсылку(_ОбъектСтруктура.Найденный, _параметры2);//найденный объект ответа
					Если НЕ _параметры2.Ошибка = "" Тогда пОшибка = _параметры2.Ошибка; Возврат Ложь; КонецЕсли;
				КонецЕсли;
				РегистрыСведений.ВетисОбъектыДляУточнения.Удалить(_ссылка1, _параметры2.Узел);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОбработатьТранспортнаяПартия(пЗапрос, пОтвет, пУзел, пОшибка)
	
	Если пЗапрос.Свойство("ТранспортнаяПартия") Тогда
		Если Ложь Тогда
			//
		ИначеЕсли ТипЗнч(пЗапрос.ТранспортнаяПартия) = Тип("Структура") Тогда
			//массив объектов с доп. параметрами
			Если НЕ пЗапрос.ТранспортнаяПартия.Свойство("Объекты") Тогда
				пОшибка = "Некорректные входные данные";
				Возврат Ложь;
			КонецЕсли;
			пОтвет.Вставить("ТранспортнаяПартия", Новый Массив);
			Если пЗапрос.ТранспортнаяПартия.Свойство("Отправить") Тогда
				//интерактивная отправка
				_список1 = Новый СписокЗначений;
				_список2 = Новый Массив;
				Для каждого _ОбъектСтруктура Из пЗапрос.ТранспортнаяПартия.Объекты Цикл
					_Объект = ОбработатьТранспортнаяПартия1(_ОбъектСтруктура, пУзел, пОшибка);
					Если _Объект = Неопределено Тогда
						//сработала ошибка
						Возврат Ложь;
					ИначеЕсли _Объект.СтатусТранзакции = ПредопределенноеЗначение("Перечисление.ВетисСтатусТранзакции.Аннулирована") Тогда
						//пропускаем
						Продолжить;
					ИначеЕсли _Объект.СтатусТранзакции = ПредопределенноеЗначение("Перечисление.ВетисСтатусТранзакции.Отправлена") Тогда
						Если _ОбъектСтруктура.Свойство("СтатусТранзакции") Тогда
							_СтатусТранзакции = ОбработатьСсылку(_ОбъектСтруктура.СтатусТранзакции);
							Если _СтатусТранзакции = ПредопределенноеЗначение("Перечисление.ВетисСтатусТранзакции.Аннулирована") Тогда
								_уид = РегистрыСведений.ВетисОтложенныеОперации.Добавить(_Объект.Ссылка, "Аннулировать", _Объект.Отправитель, _Объект.Ответственный);
								_список1.Добавить(_уид);
								_список2.Добавить(_Объект.Ссылка);
							Иначе
								//пропускаем
								Продолжить;
							КонецЕсли;
						Иначе
							//нет свойства, пока не обрабатываем, просто пропускаем
						КонецЕсли;
					Иначе
						//остальные пытаемся отправить
						_уид = РегистрыСведений.ВетисОтложенныеОперации.Добавить(_Объект.Ссылка, "Отправить", _Объект.Отправитель, _Объект.Ответственный);
						_список1.Добавить(_уид);
						_список2.Добавить(_Объект.Ссылка);
					КонецЕсли;
				КонецЦикла;
				Если _список1.Количество() > 0 Тогда
					_Отказ = Ложь;
					ВетисСинхронизация.ОтложенныеОперации(_Отказ, пОшибка, , _список1);
					Если _Отказ = Истина Тогда
						Возврат Ложь;
					Иначе
						_параметры = Новый Структура;
						Для каждого _Ссылка Из _список2 Цикл
							пОтвет.ТранспортнаяПартия.Добавить(ПолучитьСтруктуруТранспортнаяПартия(_Ссылка, _параметры));
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			Иначе
				//запрос объектов
				_параметры = Новый Структура;
				Для каждого _Объект Из пЗапрос.ТранспортнаяПартия.Объекты Цикл
					Если НЕ (ТипЗнч(_Объект) = Тип("Структура"))
						ИЛИ НЕ _Объект.Свойство("ref")
						ИЛИ ПустаяСтрока(_Объект.ref)
						ИЛИ _Объект.ref = "00000000-0000-0000-0000-000000000000" Тогда
						пОшибка = "Некорректные входные данные";
						Возврат Ложь;
					КонецЕсли;
					_ОбъектСтруктура = ПолучитьСтруктуруТранспортнаяПартия(_Объект.ref, _параметры);
					пОтвет.ТранспортнаяПартия.Добавить(_ОбъектСтруктура);
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ТипЗнч(пЗапрос.ТранспортнаяПартия) = Тип("Массив") Тогда
			//массив объектов
			Для каждого _ОбъектСтруктура Из пЗапрос.ТранспортнаяПартия Цикл
				_Объект = ОбработатьТранспортнаяПартия1(_ОбъектСтруктура, пУзел, пОшибка);
				Если _Объект = Неопределено Тогда
					Возврат Ложь;
				Иначе
					РегистрыСведений.ВетисОтложенныеОперации.Добавить(_Объект.Ссылка, "Отправить", _Объект.Отправитель, _Объект.Ответственный);
				КонецЕсли;
			КонецЦикла;
		Иначе
			//одиночный объект
			_Объект = ОбработатьТранспортнаяПартия1(пЗапрос.ТранспортнаяПартия, пУзел, пОшибка);
			Если _Объект = Неопределено Тогда
				Возврат Ложь;
			Иначе
				РегистрыСведений.ВетисОтложенныеОперации.Добавить(_Объект.Ссылка, "Отправить", _Объект.Отправитель, _Объект.Ответственный);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОбработатьТранспортнаяПартия1(пОбъект, пУзел, пОшибка)
	
	Если НЕ (ТипЗнч(пОбъект) = Тип("Структура"))
		ИЛИ НЕ пОбъект.Свойство("ref")
		ИЛИ НЕ пОбъект.Свойство("ДокументОснование") Тогда
		пОшибка = "Некорректные входные данные";
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПустаяСтрока(пОбъект.ref) ИЛИ пОбъект.ref = "00000000-0000-0000-0000-000000000000" Тогда
		пОшибка = "Пустая ссылка";
		Возврат Неопределено;
	КонецЕсли;
	
	_менеджер = Документы.ВетисТранспортнаяПартия;
	
	_Объект = ПолучитьОбъект(Документы.ВетисТранспортнаяПартия, пОбъект.ref, Ложь);
	
	Если _Объект = Неопределено Тогда
		_Объект = ПолучитьОбъект(Документы.ВетисТранспортнаяПартия, пОбъект.ref);
		_Объект.Заполнить(Неопределено);
	ИначеЕсли _Объект.СтатусТранзакции = ПредопределенноеЗначение("Перечисление.ВетисСтатусТранзакции.Аннулирована") Тогда
		Возврат _Объект;
	ИначеЕсли _Объект.СтатусТранзакции = ПредопределенноеЗначение("Перечисление.ВетисСтатусТранзакции.Отправлена") Тогда
		//Если пОбъект.Свойство("СтатусТранзакции") Тогда
		//	_СтатусТранзакции = ОбработатьСсылку(пОбъект.СтатусТранзакции);
		//	Если _СтатусТранзакции = ПредопределенноеЗначение("Перечисление.ВетисСтатусТранзакции.Аннулирована") Тогда
		//		пОтложенныеОперацииИД = РегистрыСведений.ВетисОтложенныеОперации.Добавить(_Объект.Ссылка, "Аннулировать", _Объект.Отправитель, _Объект.Ответственный);
		//		Возврат Истина;
		//	Иначе
		//		Возврат Истина;
		//	КонецЕсли;
		//Иначе
		//	Возврат Истина;
		//КонецЕсли;
		Возврат _Объект;
	КонецЕсли;
	
	_Метаданные = Метаданные.Документы.ВетисТранспортнаяПартия;
	
	_параметры = Новый Структура("Узел, Обновление", пУзел.Ссылка,  Истина);
	
	//обновляем основание
	ОбработатьСсылку(пОбъект.ДокументОснование, _параметры);
	
	Если НЕ _параметры.Ошибка = "" Тогда
		пОшибка = "Ошибка при заполнении реквизитов";
		Возврат Неопределено;
	КонецЕсли;
	
	ВетисОбменДанными.ЗаполнитьРеквизиты(_Метаданные.СтандартныеРеквизиты, _Объект, пОбъект, _параметры);
	
	Если НЕ _параметры.Ошибка = "" Тогда
		пОшибка = "Ошибка при заполнении реквизитов";
		Возврат Неопределено;
	КонецЕсли;
	
	ВетисОбменДанными.ЗаполнитьРеквизиты(_Метаданные.Реквизиты, _Объект, пОбъект, _параметры);
	
	Если НЕ _параметры.Ошибка = "" Тогда
		пОшибка = "Ошибка при заполнении реквизитов";
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(_Объект.ДокументОснование) Тогда
		пОшибка = "Не заполнен документ основание";
		Возврат Неопределено;
	КонецЕсли;
	
	_Объект.Ответственный = Справочники.ВетисПользователи.НайтиПоРеквизиту("Пользователь", ОбработатьСсылку(пОбъект.Ответственный, _параметры));
	
	Если НЕ ЗначениеЗаполнено(_Объект.Ответственный) Тогда
		_Объект.Ответственный = Ветис.ТекущийПользователь();
	КонецЕсли;
	
	Если пОбъект.Свойство("ТТН") Тогда
		_ттн = ?(_Объект.ТТН.Количество() = 0, _Объект.ТТН.Добавить(), _Объект.ТТН.Получить(0));
		пОбъект.ТТН.Свойство("Дата", _ттн.Дата);
		пОбъект.ТТН.Свойство("Номер", _ттн.Номер);
		пОбъект.ТТН.Свойство("НомерТранспорта", _ттн.НомерТранспорта);
		Если пОбъект.ТТН.Свойство("НомерПрицепа") Тогда
			пОбъект.ТТН.Свойство("НомерПрицепа", _ттн.НомерПрицепа);
		КонецЕсли;
		Если пОбъект.ТТН.Свойство("ТипТранспорта") Тогда
			_ттн.ТипТранспорта = ОбработатьСсылку(пОбъект.ТТН.ТипТранспорта);
		КонецЕсли;
		Если пОбъект.ТТН.Свойство("СпособХранения") Тогда
			_ттн.СпособХранения = ОбработатьСсылку(пОбъект.ТТН.СпособХранения);
		КонецЕсли;
	КонецЕсли;
	
	_Объект.Партии.Очистить();
	Для каждого _ПартииСтрока Из пОбъект.Партии Цикл
		
		_StockEntry = ОбработатьСсылку(_ПартииСтрока.StockEntry, _параметры);
		
		_ТЧСтрока = _Объект.Партии.Добавить();
		_ТЧСтрока.КлючСтроки = _ПартииСтрока.КлючСтроки;
		_ТЧСтрока.StockEntry = _StockEntry;
		_ТЧСтрока.unit = ВетисОбменДанными.ЗначениеРеквизита(_StockEntry, "unit");
		_ТЧСтрока.producer = ВетисОбменДанными.ЗначениеРеквизита(_StockEntry, "producer");
		_ТЧСтрока.Количество = _ПартииСтрока.Количество;
		_ТЧСтрока.ProductItemName = _ПартииСтрока.Наименование;
		
	КонецЦикла;
	
	_Объект.Упаковка.Очистить();
	Для каждого _УпаковкаСтрока Из пОбъект.Упаковка Цикл
		
		_ТЧСтрока = _Объект.Упаковка.Добавить();
		_ТЧСтрока.КлючСтроки = _УпаковкаСтрока.КлючСтроки;
		_ТЧСтрока.КлючСвязи = _УпаковкаСтрока.КлючСвязи;
		_ТЧСтрока.Уровень = ОбработатьСсылку(_УпаковкаСтрока.Уровень);
		_ТЧСтрока.Упаковка = ОбработатьСсылку(_УпаковкаСтрока.Упаковка, _параметры);
		_ТЧСтрока.Количество = _УпаковкаСтрока.Количество;
		
	КонецЦикла;
	
	_Объект.Маркировка.Очистить();
	Для каждого _МаркировкаСтрока Из пОбъект.Маркировка Цикл
		
		_ТЧСтрока = _Объект.Маркировка.Добавить();
		_ТЧСтрока.КлючСвязи = _МаркировкаСтрока.КлючСвязи;
		_ТЧСтрока.КлассМаркировки = ОбработатьСсылку(_МаркировкаСтрока.КлассМаркировки);
		_ТЧСтрока.Маркировка = _МаркировкаСтрока.Маркировка;
		
	КонецЦикла;
	
	_Объект.УсловияПеремещения.Очистить();
	Для каждого _УсловияПеремещенияСтрока Из пОбъект.r13nClause Цикл
		
		_ТЧСтрока = _Объект.УсловияПеремещения.Добавить();
		_ТЧСтрока.SubProduct = ОбработатьСсылку(_УсловияПеремещенияСтрока.SubProduct);
		_ТЧСтрока.Условие = ОбработатьСсылку(_УсловияПеремещенияСтрока.Condition);
		
	КонецЦикла;
	
	//_Объект.ОбменДанными.Загрузка = Истина;
	_Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	
	_Объект.ПометкаУдаления = пОбъект.ПометкаУдаления;
	
	_Объект.Проведен = пОбъект.Проведен;
	
	Попытка
		_Объект.Записать();
	Исключение
		пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	
	//пОтложенныеОперацииИД = РегистрыСведений.ВетисОтложенныеОперации.Добавить(_Объект.Ссылка, "Отправить", _Объект.Отправитель, _Объект.Ответственный);
	
	Возврат _Объект;
	
КонецФункции


Функция ВыбратьИзменения(пОтвет, пУзел)
	
	_НомерОтправленного = пУзел.НомерОтправленного+1;
	_НомерПринятого     = пУзел.НомерПринятого;
	
	_объекты = Новый Массив;
	
	_Выборка = ПланыОбмена.ВыбратьИзменения(пУзел.Ссылка, _НомерОтправленного);
	
	//"Подробно" использутеся только в последнем условии в ПолучитьСтруктуруОбъекта
	//в процедурах ПолучитьСтруктуруТранспортнаяПартия, ПолучитьСтруктуруVetDocument, ПолучитьСтруктуруStockEntry
	//свойства выгружаются, как если бы было включено "Подробно", но это значение не используется
	_параметры = Новый Структура("Подробно", Истина);
	
	Пока _Выборка.Следующий() Цикл
		
		_Данные = _Выборка.Получить();
		
		Если ТипЗнч(_Данные) = Тип("УдалениеОбъекта") Тогда
			_Метаданные = _Данные.Метаданные();
			Если _Метаданные = Метаданные.Документы.ВетисТранспортнаяПартия Тогда
				_Структура = ПолучитьСтруктуруТранспортнаяПартия(_Данные, _параметры);
			ИначеЕсли _Метаданные = Метаданные.Документы.ВетисВетеринарноСопроводительныйДокумент Тогда
				_Структура = ПолучитьСтруктуруVetDocument(_Данные, _параметры);
			ИначеЕсли _Метаданные = Метаданные.Справочники.ВетисStockEntry Тогда
				_Структура = ПолучитьСтруктуруStockEntry(_Данные, _параметры);
			Иначе
				_Структура = ПолучитьСтруктуруОбъекта(_Данные, _параметры);
			КонецЕсли;
			_объекты.Добавить(Новый Структура("Тип,Объект", "УдалениеОбъекта", _Структура));
		Иначе
			_Метаданные = _Данные.Метаданные();
			Если _Метаданные = Метаданные.Документы.ВетисТранспортнаяПартия Тогда
				_объекты.Добавить(ПолучитьСтруктуруТранспортнаяПартия(_Данные, _параметры));
			ИначеЕсли _Метаданные = Метаданные.Документы.ВетисВетеринарноСопроводительныйДокумент Тогда
				_объекты.Добавить(ПолучитьСтруктуруVetDocument(_Данные, _параметры));
			ИначеЕсли _Метаданные = Метаданные.Справочники.ВетисStockEntry Тогда
				_объекты.Добавить(ПолучитьСтруктуруStockEntry(_Данные, _параметры));
			Иначе
				_объекты.Добавить(ПолучитьСтруктуруОбъекта(_Данные, _параметры));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если _объекты.Количество() > 0 Тогда
		пОтвет.Вставить("Изменения", _объекты);
		пОтвет.Вставить("НомерОтправленного", _НомерОтправленного);
	КонецЕсли;
	
	пОтвет.Вставить("НомерПринятого", _НомерПринятого);
	
КонецФункции

Функция ВыбратьОбъектыДляУточнения(пОтвет, пУзел)
	
	//наш запрос на уточнение
	
	_объекты = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Ссылка
	|ИЗ
	|	РегистрСведений.ВетисОбъектыДляУточнения КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	//|	И _Таблица.Узел В (&Узел, НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(ПланОбмена.ВетисКлиенты.ПустаяСсылка))
	|	И _Таблица.Узел В (&Узел)
	|	И ИСТИНА");
	
	Запрос.УстановитьПараметр("Узел", пУзел.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		_структура = Новый Структура;
		_структура.Вставить("Тип", Выборка.Ссылка.Метаданные().ПолноеИмя());
		_структура.Вставить("ref", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		_объекты.Добавить(_структура);
	КонецЦикла;
	
	Если _объекты.Количество() > 0 Тогда
		_Значение = Неопределено;
		Если пОтвет.Свойство("ОбъектыДляУточнения", _Значение) Тогда
			_Значение.Вставить("Запрос", _объекты);
		Иначе
			пОтвет.Вставить("ОбъектыДляУточнения", Новый Структура("Запрос", _объекты))
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ВыбратьBusinessEntity(пЭлементыЗапроса, пОтвет, пОшибка)
	
	Если НЕ ТипЗнч(пЭлементыЗапроса) = Тип("Массив") Тогда
		_ЭлементыЗапроса = Новый Массив;
		_ЭлементыЗапроса.Добавить(пЭлементыЗапроса);
	Иначе
		_ЭлементыЗапроса = пЭлементыЗапроса;
	КонецЕсли;
	
	пОтвет.Вставить("BusinessEntity", Новый Массив);
	
	_параметрыПреобразования = Новый Структура("Подробно", Истина);
	Для каждого _ЭлементЗапроса Из _ЭлементыЗапроса Цикл
		
		Если НЕ ТипЗнч(_ЭлементЗапроса) = Тип("Структура") Тогда
			пОшибка = "Некорректные входные данные";
			Возврат Ложь;
		КонецЕсли;
		
		_Отказ = Ложь;
		Если _ЭлементЗапроса.Свойство("inn") И ЗначениеЗаполнено(_ЭлементЗапроса.inn) Тогда
			_список = Новый Массив;
			_ОтветСервиса = ВетисEnterpriseService.GetBusinessEntityByINN(_ЭлементЗапроса.inn, _Отказ, пОшибка);
			Если _Отказ = Истина Тогда
				Возврат Ложь;
			КонецЕсли;
			Для каждого _be Из _ОтветСервиса Цикл
				_список.Добавить(ПолучитьСтруктуруBusinessEntity(_be));
			КонецЦикла;
			пОтвет.BusinessEntity.Добавить(Новый Структура("inn, Объекты", _ЭлементЗапроса.inn, _список));
			
		ИначеЕсли _ЭлементЗапроса.Свойство("guid") И ЗначениеЗаполнено(_ЭлементЗапроса.guid) Тогда
			_список = Новый Массив;
			_be = ВетисEnterpriseService.GetBusinessEntityByGuid(_ЭлементЗапроса.guid, _Отказ, пОшибка);
			Если _Отказ = Истина Тогда
				Возврат Ложь;
			КонецЕсли;
			_список.Добавить(ПолучитьСтруктуруBusinessEntity(_be));
			пОтвет.BusinessEntity.Добавить(Новый Структура("guid, Объекты", _ЭлементЗапроса.guid, _список));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ВыбратьEnterprise(пЭлементыЗапроса, пОтвет, пОшибка)
	
	Если НЕ ТипЗнч(пЭлементыЗапроса) = Тип("Массив") Тогда
		_ЭлементыЗапроса = Новый Массив;
		_ЭлементыЗапроса.Добавить(пЭлементыЗапроса);
	Иначе
		_ЭлементыЗапроса = пЭлементыЗапроса;
	КонецЕсли;
	
	пОтвет.Вставить("Enterprise", Новый Массив);
	
	_параметрыПреобразования = Новый Структура("Подробно", Истина);
	Для каждого _ЭлементЗапроса Из _ЭлементыЗапроса Цикл
		
		Если НЕ ТипЗнч(_ЭлементЗапроса) = Тип("Структура") Тогда
			пОшибка = "Некорректные входные данные";
			Возврат Ложь;
		КонецЕсли;
		
		_Отказ = Ложь;
		Если _ЭлементЗапроса.Свойство("businessEntityGuid") И ЗначениеЗаполнено(_ЭлементЗапроса.businessEntityGuid) Тогда
			_список = Новый Массив;
			_enterprise = Неопределено;
			_параметры = Неопределено;
			Пока ВетисEnterpriseService.GetActivityLocationListNext(_ЭлементЗапроса.businessEntityGuid, _enterprise, _параметры, _Отказ, пОшибка) Цикл
				_список.Добавить(ПолучитьСтруктуруEnterprise(_enterprise));
			КонецЦикла;
			Если _Отказ = Истина Тогда
				Возврат Ложь;
			КонецЕсли;
			пОтвет.Enterprise.Добавить(Новый Структура("businessEntityGuid, Объекты", _ЭлементЗапроса.businessEntityGuid, _список));
			
		ИначеЕсли _ЭлементЗапроса.Свойство("guid") И ЗначениеЗаполнено(_ЭлементЗапроса.guid) Тогда
			_список = Новый Массив;
			_enterprise = ВетисEnterpriseService.GetEnterpriseByGuid(_ЭлементЗапроса.guid, _Отказ, пОшибка);
			Если _Отказ = Истина Тогда
				Возврат Ложь;
			КонецЕсли;
			_список.Добавить(ПолучитьСтруктуруEnterprise(_enterprise));
			пОтвет.Enterprise.Добавить(Новый Структура("guid, Объекты", _ЭлементЗапроса.guid, _список));
			
		Иначе
			_отбор = ВетисDictionary.Enterprise();
			Если _ЭлементЗапроса.Свойство("name") И ЗначениеЗаполнено(_ЭлементЗапроса.name) Тогда
				_отбор.name = _ЭлементЗапроса.name;
			КонецЕсли;
			Если _ЭлементЗапроса.Свойство("number") И ЗначениеЗаполнено(_ЭлементЗапроса.number) Тогда
				_отбор.numberList = ВетисDictionary.EnterpriseNumberList();
				_отбор.numberList.enterpriseNumber.Добавить(_ЭлементЗапроса.number);
			КонецЕсли;
			Если _ЭлементЗапроса.Свойство("country") И ЗначениеЗаполнено(_ЭлементЗапроса.country) Тогда
				_отбор.address = ВетисDictionary.Address();
				_отбор.address.country = ВетисDictionary.Country(_ЭлементЗапроса.country);
				Если _ЭлементЗапроса.Свойство("region") И ЗначениеЗаполнено(_ЭлементЗапроса.region) Тогда
					_отбор.address.region = ВетисDictionary.Region(_ЭлементЗапроса.region);
				КонецЕсли;
				Если _ЭлементЗапроса.Свойство("district") И ЗначениеЗаполнено(_ЭлементЗапроса.district) Тогда
					_отбор.address.district = ВетисDictionary.District(_ЭлементЗапроса.district);
				КонецЕсли;
				Если _ЭлементЗапроса.Свойство("locality") И ЗначениеЗаполнено(_ЭлементЗапроса.locality) Тогда
					_отбор.address.locality = ВетисDictionary.Locality(_ЭлементЗапроса.locality);
				КонецЕсли;
			КонецЕсли;
			_список = Новый Массив;
			_enterprise = Неопределено;
			_параметры = Новый Структура("filter", _отбор);
			_макс = 1000;
			Пока ВетисEnterpriseService.GetRussianEnterpriseListNext(_enterprise, _параметры, _Отказ, пОшибка) Цикл
				_список.Добавить(ПолучитьСтруктуруEnterprise(_enterprise));
				_макс = _макс - 1;
				Если _макс <= 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если _Отказ = Истина Тогда
				Возврат Ложь;
			КонецЕсли;
			пОтвет.Enterprise.Добавить(Новый Структура("Объекты", _список));
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ВыбратьCountry(Country, пОтвет, пОшибка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Наименование КАК name,
	|	_Таблица.guid
	|ИЗ
	|	Справочник.ВетисCountry КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления
	|//1	И _Таблица.Наименование подобно ""%<имя>%""
	|	И ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");
	
	Если ЗначениеЗаполнено(Country) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//1", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "<имя>", Country);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	пОтвет.Вставить("Country", Новый Массив);
	
	Пока Выборка.Следующий() Цикл
		пОтвет.Country.Добавить(Новый Структура("name,guid", Выборка.name, Выборка.guid));
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ВыбратьRegion(Region, пОтвет, пОшибка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Наименование КАК name,
	|	_Таблица.guid,
	|	_Таблица.Country.Наименование КАК CountryName,
	|	_Таблица.Country.guid КАК CountryGuid
	|ИЗ
	|	Справочник.ВетисRegion КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления
	|//1	И _Таблица.Наименование подобно ""%<имя>%""
	|	И ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");
	
	Если ЗначениеЗаполнено(Region) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//1", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "<имя>", Region);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	пОтвет.Вставить("Region", Новый Массив);
	
	Пока Выборка.Следующий() Цикл
		_Объект = Новый Структура;
		_Объект.Вставить("name", Выборка.name);
		_Объект.Вставить("guid", Выборка.guid);
		_Объект.Вставить("Country", Новый Структура("name,guid", Выборка.CountryName, Выборка.CountryGuid));
		пОтвет.Region.Добавить(_Объект);
	КонецЦикла;
	
КонецФункции

Функция ВыбратьLocality(Locality, пОтвет, пОшибка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Наименование КАК name,
	|	_Таблица.guid,
	|	_Таблица.Country.Наименование КАК CountryName,
	|	_Таблица.Country.guid КАК CountryGuid,
	|	_Таблица.Region.Наименование КАК RegionName,
	|	_Таблица.Region.guid КАК RegionGuid,
	|	_Таблица.District.Наименование КАК DistrictName,
	|	_Таблица.District.guid КАК DistrictGuid
	|ИЗ
	|	Справочник.ВетисLocality КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления
	|//1	И _Таблица.Наименование подобно ""%<имя>%""
	|	И ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");
	
	Если ЗначениеЗаполнено(Locality) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//1", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "<имя>", Locality);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	пОтвет.Вставить("Locality", Новый Массив);
	
	Пока Выборка.Следующий() Цикл
		_Объект = Новый Структура;
		_Объект.Вставить("name", Выборка.name);
		_Объект.Вставить("guid", Выборка.guid);
		_Объект.Вставить("Country", Новый Структура("name,guid", Выборка.CountryName, Выборка.CountryGuid));
		_Объект.Вставить("Region", Новый Структура("name,guid", Выборка.RegionName, Выборка.RegionGuid));
		_Объект.Вставить("District", Новый Структура("name,guid", Выборка.DistrictName, Выборка.DistrictGuid));
		пОтвет.Locality.Добавить(_Объект);
	КонецЦикла;
	
КонецФункции

Функция ВыбратьVetDocument(пПараметры, пОтвет, пОшибка = Ложь)
	
	Если НЕ (ТипЗнч(пПараметры) = Тип("Структура")) Тогда
		пОшибка = "Некорректные входные данные";
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"//оп2ВЫБРАТЬ
	|//оп2	_Таблица.Ссылка
	|//оп2 ПОМЕСТИТЬ ВПолучательПредприятие
	|//оп2ИЗ
	|//оп2	Справочник.ВетисEnterprise КАК _Таблица
	|//оп2ГДЕ
	|//оп2	ИСТИНА
	|//оп2	И (_Таблица.Ссылка.guid = &ПолучательПредприятие
	|//оп2	ИЛИ _Таблица.next.guid = &ПолучательПредприятие)
	|//оп2	И ИСТИНА
	|//оп2;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.uuid,
	//|	_Таблица.Дата,
	//|	_Таблица.Номер,
	//|	_Таблица.НомерВеб,
	|	_Таблица.ДатаТТН,
	|	_Таблица.НомерТТН,
	|	_Таблица.Форма,
	|	_Таблица.Статус,
	|	_Таблица.Отправитель,
	|	_Таблица.ОтправительПредприятие,
	|	_Таблица.Получатель,
	|	_Таблица.ПолучательПредприятие,
	|	_Таблица.ДатаВыработки,
	|	_Таблица.СрокГодности,
	|	_Таблица.СтранаПроисхождения,
	|	_Таблица.ProductItemName,
	|	_Таблица.Количество,
	|	_Таблица.Производители.(
	|		Предприятие КАК Предприятие
	|	) Производители
	|ИЗ
	|	Документ.ВетисВетеринарноСопроводительныйДокумент КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И _Таблица.Проведен
	|//о1	И _Таблица.Ссылка В (&Ссылка)
	|//ос	И _Таблица.Статус = &Статус
	|//оо1	И _Таблица.Отправитель.guid = &Отправитель
	|//оо2	И _Таблица.ОтправительПредприятие.guid = &ОтправительПредприятие
	|//оп1	И _Таблица.Получатель.guid = &Получатель
	|//оп2	И _Таблица.ПолучательПредприятие В (Выбрать Ссылка ИЗ ВПолучательПредприятие)
	|	И ИСТИНА");
	
	Если пПараметры.Свойство("Ссылка") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о1", "");
		Запрос.УстановитьПараметр("Ссылка", пПараметры.Ссылка);
	КонецЕсли;
	
	Если пПараметры.Свойство("Статус") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ос", "");
		Запрос.УстановитьПараметр("Статус", ОбработатьСсылку(пПараметры.Статус));
	КонецЕсли;
	
	Если пПараметры.Свойство("Отправитель") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//оо1", "");
		Запрос.УстановитьПараметр("Отправитель", пПараметры.Отправитель);
	КонецЕсли;
	
	Если пПараметры.Свойство("ОтправительПредприятие") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//оо2", "");
		Запрос.УстановитьПараметр("ОтправительПредприятие", пПараметры.ОтправительПредприятие);
	КонецЕсли;
	
	Если пПараметры.Свойство("Получатель") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//оп1", "");
		Запрос.УстановитьПараметр("Получатель", пПараметры.Получатель);
	КонецЕсли;
	
	Если пПараметры.Свойство("ПолучательПредприятие") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//оп2", "");
		Запрос.УстановитьПараметр("ПолучательПредприятие", пПараметры.ПолучательПредприятие);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	пОтвет.Вставить("VetDocument", Новый Массив);
	
	_Параметры = Неопределено;
	Пока Выборка.Следующий() Цикл
		пОтвет.VetDocument.Добавить(ПолучитьСтруктуруVetDocument(Выборка, _Параметры));
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ВыбратьStockEntry(пПараметры, пОтвет, пОшибка = Ложь)
	
	Если НЕ (ТипЗнч(пПараметры) = Тип("Структура")) Тогда
		пОшибка = "Некорректные входные данные";
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.guid,
	|	_Таблица.Ссылка,
	|	_Таблица.Код,
	|	_Таблица.Наименование,
	|	_Таблица.last,
	|	_Таблица.active,
	|	_Таблица.createDate,
	|	_Таблица.updateDate,
	|	_Таблица.BusinessEntity КАК BusinessEntity,
	|	_Таблица.Enterprise КАК Enterprise,
	|	_Таблица.volume,
	|	_Таблица.productMarking,
	|	_Таблица.ProductItemName,
	|	_Таблица.producerName КАК producerName,
	|	_Таблица.country КАК country,
	|	_Таблица.dateOfProduction,
	|	_Таблица.dateOfProductionFirst,
	|	_Таблица.dateOfProductionSecond,
	|	_Таблица.expiryDate,
	|	_Таблица.expiryDateFirst,
	|	_Таблица.expiryDateSecond,
	|	_Таблица.PackageList.(
	|		КлючСтроки,
	|		level,
	|		packingType КАК packingType,
	|		quantity
	|	),
	|	_Таблица.ProductMarks.(
	|		КлючСвязи,
	|		value,
	|		class
	|	)
	|ИЗ
	|	Справочник.ВетисStockEntry КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И _Таблица.last
	|	И _Таблица.active
	|	И _Таблица.volume > 0
	|	И НЕ _Таблица.status = Значение(Перечисление.ВетисVersionStatus.WITHDRAWN)
	|//о1	И _Таблица.BusinessEntity.guid = &BusinessEntity
	|//о2	И _Таблица.Enterprise.guid = &Enterprise
	|//о3	И _Таблица.Ссылка В (&Ссылка)
	|//о4	И _Таблица.guid В (&guid)
	|//о5	И _Таблица.Код В (&Код)
	|	И ИСТИНА");
	
	Если пПараметры.Свойство("Ссылка") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о3", "");
		Запрос.УстановитьПараметр("Ссылка", пПараметры.Ссылка);
	КонецЕсли;
	
	Если пПараметры.Свойство("guid") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о4", "");
		Запрос.УстановитьПараметр("guid", пПараметры.guid);
	КонецЕсли;
	
	Если пПараметры.Свойство("Код") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о5", "");
		Запрос.УстановитьПараметр("Код", пПараметры.Код);
	КонецЕсли;
	
	Если пПараметры.Свойство("ХС") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о1", "");
		Запрос.УстановитьПараметр("BusinessEntity", пПараметры.ХС);
	КонецЕсли;
	
	Если пПараметры.Свойство("Предприятие") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о2", "");
		Запрос.УстановитьПараметр("Enterprise", пПараметры.Предприятие);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	пОтвет.Вставить("StockEntry", Новый Массив);
	
	_Параметры = Новый Структура;
	Пока Выборка.Следующий() Цикл
		пОтвет.StockEntry.Добавить(ПолучитьСтруктуруStockEntry(Выборка, _Параметры));
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ВыбратьCheckShipmentRegionalization(пПараметры, пОтвет, пОшибка = Ложь)
	
	пОтвет.Вставить("ShipmentRegionalization", Неопределено);
	
	Если НЕ (ТипЗнч(пПараметры) = Тип("Структура")) Тогда
		пОшибка = "Некорректные входные данные";
		Возврат Ложь;
	ИначеЕсли НЕ пПараметры.Свойство("StockEntry") Тогда
		пОшибка = "Некорректные входные данные";
		Возврат Ложь;
	ИначеЕсли НЕ пПараметры.Свойство("shipmentRoute") Тогда
		пОшибка = "Некорректные входные данные";
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_Таблица.SubProduct.guid КАК guid
	|ИЗ
	|	Справочник.ВетисStockEntry КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И _Таблица.last
	|	И _Таблица.active
	|	И _Таблица.guid В(&guid)
	|	И ИСТИНА");
	
	_отбор = Новый Массив;
	Для каждого _Объект Из пПараметры.StockEntry Цикл
		_отбор.Добавить(_Объект.ref);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("guid", _отбор);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_cargoType = Новый Массив;
	Пока Выборка.Следующий() Цикл
		_cargoType.Добавить(ВетисDictionary.SubProduct(Выборка.guid));
	КонецЦикла;
	
	_Индекс = 1;
	_shipmentRoute = ВетисMercuryVetdocument.ShipmentRoute();
	Для каждого _Объект Из пПараметры.shipmentRoute Цикл
		_Location = Неопределено; _Enterprise = Неопределено;
		Если _Объект.Тип = "Справочник.ВетисEnterprise" Тогда
			_Enterprise = ВетисDictionary.Enterprise(_Объект.ref);
		Иначе
			_Location = ВетисDictionary.Location(,ВетисDictionary.Address(, _Объект.Country.ref, _Объект.Region.ref));
		КонецЕсли;
		_shipmentRoute.routePoint.Добавить(ВетисMercuryVetdocument.ShipmentRoutePoint(_Индекс, _Location, _Enterprise));
		_Индекс = _Индекс + 1;
	КонецЦикла;
	
	_Отказ = Ложь;
	
	//_Ответ = ВетисMercuryApplicationsСлой1с.CheckShipmentRegionalization(_StockEntryList, _shipmentRouteList, , _Отказ, пОшибка);
	
	_Ответ = ВетисMercuryApplications.CheckShipmentRegionalization(_cargoType, _shipmentRoute, , _Отказ, пОшибка);
	
	Если _Отказ = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	пОтвет.ShipmentRegionalization = ВетисОбщегоНазначения.ПолучитьСтруктуруXDTO(_Ответ);
	//Для каждого _r13nRouteSection Из пОтвет.ShipmentRegionalization Цикл
	//	Для каждого _appliedR13nRule Из _r13nRouteSection.appliedR13nRule Цикл
	//		Если _appliedR13nRule.decision = "2" Тогда
	//			_cargoTypeList = Новый Массив;
	//			Для каждого _cargoType Из _appliedR13nRule.cargoType Цикл
	//				//_cargoType = ПолучитьСтруктуруОбъекта(ВетисDictionaryСлой1с.SubProduct(_cargoType), Новый Структура("Подробно", Истина));
	//				//_SubProduct = Новый Структура;
	//				//_SubProduct.Вставить("Тип", _cargoType.Тип);
	//				//_SubProduct.Вставить("ref", _cargoType.ref);
	//				//_SubProduct.Вставить("guid", _cargoType.guid);
	//				//_SubProduct.Вставить("name", _cargoType.Наименование);
	//				//_SubProduct.Вставить("code", СокрП(_cargoType.Код));
	//				_cargoTypeList.Добавить(ПолучитьСтруктуруОбъекта(ВетисDictionaryСлой1с.SubProduct(_cargoType)));
	//			КонецЦикла;
	//			_appliedR13nRule.cargoType = _cargoTypeList;
	//			//_appliedR13nRule.cargoType.Очистить();
	//			//Для каждого _cargoType Из _cargoTypeList Цикл
	//			//	_appliedR13nRule.cargoType.Добавить(_cargoType);
	//			//КонецЦикла;
	//			Для каждого _requirement Из _appliedR13nRule.requirement Цикл
	//				Для каждого _conditionGroup Из _requirement.conditionGroup Цикл
	//					_conditionList = Новый Массив;
	//					Для каждого _condition Из _conditionGroup.condition Цикл
	// 							_conditionList.Добавить(ПолучитьСтруктуруОбъекта(ВетисDictionaryСлой1с.RegionalizationCondition(_condition)));
	//					КонецЦикла;
	//					_conditionGroup.condition = _conditionList;
	//				КонецЦикла;
	//			КонецЦикла;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


Функция ПолучитьСтруктуруVetDocument(пДанные, пПараметры)
	
	Если НЕ пПараметры.Свойство("Выгруженные") Тогда
		пПараметры.Вставить("Выгруженные", Новый Массив);
	КонецЕсли;
	
	_Параметры = Новый Структура;
	_Параметры.Вставить("Выгруженные", пПараметры.Выгруженные);
	
	_Объект = Новый Структура;
	_Объект.Вставить("Тип", Метаданные.Документы.ВетисВетеринарноСопроводительныйДокумент.ПолноеИмя());
	_Объект.Вставить("ref", пДанные.uuid);
	_Объект.Вставить("ДатаТТН", пДанные.ДатаТТН);
	_Объект.Вставить("НомерТТН", пДанные.НомерТТН);
	_Объект.Вставить("Форма", ПолучитьСтруктуруОбъекта(пДанные.Форма));
	_Объект.Вставить("Статус", ПолучитьСтруктуруОбъекта(пДанные.Статус));
	_Объект.Вставить("Отправитель", ПолучитьСтруктуруОбъекта(пДанные.Отправитель, _Параметры));
	_Объект.Вставить("Получатель", ПолучитьСтруктуруОбъекта(пДанные.Получатель, _Параметры));
	_Объект.Вставить("ОтправительПредприятие", ПолучитьСтруктуруОбъекта(пДанные.ОтправительПредприятие, _Параметры));
	_Объект.Вставить("ПолучательПредприятие", ПолучитьСтруктуруОбъекта(пДанные.ПолучательПредприятие, _Параметры));
	_Объект.Вставить("Производители", Новый Массив);
	Если ТипЗнч(пДанные.Производители) = Тип("РезультатЗапроса") Тогда
		ВыборкаПр = пДанные.Производители.Выбрать();
		Пока ВыборкаПр.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаПр.Предприятие) Тогда
				_Предприятие = ПолучитьСтруктуруОбъекта(ВыборкаПр.Предприятие, _Параметры);
			Иначе
				_Предприятие = Новый Структура;
			КонецЕсли;
			_Объект.Производители.Добавить(Новый Структура("Предприятие, Наименование", _Предприятие, ВыборкаПр.Наименование));
		КонецЦикла;
	Иначе
		Для каждого ВыборкаПр Из пДанные.Производители Цикл
			Если ЗначениеЗаполнено(ВыборкаПр.Предприятие) Тогда
				_Предприятие = ПолучитьСтруктуруОбъекта(ВыборкаПр.Предприятие, _Параметры);
			Иначе
				_Предприятие = Новый Структура;
			КонецЕсли;
			_Объект.Производители.Добавить(Новый Структура("Предприятие, Наименование", _Предприятие, ВыборкаПр.Наименование));
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(пДанные.СтранаПроисхождения) Тогда
		_Объект.Вставить("СтранаПроисхождения", ПолучитьСтруктуруОбъекта(пДанные.СтранаПроисхождения, _Параметры));
	КонецЕсли;
	_Объект.Вставить("ДатаВыработки", пДанные.ДатаВыработки);
	_Объект.Вставить("СрокГодности", пДанные.СрокГодности);
	_Объект.Вставить("Наименование", пДанные.ProductItemName);
	_Объект.Вставить("Количество", пДанные.Количество);
	
	Возврат _Объект;
	
КонецФункции

Функция ПолучитьСтруктуруStockEntry(пДанные, пПараметры)
	
	Если НЕ пПараметры.Свойство("Выгруженные") Тогда
		пПараметры.Вставить("Выгруженные", Новый Массив);
	КонецЕсли;
	
	_Параметры = Новый Структура;
	_Параметры.Вставить("Выгруженные", пПараметры.Выгруженные);
	
	_Объект = Новый Структура;
	_Объект.Вставить("Тип", Метаданные.Справочники.ВетисStockEntry.ПолноеИмя());
	_Объект.Вставить("Код", пДанные.Код);
	_Объект.Вставить("Наименование", пДанные.Наименование);
	_Объект.Вставить("ref", Строка(пДанные.Ссылка.УникальныйИдентификатор()));
	_Объект.Вставить("guid", пДанные.guid);
	_Объект.Вставить("entryNumber", пДанные.Код);
	_Объект.Вставить("last", пДанные.last);
	_Объект.Вставить("active", пДанные.active);
	_Объект.Вставить("createDate", пДанные.createDate);
	_Объект.Вставить("updateDate", пДанные.updateDate);
	_Объект.Вставить("BusinessEntity", ПолучитьСтруктуруОбъекта(пДанные.BusinessEntity, _Параметры));
	_Объект.Вставить("Enterprise", ПолучитьСтруктуруОбъекта(пДанные.Enterprise, _Параметры));
	_Объект.Вставить("ProductItemName", пДанные.ProductItemName);
	_Объект.Вставить("volume", пДанные.volume);
	_Объект.Вставить("productMarking", пДанные.productMarking);
	_Объект.Вставить("producerName", пДанные.producerName);
	Если ЗначениеЗаполнено(пДанные.country) Тогда
		_Объект.Вставить("country", ПолучитьСтруктуруОбъекта(пДанные.country, _Параметры));
	КонецЕсли;
	_Объект.Вставить("dateOfProduction", пДанные.dateOfProduction);
	_Объект.Вставить("dateOfProductionFirst", пДанные.dateOfProductionFirst);
	_Объект.Вставить("dateOfProductionSecond", пДанные.dateOfProductionSecond);
	_Объект.Вставить("expiryDate", пДанные.expiryDate);
	_Объект.Вставить("expiryDateFirst", пДанные.expiryDateFirst);
	_Объект.Вставить("expiryDateSecond", пДанные.expiryDateSecond);
	_Объект.Вставить("vetDocument", Новый Структура("Тип", Метаданные.Документы.ВетисВетеринарноСопроводительныйДокумент.ПолноеИмя()));
	
	_Объект.Вставить("PackageList", Новый Массив);
	Если ТипЗнч(пДанные.PackageList) = Тип("РезультатЗапроса") Тогда
		ВыборкаТЧ = пДанные.PackageList.Выбрать();
		Пока ВыборкаТЧ.Следующий() Цикл
			_СтрокаСтруктура = Новый Структура;
			_СтрокаСтруктура.Вставить("КлючСтроки", ВыборкаТЧ.КлючСтроки);
			_СтрокаСтруктура.Вставить("level", ПолучитьСтруктуруОбъекта(ВыборкаТЧ.level));
			_СтрокаСтруктура.Вставить("packingType", ПолучитьСтруктуруОбъекта(ВыборкаТЧ.packingType, _Параметры));
			_СтрокаСтруктура.Вставить("quantity", ВыборкаТЧ.quantity);
			_Объект.PackageList.Добавить(_СтрокаСтруктура);
		КонецЦикла;
	Иначе
		Для каждого ВыборкаТЧ Из пДанные.PackageList Цикл
			_СтрокаСтруктура = Новый Структура;
 			_СтрокаСтруктура.Вставить("КлючСтроки", ВыборкаТЧ.КлючСтроки);
			_СтрокаСтруктура.Вставить("level", ПолучитьСтруктуруОбъекта(ВыборкаТЧ.level));
			_СтрокаСтруктура.Вставить("packingType", ПолучитьСтруктуруОбъекта(ВыборкаТЧ.packingType, _Параметры));
			_СтрокаСтруктура.Вставить("quantity", ВыборкаТЧ.quantity);
			_Объект.PackageList.Добавить(_СтрокаСтруктура);
		КонецЦикла;
	КонецЕсли;
	
	_Объект.Вставить("ProductMarks", Новый Массив);
	Если ТипЗнч(пДанные.ProductMarks) = Тип("РезультатЗапроса") Тогда
		ВыборкаТЧ = пДанные.ProductMarks.Выбрать();
		Пока ВыборкаТЧ.Следующий() Цикл
			_СтрокаСтруктура = Новый Структура;
			_СтрокаСтруктура.Вставить("КлючСвязи", ВыборкаТЧ.КлючСвязи);
			_СтрокаСтруктура.Вставить("class", ПолучитьСтруктуруОбъекта(ВыборкаТЧ.class));
			_СтрокаСтруктура.Вставить("value", ВыборкаТЧ.value);
			_Объект.ProductMarks.Добавить(_СтрокаСтруктура);
		КонецЦикла;
	Иначе
		Для каждого ВыборкаТЧ Из пДанные.ProductMarks Цикл
			_СтрокаСтруктура = Новый Структура;
			_СтрокаСтруктура.Вставить("КлючСвязи", ВыборкаТЧ.КлючСвязи);
			_СтрокаСтруктура.Вставить("class", ПолучитьСтруктуруОбъекта(ВыборкаТЧ.class));
			_СтрокаСтруктура.Вставить("value", ВыборкаТЧ.value);
			_Объект.ProductMarks.Добавить(_СтрокаСтруктура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция ПолучитьСтруктуруТранспортнаяПартия(пОбъект, пПараметры)
	
	Если НЕ пПараметры.Свойство("Выгруженные") Тогда
		пПараметры.Вставить("Выгруженные", Новый Массив);
	КонецЕсли;
	
	_Параметры = Новый Структура;
	_Параметры.Вставить("Выгруженные", пПараметры.Выгруженные);
	
	Если ТипЗнч(пОбъект) = Тип("ДокументОбъект.ВетисТранспортнаяПартия") Тогда
		_Объект = пОбъект;
		_ref = Строка(пОбъект.Ссылка.УникальныйИдентификатор());
	ИначеЕсли ТипЗнч(пОбъект) = Тип("ДокументСсылка.ВетисТранспортнаяПартия") Тогда
		_Объект = пОбъект.ПолучитьОбъект();
		_ref = Строка(пОбъект.УникальныйИдентификатор());
	Иначе
		_Объект = ПолучитьОбъект(Документы.ВетисТранспортнаяПартия, пОбъект);
		_ref = пОбъект;
	КонецЕсли;
	
	_ОбъектСтруктура = Новый Структура;
	_ОбъектСтруктура.Вставить("Тип", Метаданные.Документы.ВетисТранспортнаяПартия.ПолноеИмя());
	_ОбъектСтруктура.Вставить("ref", _ref);
	_ОбъектСтруктура.Вставить("Проведен", _Объект.Проведен);
	_ОбъектСтруктура.Вставить("ПометкаУдаления", _Объект.ПометкаУдаления);
	_ОбъектСтруктура.Вставить("Партии", Новый Массив);
	
	Если _Объект = Неопределено Тогда
		_ОбъектСтруктура.Вставить("Статус", ПолучитьСтруктуруОбъекта(ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.ПустаяСсылка")));
		_ОбъектСтруктура.Вставить("СтатусТранзакции", ПолучитьСтруктуруОбъекта(ПредопределенноеЗначение("Перечисление.ВетисСтатусТранзакции.ПустаяСсылка")));
	Иначе
		_ОбъектСтруктура.Вставить("Статус", ПолучитьСтруктуруОбъекта(_Объект.Статус));
		_ОбъектСтруктура.Вставить("СтатусТранзакции", ПолучитьСтруктуруОбъекта(_Объект.СтатусТранзакции));
		_ОбъектСтруктура.Вставить("Партии", Новый Массив);
		Для каждого _ПартииСтрока Из _Объект.Партии Цикл
			
			_ПартииСтруктура = Новый Структура;
			_ПартииСтруктура.Вставить("НомерСтроки", _ПартииСтрока.НомерСтроки);
			_ПартииСтруктура.Вставить("Количество", _ПартииСтрока.Количество);
			_ПартииСтруктура.Вставить("Наименование", _ПартииСтрока.ProductItemName);
			_ПартииСтруктура.Вставить("Статус", ПолучитьСтруктуруОбъекта(_ПартииСтрока.Статус));
			_ПартииСтруктура.Вставить("StockEntry", ПолучитьСтруктуруОбъекта(_ПартииСтрока.StockEntry, _Параметры));
			_ПартииСтруктура.Вставить("ВСД", ПолучитьСтруктуруОбъекта(_ПартииСтрока.ВСД, _Параметры));
			
			_ОбъектСтруктура.Партии.Добавить(_ПартииСтруктура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат _ОбъектСтруктура;
	
КонецФункции

Функция ПолучитьСтруктуруBusinessEntity(пОбъект)
	
	_Структура = ПолучитьСтруктуруОбъекта(Ветис.Соответствие_ПолучитьСсылку(пОбъект, "Справочник.ВетисBusinessEntity", , Истина, Истина), Новый Структура("Подробно", Истина));
	
	_Результат = Новый Структура("Тип,ref,guid,last,active,createDate,updateDate,name,fio,fullName,inn,kpp,ogrn,type,incorporationForm,addressView");
	
	ЗаполнитьЗначенияСвойств(_Результат, _Структура);
	
	_Результат.Вставить("Наименование", СокрЛП(?(ПустаяСтрока(_Структура.name), ?(ПустаяСтрока(_Структура.fullName), _Структура.fio, _Структура.fullName), _Структура.name)));
	_Результат.Вставить("createDate", пОбъект.createDate);
	_Результат.Вставить("updateDate", пОбъект.updateDate);
	
	Возврат _Результат;
	
КонецФункции

Функция ПолучитьСтруктуруEnterprise(пОбъект)
	
	_Структура = ПолучитьСтруктуруОбъекта(Ветис.Соответствие_ПолучитьСсылку(пОбъект, "Справочник.ВетисEnterprise", , Истина, Истина), Новый Структура("Подробно", Истина));
	
	_Результат = Новый Структура("Тип,ref,guid,last,active,createDate,updateDate,next,name,addressView,enterpriseNumber,numberList");
	
	ЗаполнитьЗначенияСвойств(_Результат, _Структура);
	
	_Результат.Вставить("Наименование", _Структура.name);
	_Результат.Вставить("createDate", пОбъект.createDate);
	_Результат.Вставить("updateDate", пОбъект.updateDate);
	
	Возврат _Результат;
	
КонецФункции


Функция ОтветСервер(пСообщение, пОтказ = Истина)
	
	_Ответ = Новый Структура("Отказ,Сообщение", пОтказ, пСообщение);
	
	_Ответ = Новый ХранилищеЗначения(_Ответ, Новый СжатиеДанных(9));
	
	Возврат Сериализовать(_Ответ);
	
КонецФункции

Функция ПолучитьСтруктуруОбъекта(пОбъект, пПараметры = Неопределено)
	
	Возврат ВетисОбменДанными.ПолучитьСтруктуруОбъекта(пОбъект, пПараметры);
	
КонецФункции

Функция ОбработатьСсылку(пОбъект, пПараметры = Неопределено)
	
	Возврат ВетисОбменДанными.ОбработатьСсылку(пОбъект, пПараметры);
	
КонецФункции

Функция ПолучитьОбъект(пМенеджер, пУИД, пСоздавать = Истина)
	
	Возврат ВетисОбменДанными.ПолучитьОбъект(пМенеджер, пУИД, пСоздавать);
	
КонецФункции

Функция Сериализовать(пОбъект, пЗапись = Неопределено)
	
	Возврат ВетисОбменДанными.Сериализовать(пОбъект);

КонецФункции

Функция Десериализовать(пТекст)
	
	Возврат ВетисОбменДанными.Десериализовать(пТекст);
	
КонецФункции

