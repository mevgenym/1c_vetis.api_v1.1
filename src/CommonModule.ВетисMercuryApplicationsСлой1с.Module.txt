
Процедура MergeOperation() Экспорт
	
КонецПроцедуры

Функция ResolveDiscrepancy(enterpriseGuid, stockEntryList, АктПричина = Неопределено, АктОписание = Неопределено, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_enterprise = ВетисDictionary.Enterprise(enterpriseGuid);
	
	_inventoryDate = ТекущаяДата();
	
	_responsible = ВетисMercuryVetdocument.User(ВетисПовтИсп.ТекущийПользователь_Логин());
	
	Для каждого _stockEntry Из stockEntryList Цикл
		Если _stockEntry.Свойства().Получить("uuid") = Неопределено ИЛИ НЕ ЗначениеЗаполнено(_stockEntry.uuid) Тогда
			_Результат = ВетисMercuryApplications.getStockEntryByGuid(_stockEntry.guid, enterpriseGuid, issuerId, пОтказ, пОшибка);
			Если пОтказ = Истина Тогда
				Возврат Неопределено;
			КонецЕсли;
			_stockEntry.uuid = _Результат.uuid;
		КонецЕсли;
	КонецЦикла;
	
	_stockDiscrepancy = ВетисMercuryVetdocument.StockDiscrepancy(stockEntryList);
	
	_stockDiscrepancy.id = "inv1";
	
	//2018-04-17
	//переданные сведения акта не отображаются через веб
	//т.е. отображаются, видимо, автоматически сгенерированные сервисом - номер, дата, причина
	_discrepancyReport = ВетисMercuryVetdocument.DiscrepancyReport(,,,АктПричина,АктОписание);
	
	_discrepancyReport.for = "inv1";
	
	//по каждой позиции в маркировке добавляется запись с классом ProductMarkingClass.UNDEFINED
	//и сборной записью со всех маркировок по тексту
	//http://vetrf.ru/vetrf-forum/posts/list/7811.page
	
	_Response = ВетисMercuryApplications.resolveDiscrepancy(_enterprise, _inventoryDate, _responsible, _stockDiscrepancy, _discrepancyReport, issuerId, пОтказ, пОшибка);
	
	Возврат _Response;
	
КонецФункции

Функция IncomingOperation(пОбъект, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Перем _discrepancyReport, _returnedDelivery;
	
	_Версия20 = Ветис.Версия_2_0();
	
	_Ответ = Новый Структура;
	
	_Статус = пОбъект.Статус;
	
	Если НЕ (Ложь
		ИЛИ _Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.ПустаяСсылка")
		ИЛИ _Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен")) Тогда
		Возврат _Ответ;
	КонецЕсли;
	
	Если ТипЗнч(пОбъект) = Тип("ДокументСсылка.ВетисВетеринарноСопроводительныйДокумент") Тогда
		_Объект = ВетисОбщегоНазначения.ПолучитьСтруктуруСсылки(пОбъект);
	ИначеЕсли ТипЗнч(пОбъект) = Тип("ДокументОбъект.ВетисВетеринарноСопроводительныйДокумент") Тогда
		_Объект = ВетисОбщегоНазначения.ПолучитьСтруктуруОбъекта(пОбъект);
	ИначеЕсли ТипЗнч(пОбъект) = Тип("Структура") Тогда
		_Объект = пОбъект;
	Иначе
		пОтказ = Истина;
		пОшибка = "Неправильный тип входных данных";
		Возврат _Ответ;
	КонецЕсли;
	
	_ВозвратДата = _Объект.Дата;
	
	_Отправитель = ВетисDictionaryСлой1с.BusinessEntity(_Объект.Отправитель);
	_Получатель = ВетисDictionaryСлой1с.BusinessEntity(_Объект.Получатель);
	
	_ОтправительПредприятие = ВетисDictionaryСлой1с.Enterprise(_Объект.ОтправительПредприятие);
	_ПолучательПредприятие = ВетисDictionaryСлой1с.Enterprise(_Объект.ПолучательПредприятие);
	
	Для каждого _ТоварыСтрока Из _Объект.Товары Цикл
		
		Если _ТоварыСтрока.Свойство("Статус") И ЗначениеЗаполнено(_ТоварыСтрока.Статус) И НЕ _ТоварыСтрока.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен Тогда
			Продолжить;
		КонецЕсли;
		
		_ЕстьСвойствоВозврат = _ТоварыСтрока.Свойство("Возврат");
		
		Если _ТоварыСтрока.Свойство("ВСД") Тогда
			_всд = _ТоварыСтрока.ВСД;
		Иначе
			_всд = _Объект;
		КонецЕсли;
		
		Если _Объект.ТТН.Количество() = 0 Тогда
			_ттн = _всд.ТТН[0];
		Иначе
			_ттн = _Объект.ТТН[0];
		КонецЕсли;
		
		_пар = Новый Структура("Товары,Упаковка,Маркировка,Производители,ИДПартии",Новый Массив,Новый Массив,Новый Массив,_всд.Производители,_всд.ИДПартии);
		
		_пар.Товары.Добавить(_ТоварыСтрока);
		
		Для каждого _УпаковкаСтрока Из _Объект.Упаковка Цикл
			Если _УпаковкаСтрока.КлючСвязи = _ТоварыСтрока.КлючСтроки Тогда
				_пар.Упаковка.Добавить(_УпаковкаСтрока);
				Для каждого _МаркировкаСтрока Из _Объект.Маркировка Цикл
					Если _МаркировкаСтрока.КлючСвязи = _УпаковкаСтрока.КлючСтроки Тогда
						_пар.Маркировка.Добавить(_МаркировкаСтрока);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если _Версия20 Тогда
			_VetDocument = ВетисMercuryVetdocument.VetDocument();
			
			Если ЗначениеЗаполнено(_всд.uuid) Тогда
				_VetDocument.uuid = _всд.uuid;
			Иначе
				ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_VetDocument, _всд);
				Если _VetDocument.statusChange.Количество() = 0 Тогда
					_VetDocument.statusChange.Добавить(ВетисMercuryVetdocument.VetDocumentStatusChange(
						ВетисКонстанты.VetDocumentStatus_CONFIRMED(),
						ВетисMercuryVetdocument.User(, ВетисПовтИсп.ТекущийПользователь_Имя(), ВетисПовтИсп.ТекущийПользователь_Должность()),
						_Объект.Дата
						));
				КонецЕсли;
			КонецЕсли;
			
			_waybill = Неопределено;
			_brocker = Неопределено;
			_TransportInfo = Неопределено;
			_TransportationStorageType = Неопределено;
			Если НЕ _ОтправительПредприятие = _ПолучательПредприятие Тогда
				_waybill = ВетисMercuryVetdocument.Waybill();
				Если ЗначениеЗаполнено(_ттн.Номер) И ЗначениеЗаполнено(_ттн.Дата) И ЗначениеЗаполнено(_ттн.Тип) Тогда
					_waybill.issueSeries   = _ттн.Серия;
					_waybill.issueNumber   = _ттн.Номер;
					_waybill.issueDate     = _ттн.Дата;
					_waybill.type          = ВетисDictionaryСлой1с.DocumentType(_ттн.Тип);
				КонецЕсли;
				_brocker = ВетисDictionary.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_ттн.Посредник));
				_TransportInfo = ВетисMercuryVetdocumentСлой1с.TransportInfo(_ттн.ТипТранспорта, _ттн.НомерТранспорта, _ттн.НомерПрицепа, _ттн.НомерКонтейнера);
				_TransportationStorageType = ВетисDictionaryСлой1с.TransportationStorageType(_ттн.СпособХранения);
			КонецЕсли;
			
			_delivery = ВетисMercuryVetdocument.Delivery(
				ВетисDictionary.BusinessMember(_Отправитель, _ОтправительПредприятие),
				ВетисDictionary.BusinessMember(_Получатель, _ПолучательПредприятие),
				ВетисMercuryVetdocumentСлой1с.BatchКонвертировать(_пар, ВетисMercuryVetdocument.Consignment()),
				ВетисMercuryVetdocument.ConsignmentDocumentList(_waybill, _vetDocument),
				_brocker,
				_TransportInfo,
				_TransportationStorageType);
		Иначе
			_VetDocument = ВетисMercuryVetdocument.VetDocument();
			
			Если ЗначениеЗаполнено(_всд.uuid) Тогда
				_VetDocument.uuid = _всд.uuid;
			Иначе
				ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_VetDocument, _всд);
			КонецЕсли;
			
			_waybill = ВетисMercuryVetdocument.Waybill();
			_waybill.issueSeries   = _ттн.Серия;
			_waybill.issueNumber   = _ттн.Номер;
			_waybill.issueDate     = _ттн.Дата;
			_waybill.type          = ВетисDictionaryСлой1с.DocumentType(_ттн.Тип);
			_waybill.broker        = ВетисDictionaryСлой1с.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_ттн.Посредник));
			_waybill.transportInfo = ВетисMercuryVetdocumentСлой1с.TransportInfo(_ттн.ТипТранспорта, _ттн.НомерТранспорта, _ттн.НомерПрицепа, _ттн.НомерКонтейнера);
			_waybill.transportStorageType = ВетисDictionaryСлой1с.TransportationStorageType(_ттн.СпособХранения);
			
			_delivery = ВетисMercuryVetdocument.Delivery(
				ВетисDictionary.BusinessMember(_Отправитель, _ОтправительПредприятие),
				ВетисDictionary.BusinessMember(_Получатель, _ПолучательПредприятие),
				ВетисMercuryVetdocumentСлой1с.BatchКонвертировать(_пар, ВетисMercuryVetdocument.Consignment()),
				ВетисMercuryVetdocument.ConsignmentDocumentList(_waybill, _vetDocument));
		КонецЕсли;
		
		_всдСтрокаСЖ = _всд.Товары[0];
		_всдСтрокаРО = _всд.РезультатыОсмотра[0];
		
		_КоличествоФакт     = _ТоварыСтрока.Количество + ?(_ЕстьСвойствоВозврат И _ТоварыСтрока.Возврат, _ТоварыСтрока.КоличествоВозврат, 0);
		
		_КоличествоМестФакт = 0;//общее количество мест (предположим что оно так считается в сервисе)
		Для каждого _УпаковкаСтрока Из _Объект.Упаковка Цикл
			Если _УпаковкаСтрока.КлючСвязи = _ТоварыСтрока.КлючСтроки Тогда
				_КоличествоМестФакт = _КоличествоМестФакт + _УпаковкаСтрока.Количество + ?(_ЕстьСвойствоВозврат И _ТоварыСтрока.Возврат, _УпаковкаСтрока.КоличествоВозврат, 0);
			КонецЕсли;
		КонецЦикла;
		
		_всдСтрокаСЖКоличествоМест = 0;
		Для каждого _УпаковкаСтрока Из _всд.Упаковка Цикл
			Если _УпаковкаСтрока.КлючСвязи = _ТоварыСтрока.КлючСтроки Тогда
				_всдСтрокаСЖКоличествоМест = _всдСтрокаСЖКоличествоМест + _УпаковкаСтрока.Количество;
			КонецЕсли;
		КонецЦикла;
		
		_Отклонение     = Процент(_КоличествоФакт, _всдСтрокаСЖ.Количество);
		_ОтклонениеМест = Процент(_КоличествоМестФакт, _всдСтрокаСЖКоличествоМест);
		
		_РезультатПриема = Перечисления.ВетисDeliveryInspectionResult[?(_Отклонение > 5 ИЛИ _ОтклонениеМест > 10, "MISMATCH", "CORRESPONDS")];
		
		_РешениеОПриеме = Перечисления.ВетисDeliveryDecision[?(_ЕстьСвойствоВозврат И _ТоварыСтрока.Возврат, ?(_ТоварыСтрока.Количество = 0, "RETURN_ALL", "PARTIALLY"), "ACCEPT_ALL")];
		
		Если _ТоварыСтрока.Свойство("РезультатПриема") Тогда
			_ТоварыСтрока.РезультатПриема = _РезультатПриема;
			_ТоварыСтрока.РезультатВетКонтроля = _РезультатПриема;
			_ТоварыСтрока.РешениеОПриеме = _РешениеОПриеме;
		КонецЕсли;
		
		_deliveryFacts = ВетисMercuryVetdocument.DeliveryFactList(
		  ВетисDictionaryСлой1с.DocumentNature(Перечисления.ВетисDocumentNature[?(ЗначениеЗаполнено(_всд.Статус), "ELECTRONIC", "PAPER")]),
		  ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(_РезультатПриема)),
		  ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(_РезультатПриема)),
		  ВетисMercuryVetdocumentСлой1с.DeliveryDecision(_РешениеОПриеме));
		
		_reason = "";
		_description = "";
		
		//MERC14259	Объем груза в запросе отличается от указанного в ветеринарно-сопроводительном документе более чем на 5% без указания причины в акте несоответствия.
		Если _Отклонение > 5 Тогда
			_КоличествоРазница = Макс(_КоличествоФакт - _всдСтрокаСЖ.Количество, _всдСтрокаСЖ.Количество - _КоличествоФакт);
			_КоличествоСтрока  = ?(_КоличествоФакт > _всдСтрокаСЖ.Количество, "больше", "меньше");
			_reason = _reason + "продукции " + _КоличествоСтрока + " на " + _КоличествоРазница + " кг";
			_description = _description + _всдСтрокаСЖ.Количество + " кг, прибыло " + _КоличествоФакт + " кг";
		КонецЕсли;
		
		//MERC14260	Количество упаковки в запросе отличается от указанного в ветеринарно-сопроводительном документе более чем на 10% без указания причины в акте несоответствия.
		Если _ОтклонениеМест > 10 Тогда
			_КоличествоРазница = Макс(_КоличествоМестФакт - _всдСтрокаСЖКоличествоМест, _всдСтрокаСЖКоличествоМест - _КоличествоМестФакт);
			_КоличествоСтрока  = ?(_КоличествоМестФакт > _всдСтрокаСЖКоличествоМест, "больше", "меньше");
			_reason = _reason + ?(_reason="", "", ", ") + "упаковок " + _КоличествоСтрока + " на " + _КоличествоРазница + " ед";
			_description = _description + ?(_description="", "", ", ") + _всдСтрокаСЖКоличествоМест + " ед, прибыло " + _КоличествоМестФакт + " ед";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(_reason) Тогда
			_discrepancyReport = ВетисMercuryVetdocument.DiscrepancyReport(,,
				_ВозвратДата,
				"Количество " + _reason + ".",
				"В ВСД заявлено " + _description + ".");
		КонецЕсли;
		
		Если _ТоварыСтрока.Свойство("АктПричина") Тогда
			_ТоварыСтрока.АктПричина = _reason;
			_ТоварыСтрока.АктОписание = _description;
		КонецЕсли;
		
		Если _ТоварыСтрока.Свойство("Возврат") И _ТоварыСтрока.Возврат = Истина Тогда
			Если _Версия20 Тогда
				_vetDocument = ВетисMercuryVetdocument.VetDocument();
				_vetDocument.issueDate      = Ветис.ВремяСервиса(_ВозвратДата);
				_VetDocument.authentication = ВетисMercuryVetdocument.VeterinaryAuthentication(
					ВетисDictionary.Purpose(ВетисDictionaryСлой1с.Purpose(Ветис.Настройки_ВСД_НазначениеГрузаНаВозврат())),
					_ТоварыСтрока.ВозвратКонтрольГосВетврачем,
					ВетисDictionaryСлой1с.ResearchResult(_ТоварыСтрока.ВозвратВетсанэкспертиза),
					_ТоварыСтрока.ВозвратБлагополучиеМестности,
					_ТоварыСтрока.ВозвратОсобыеОтметки,
					ВетисMercuryVetdocument.RegionalizationClause(ВетисDictionary.RegionalizationCondition(ВетисDictionaryСлой1с.RegionalizationCondition(_ТоварыСтрока.ВозвратУсловияПеремещения)))
				);
				
				_waybill = ВетисMercuryVetdocument.Waybill();
				_waybill.issueDate     = _ВозвратДата;
				_waybill.type          = ВетисDictionaryСлой1с.DocumentType(_ттн.Тип);
				
				//сделать: дополнить количеством коробок на возврат, пока из входящей просто копия
				_Consignment = ВетисMercuryVetdocumentСлой1с.BatchКонвертировать(_пар, ВетисMercuryVetdocument.Consignment());
				_Consignment.volume = _ТоварыСтрока.КоличествоВозврат;
				
				_returnedDelivery = ВетисMercuryVetdocument.Delivery(
					ВетисDictionary.BusinessMember(_Получатель, _ПолучательПредприятие),
					ВетисDictionary.BusinessMember(_Отправитель, _ОтправительПредприятие),
					_Consignment,
					ВетисMercuryVetdocument.ConsignmentDocumentList(_waybill, _vetDocument),
					ВетисDictionary.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_ттн.Посредник)),//пока тот же который привез
					ВетисMercuryVetdocumentСлой1с.TransportInfo(_ттн.ТипТранспорта, _ттн.НомерТранспорта, _ттн.НомерПрицепа, _ттн.НомерКонтейнера),//пока тот же который привез
					ВетисDictionaryСлой1с.TransportationStorageType(_ттн.СпособХранения)//пока тот же который привез
					);
			Иначе
				_vetDocument = ВетисMercuryVetdocument.VetDocument();
				_vetDocument.issueDate          = Ветис.ВремяСервиса(_ВозвратДата);
				_vetDocument.purpose            = ВетисDictionary.Purpose(ВетисDictionaryСлой1с.Purpose(Ветис.Настройки_ВСД_НазначениеГрузаНаВозврат()));
				_vetDocument.cargoInspected     = _ТоварыСтрока.ВозвратКонтрольГосВетврачем;
				_vetDocument.cargoExpertized    = _ТоварыСтрока.ВозвратВетсанэкспертиза;
				_vetDocument.confirmedDate      = Ветис.ВремяСервиса(_ВозвратДата);// xs:dateTime
				_vetDocument.locationProsperity = _ТоварыСтрока.ВозвратБлагополучиеМестности;
				_vetDocument.specialMarks       = _ТоварыСтрока.ВозвратОсобыеОтметки;
				
				_waybill = ВетисMercuryVetdocument.Waybill();
				_waybill.issueDate     = _ВозвратДата;
				_waybill.type          = ВетисDictionaryСлой1с.DocumentType(_ттн.Тип);
				_waybill.broker        = ВетисDictionary.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_ттн.Посредник));
				_waybill.transportInfo = ВетисMercuryVetdocumentСлой1с.TransportInfo(_ттн.ТипТранспорта, _ттн.НомерТранспорта, _ттн.НомерПрицепа, _ттн.НомерКонтейнера);
				_waybill.transportStorageType = ВетисDictionaryСлой1с.TransportationStorageType(_ттн.СпособХранения);
				
				//сделать: дополнить количеством коробок на возврат, пока из входящей просто копия
				_Consignment = ВетисMercuryVetdocumentСлой1с.BatchКонвертировать(_пар, ВетисMercuryVetdocument.Consignment());
				_Consignment.volume = _ТоварыСтрока.КоличествоВозврат;
				
				_returnedDelivery = ВетисMercuryVetdocument.Delivery(
					ВетисDictionary.BusinessMember(_Получатель, _ПолучательПредприятие),
					ВетисDictionary.BusinessMember(_Отправитель, _ОтправительПредприятие),
					_Consignment,
					ВетисMercuryVetdocument.ConsignmentDocumentList(_waybill, _VetDocument)
				);
			КонецЕсли;
		КонецЕсли;
		
		_Ответ = ВетисMercuryApplications.processIncomingConsignment(_delivery, _deliveryFacts, _discrepancyReport, _returnedDelivery, _Получатель, пОтказ, пОшибка);
		
		_Ссылка = ?(_Объект.Свойство("Ссылка"), _Объект.Ссылка, Неопределено);
		
		Ветис.ЖурналОпераций_Добавить(_Ответ.ТекстЗапроса, "processIncomingConsignment", "Запрос", _Объект.ПолучательПредприятие, _Объект.Получатель, _Ссылка);
		Ветис.ЖурналОпераций_Добавить(_Ответ.ТекстЗапросаЗаявки, "processIncomingConsignment", "Заявка", _Объект.ПолучательПредприятие, _Объект.Получатель, _Ссылка);
		
		Если пОтказ = Истина Тогда
			Ветис.ЖурналОпераций_Добавить(_Ответ.ТекстОшибки, "processIncomingConsignment", "Запрос", _Объект.ПолучательПредприятие, _Объект.Получатель, _Ссылка);
			Возврат Неопределено;
		КонецЕсли;
		
		Ветис.ЖурналОпераций_Добавить(_Ответ.ТекстОтвета, "processIncomingConsignment", "Ответ", _Объект.ПолучательПредприятие, _Объект.Получатель, _Ссылка);
		
		пОтказ = Ложь;
		пОшибка = "";
		
		_Response = _Ответ.Response;
		
		//сделать: обработать stockEntry
		
		//может быть гашение возвратных входящих ВСД
		//видимо, может быть оформлен возврат на возрат, т.е. в ответе будет два возвратных
		//входящий электронный можно найти только по типу TRANSPORT или по uuid равно входящему
		//входящий бумажный можно только по типу TRANSPORT
		//входящий возвратный надо искать по uuid
		//исходящий возвртаный можно по типу RETURNABLE и uuid не равно входящему
		Для каждого _vetDocument Из _Response.vetDocument Цикл
			//входящий электронный или бумажный
			Если ?(_Версия20, _vetDocument.vetDType, _vetDocument.type) = ВетисКонстанты.VetDocumentType_TRANSPORT() Тогда
				
				_всд.uuid = _vetDocument.uuid;
				_всд.Статус = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(?(_Версия20, _vetDocument.vetDStatus, _vetDocument.status));
				
				_всд.statusChange.Очистить();
				Если _Версия20 Тогда
					Для каждого _statusChange Из _vetDocument.statusChange Цикл
						_строка = Новый Структура;
						_строка.Вставить("status",          ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_statusChange.status));
						_строка.Вставить("specifiedPerson", ВетисMercuryVetdocumentСлой1с.User(_statusChange.specifiedPerson));
						_строка.Вставить("post",            ?(_statusChange.specifiedPerson = Неопределено, "", _statusChange.specifiedPerson.post));
						_строка.Вставить("fio",             Строка(_строка.specifiedPerson));
						_строка.Вставить("actualDateTime",  Ветис.ВремяМестное(_statusChange.actualDateTime));
						_строка.Вставить("reason",          _statusChange.reason);
						_всд.statusChange.Добавить(_строка);
					КонецЦикла;
				КонецЕсли;
				
				//Если ТипЗнч(пОбъект) = Тип("ДокументСсылка.ВетисВетеринарноСопроводительныйДокумент")
				//	ИЛИ ТипЗнч(пОбъект) = Тип("ДокументОбъект.ВетисВетеринарноСопроводительныйДокумент") Тогда
				//	_всд.ДополнительныеСвойства.Вставить("Загрузка");
				//	Попытка
				//		_всд.Записать(РежимЗаписиДокумента.Проведение);
				//	Исключение
				//		пОтказ = Истина;
				//		пОшибка = пОшибка + ?(пОшибка = "", "", Символы.ПС) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				//		Продолжить;
				//	КонецПопытки;
				//КонецЕсли;
				
			//возвратный входящий либо исходящий
			ИначеЕсли ?(_Версия20, _vetDocument.vetDType, _vetDocument.type) = ВетисКонстанты.VetDocumentType_RETURNABLE() Тогда
				
				//входящий
				Если _всд.uuid = _vetDocument.uuid Тогда
					
					_всд.Статус = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(?(_Версия20, _vetDocument.vetDStatus, _vetDocument.status));
					
					_всд.statusChange.Очистить();
					Если _Версия20 Тогда
						Для каждого _statusChange Из _vetDocument.statusChange Цикл
							_строка = Новый Структура;
							_строка.Вставить("status",          ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_statusChange.status));
							_строка.Вставить("specifiedPerson", ВетисMercuryVetdocumentСлой1с.User(_statusChange.specifiedPerson));
							_строка.Вставить("post",            ?(_statusChange.specifiedPerson = Неопределено, "", _statusChange.specifiedPerson.post));
							_строка.Вставить("fio",             Строка(_строка.specifiedPerson));
							_строка.Вставить("actualDateTime",  Ветис.ВремяМестное(_statusChange.actualDateTime));
							_строка.Вставить("reason",          _statusChange.reason);
							_всд.statusChange.Добавить(_строка);
						КонецЦикла;
					КонецЕсли;
			
				//исходящий
				Иначе
					Если _ТоварыСтрока.Свойство("ВозвратныйВСД") Тогда
						
						Если ЗначениеЗаполнено(_ТоварыСтрока.ВозвратныйВСД) Тогда
							_возвратный = _ТоварыСтрока.ВозвратныйВСД.ПолучитьОбъект();
						Иначе
							_возвратный = Документы.ВетисВетеринарноСопроводительныйДокумент.СоздатьДокумент();
							_возвратный.УстановитьСсылкуНового(Документы.ВетисВетеринарноСопроводительныйДокумент.ПолучитьСсылку(Новый УникальныйИдентификатор(_vetDocument.uuid)));
							_возвратный.Дата = _ВозвратДата;
						КонецЕсли;
						
						ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_возвратный, _vetDocument);
						
						_возвратный.ДополнительныеСвойства.Вставить("Загрузка");
						
						Попытка
							_возвратный.Записать(РежимЗаписиДокумента.Проведение);
						Исключение
							пОтказ = Истина;
							пОшибка = пОшибка + ?(пОшибка = "", "", Символы.ПС) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							Продолжить;
						КонецПопытки;
						
						_ТоварыСтрока.ВозвратныйВСД = _возвратный.Ссылка;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		_Ответ.Вставить("StockEntry", Новый Массив);
		Для каждого _stockEntry Из _Response.StockEntry Цикл
			
			_se = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисStockEntry, _stockEntry.guid);
			_se.BusinessEntity = _Объект.Получатель;
			_se.Enterprise = _Объект.ПолучательПредприятие;
			_se.Заполнить(_stockEntry);
			
			Попытка
				_se.Записать();
				
				_Ответ.StockEntry.Добавить(_se.Ссылка);
			Исключение
				пОтказ = Истина;
				пОшибка = пОшибка + ?(пОшибка = "", "", Символы.ПС) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат _Ответ;
	
КонецФункции

Функция TransportOperation(пОбъектСсылка, пОтказ = Ложь, пОшибка = "", пСписокВСД = Неопределено) Экспорт
	
	_Версия20 = Ветис.Версия_2_0();
	
	_Ответ = Новый Структура;
	
	_СтатусТранзакции = пОбъектСсылка.СтатусТранзакции;
	Если _СтатусТранзакции = ПредопределенноеЗначение("Перечисление.ВетисСтатусТранзакции.Отправлена")
		ИЛИ _СтатусТранзакции = ПредопределенноеЗначение("Перечисление.ВетисСтатусТранзакции.Аннулирована") Тогда
		Возврат _Ответ;
	КонецЕсли;
	
	Если ТипЗнч(пОбъектСсылка) = Тип("ДокументОбъект.ВетисТранспортнаяПартия") Тогда
		_Объект = пОбъектСсылка;
	Иначе
		_Объект = пОбъектСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	_НачалоПериода = ТекущаяДата();
	
	_Отладка = Ветис.РазрешенаОтладка();
	
	_СтрокаВСД = _Объект.ВСД[0];
	_ттн = _Объект.ТТН[0];
	
	_Отправитель = ВетисDictionaryСлой1с.BusinessEntity(_Объект.Отправитель);
	_Получатель = ВетисDictionaryСлой1с.BusinessEntity(_Объект.Получатель);
	
	_ОтправительПредприятие = ВетисDictionaryСлой1с.Enterprise(_Объект.ОтправительПредприятие);
	_ПолучательПредприятие = ВетисDictionaryСлой1с.Enterprise(_Объект.ПолучательПредприятие);
	
	_списокid = Новый Соответствие;
	_ConsignmentСписок = Новый Массив;
	_VetDocumentСписок = Новый Массив;
	_shipmentRoute = Новый Массив;
	_id = 1;
	
	Если _Версия20 Тогда
		Для каждого _СтрокаПартии Из _Объект.Партии Цикл
			
			Если _СтрокаПартии.Отправлена
				ИЛИ ЗначениеЗаполнено(_СтрокаПартии.Статус)
				ИЛИ НЕ ЗначениеЗаполнено(_СтрокаПартии.StockEntry) Тогда
				Продолжить;
			КонецЕсли;
			
			_Consignment = ВетисMercuryVetdocument.Consignment();
			_Consignment.id               = "id" + _id;
			_Consignment.volume           = _СтрокаПартии.Количество;
			_Consignment.unit             = ВетисDictionary.Unit(ВетисDictionaryСлой1с.Unit(_СтрокаПартии.Unit));
			_Consignment.sourceStockEntry = ВетисMercuryVetdocument.StockEntry(_СтрокаПартии.StockEntry.guid);
			
			Если ЗначениеЗаполнено(_СтрокаПартии.ProductItemName) Тогда
				_Consignment.productItem = ВетисDictionary.ProductItem(, _СтрокаПартии.ProductItemName);
				Если ЗначениеЗаполнено(_СтрокаПартии.ProductItemGTIN) Тогда
					_Consignment.productItem.globalID = _СтрокаПартии.ProductItemGTIN;
				КонецЕсли;
				Если ЗначениеЗаполнено(_СтрокаПартии.ProductItemCode) Тогда
					_Consignment.productItem.code = _СтрокаПартии.ProductItemCode;
				КонецЕсли;
			КонецЕсли;
			
			_списокid.Вставить(_Consignment.id, _СтрокаПартии);
			
			//Consignment это одна партия, значит несколько партий одной продукции будут упакованы одинаково
			//наверное, физически это должно быть несколько упаковок
			
			_packageList = Новый Массив;
			Для каждого _СтрокаУпаковка Из _Объект.Упаковка.НайтиСтроки(Новый Структура("КлючСвязи", _СтрокаПартии.КлючСтроки)) Цикл
				
				//https://github.com/mevgenym/1c_vetis.api/issues/5#issuecomment-369898911
				Если _СтрокаУпаковка.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				_productMarks = Новый Массив;
				Для каждого _СтрокаМаркировка Из _Объект.Маркировка.НайтиСтроки(Новый Структура("КлючСвязи", _СтрокаУпаковка.КлючСтроки)) Цикл
					_productMarks.Добавить(ВетисDictionary.ProductMarks(_СтрокаМаркировка.Маркировка, ВетисDictionaryСлой1с.ProductMarkingClass(_СтрокаМаркировка.КлассМаркировки)));
				КонецЦикла;
				
				_packageList.Добавить(ВетисDictionary.Package(
					ВетисDictionaryСлой1с.PackageLevelType(_СтрокаУпаковка.Уровень),
					ВетисDictionary.PackingType(ВетисDictionaryСлой1с.PackingType(_СтрокаУпаковка.Упаковка)),
					_СтрокаУпаковка.Количество,
					_productMarks
					));
				
			КонецЦикла;
			
			Если _packageList.Количество() > 0 Тогда
				_Consignment.packageList = ВетисDictionary.PackageList(_packageList);
			КонецЕсли;
			
			_ConsignmentСписок.Добавить(_Consignment);
			
			_УсловияПеремещения = Новый Массив;
			Для каждого _СтрокаУсловияПеремещения Из _Объект.УсловияПеремещения.НайтиСтроки(Новый Структура("SubProduct", _СтрокаПартии.StockEntry.SubProduct)) Цикл
				_Условие = ВетисDictionaryСлой1с.RegionalizationCondition(_СтрокаУсловияПеремещения.Условие);
				_УсловияПеремещения.Добавить(ВетисMercuryVetdocument.RegionalizationClause(ВетисDictionary.RegionalizationCondition(_Условие)));
			КонецЦикла;
			
			_authentication = ВетисMercuryVetdocument.VeterinaryAuthentication(
				ВетисDictionary.Purpose(ВетисDictionaryСлой1с.Purpose(_СтрокаВСД.НазначениеГруза)),
				_СтрокаВСД.КонтрольГосВетврачем,
				ВетисDictionaryСлой1с.ResearchResult(_СтрокаВСД.Ветсанэкспертиза20),
				_СтрокаВСД.БлагополучиеМестности,
				,
				_УсловияПеремещения
				);
				
			_VetDocument = ВетисMercuryVetdocument.VetDocument();
			_VetDocument.authentication = _authentication;
			_VetDocument.for = _Consignment.id;
			
			_VetDocumentСписок.Добавить(_VetDocument);
			
			_id = _id + 1;
		КонецЦикла;
		
		_waybill = ВетисMercuryVetdocument.Waybill();
		_waybill.issueSeries   = _ттн.Серия;
		_waybill.issueNumber   = _ттн.Номер;
		_waybill.issueDate     = _ттн.Дата;
		_waybill.type          = ВетисDictionaryСлой1с.DocumentType(_ттн.Тип);
		
		_delivery = ВетисMercuryVetdocument.Delivery(
			ВетисDictionary.BusinessMember(_Отправитель, _ОтправительПредприятие),
			ВетисDictionary.BusinessMember(_Получатель, _ПолучательПредприятие),
			_ConsignmentСписок,
			ВетисMercuryVetdocument.ConsignmentDocumentList(_waybill, _VetDocumentСписок),
			ВетисDictionary.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_ттн.Посредник)),
			ВетисMercuryVetdocumentСлой1с.TransportInfo(_ттн.ТипТранспорта, _ттн.НомерТранспорта, _ттн.НомерПрицепа, _ттн.НомерКонтейнера),
			ВетисDictionaryСлой1с.TransportationStorageType(_ттн.СпособХранения)
			);
		
		_Ответ = ВетисMercuryApplications.PrepareOutgoingConsignment(_delivery, _Отправитель, пОтказ, пОшибка);
	Иначе
		Для каждого _СтрокаСЖ Из _Объект.Партии Цикл
			_Consignment = ВетисMercuryVetdocument.Consignment();
			_Consignment.volume           = _СтрокаСЖ.Количество;
			_Consignment.unit             = ВетисDictionary.Unit(ВетисDictionaryСлой1с.Unit(_СтрокаСЖ.ЕдиницаИзмерения));
			_Consignment.packingList      = ВетисDictionary.PackingFormList(ВетисDictionaryСлой1с.PackingType(_СтрокаСЖ.Упаковка));
			_Consignment.packingAmount    = _СтрокаСЖ.КоличествоМест;
			_Consignment.sourceStockEntry = ВетисMercuryVetdocument.StockEntry(_СтрокаСЖ.guid);
			_ConsignmentСписок.Добавить(_Consignment);
		КонецЦикла;
		
		_VetDocument = ВетисMercuryVetdocument.VetDocument();
		_VetDocument.purpose            = ВетисDictionary.Purpose(ВетисDictionaryСлой1с.Purpose(_СтрокаВСД.НазначениеГруза));
		_VetDocument.transportInfo      = ВетисMercuryVetdocumentСлой1с.TransportInfo(_ттн.ТипТранспорта, _ттн.НомерТранспорта, _ттн.НомерПрицепа, _ттн.НомерКонтейнера);
		_VetDocument.transportStorageType = ВетисDictionaryСлой1с.TransportationStorageType(_ттн.СпособХранения);
		_VetDocument.cargoInspected     = _СтрокаВСД.КонтрольГосВетврачем;
		_VetDocument.cargoExpertized    = _СтрокаВСД.Ветсанэкспертиза;
		_VetDocument.expertiseInfo      = _СтрокаВСД.ЛабораторныеИсследования;
		//Указываются только для бумажных ветеринарных сертификатов
		//_VetDocument.confirmedBy        = Ветис.Врач();
		_VetDocument.locationProsperity = _СтрокаВСД.БлагополучиеМестности;
		
		_waybill = ВетисMercuryVetdocument.Waybill();
		_waybill.issueSeries   = _ттн.Серия;
		_waybill.issueNumber   = _ттн.Номер;
		_waybill.issueDate     = _ттн.Дата;
		_waybill.type          = ВетисDictionaryСлой1с.DocumentType(_ттн.Тип);
		_waybill.broker        = ВетисDictionary.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_ттн.Посредник));
		_waybill.transportInfo = ВетисMercuryVetdocumentСлой1с.TransportInfo(_ттн.ТипТранспорта, _ттн.НомерТранспорта, _ттн.НомерПрицепа, _ттн.НомерКонтейнера);
		_waybill.transportStorageType = ВетисDictionaryСлой1с.TransportationStorageType(_ттн.СпособХранения);
		
		_delivery = ВетисMercuryVetdocument.Delivery(
			ВетисDictionary.BusinessMember(_Отправитель, _ОтправительПредприятие),
			ВетисDictionary.BusinessMember(_Получатель, _ПолучательПредприятие),
			_ConsignmentСписок,
			ВетисMercuryVetdocument.ConsignmentDocumentList(_waybill, _VetDocument));
		
		_Ответ = ВетисMercuryApplications.PrepareOutgoingConsignment(_delivery, _Отправитель, пОтказ, пОшибка);
	КонецЕсли;
	
	Ветис.ЖурналОпераций_Добавить(_Ответ.ТекстЗапроса, "prepareOutcomingConsignment", "Запрос", _Объект.ОтправительПредприятие, _Объект.Отправитель, _Объект.Ссылка);
	Ветис.ЖурналОпераций_Добавить(_Ответ.ТекстЗапросаЗаявки, "prepareOutcomingConsignment", "Заявка", _Объект.ОтправительПредприятие, _Объект.Отправитель, _Объект.Ссылка);
	
	Если пОтказ = Истина Тогда
		Ветис.ЖурналОпераций_Добавить(_Ответ.ТекстОшибки, "prepareOutcomingConsignment", "Ответ", _Объект.ОтправительПредприятие, _Объект.Отправитель, _Объект.Ссылка);
		Возврат Неопределено;
	КонецЕсли;
	
	Ветис.ЖурналОпераций_Добавить(_Ответ.ТекстОтвета, "prepareOutcomingConsignment", "Ответ", _Объект.ОтправительПредприятие, _Объект.Отправитель, _Объект.Ссылка);
	
	_Response = _Ответ.Response;
	
	//в ответе список партий и список всд
	//_Ответ.Вставить("vetDocument", Новый Массив);
	Для каждого _vetDocument Из _Response.vetDocument Цикл
		
		_СтрокаПартии = _списокid[_vetDocument.qualifier];
		
		Если _СтрокаПартии = Неопределено Тогда
			ВетисОбщегоНазначения.ВывестиСообщение("что то пошло не так", "prepareOutcomingConsignment_Response");
			Продолжить;
		КонецЕсли;
		
		_ОбъектВСД = ВетисОбменДанными.ПолучитьОбъект(Документы.ВетисВетеринарноСопроводительныйДокумент, _vetDocument.uuid);
		
		ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_ОбъектВСД, _vetDocument);
		
		_ОбъектВСД.ДополнительныеСвойства.Вставить("Загрузка");
		
		Попытка
			_ОбъектВСД.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			пОтказ = Истина;
			пОшибка = пОшибка + ?(пОшибка = "", "", Символы.ПС) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Продолжить;
		КонецПопытки;
		
		//меняем значения в документе
		_СтрокаПартии.ВСД = _ОбъектВСД.Ссылка;
		_СтрокаПартии.Статус = _ОбъектВСД.Статус;
		_СтрокаПартии.Отправлена = Истина;
		
		//_Ответ.vetDocument.Добавить(_ОбъектВСД.Ссылка);
		
	КонецЦикла;
	
	//_Ответ.Вставить("StockEntry", Новый Массив);
	Для каждого _stockEntry Из _Response.StockEntry Цикл
		
		_se = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисStockEntry, _stockEntry.guid);
		_se.BusinessEntity = _Объект.Отправитель;
		_se.Enterprise = _Объект.ОтправительПредприятие;
		_se.Заполнить(_stockEntry);
		Попытка
			_se.Записать();
		Исключение
			пОтказ = Истина;
			пОшибка = пОшибка + ?(пОшибка = "", "", Символы.ПС) + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Продолжить;
		КонецПопытки;
		
		//_Ответ.StockEntry.Добавить(_stockEntry.Ссылка);
		
	КонецЦикла;
	
	_Объект.СтатусТранзакции = Перечисления.ВетисСтатусТранзакции.Отправлена;
	
	_Объект.ДополнительныеСвойства.Вставить("Загрузка");
	
	Попытка
		_Объект.Записать();
	Исключение
		пОтказ = Истина;
		пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	//Возврат _Ответ;
	
	//http://vetrf.ru/vetrf-forum/posts/list/7130.page#44764
	//Партия приходуется на сток с той упаковкой, которая была во входящем сертификате.
	//Упаковка по умолчанию "наследуется" из стока при формировании исходящего сертификата.
	//Кроме того, упаковка содержит сведения о маркировке, по которой в том числе можно сопоставить физическую партию с записью в системе.
	//При этом в момент отгрузки (оформления исходящего сертификата) сведения об упаковке можно изменить. 
	
КонецФункции

//Запрос условий регионализации
//Параметры:
// subProductList - список видов продукции (массив)
// routePointList - список точек маршрута, массив структур Страна, Регион или Предприятие
Функция CheckShipmentRegionalization(subProductList, routePointList, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если issuerId = Неопределено Тогда
		_issuerId = Ветис.ТекущийХС();
	Иначе
		_issuerId = issuerId;
	КонецЕсли;
	
	_cargoType = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_Таблица.guid
	|ИЗ
	|	Справочник.ВетисSubProduct КАК _Таблица
	|ГДЕ
	|	_Таблица.Ссылка В(&Список)");
	
	Запрос.УстановитьПараметр("Список", subProductList);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		_cargoType.Добавить(ВетисDictionary.SubProduct(Выборка.guid));
	КонецЦикла;
	
	_shipmentRoute = ВетисMercuryVetdocument.ShipmentRoute();
	
	_Индекс = 1;
	Для каждого _routePoint Из routePointList Цикл
		
		_Location = Неопределено; _Enterprise = Неопределено;
		Если _routePoint.Свойство("Предприятие") Тогда
			_Enterprise = ВетисDictionary.Enterprise(ВетисDictionaryСлой1с.Enterprise(_routePoint.Предприятие));
		Иначе
			_Location = ВетисDictionary.Location(,ВетисDictionary.Address(, ВетисDictionaryСлой1с.Country(_routePoint.Страна), ВетисDictionaryСлой1с.Region(_routePoint.Регион)));
		КонецЕсли;
		
		_shipmentRoute.routePoint.Добавить(ВетисMercuryVetdocument.ShipmentRoutePoint(_Индекс, _Location, _Enterprise));
		
		_Индекс = _Индекс + 1;
	КонецЦикла;
	
	_Response = ВетисMercuryApplications.CheckShipmentRegionalization(_cargoType, _shipmentRoute, _issuerId, пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда Возврат Неопределено; КонецЕсли;
	
	Возврат _Response;
	
КонецФункции

Процедура WithdrawVetDocumentOperation(пСсылка, пПричина, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_vetDocumentId = ВетисMercuryVetdocumentСлой1с.VetDocument(пСсылка);
	
	_Reason = ВетисMercuryVetdocument.VetDocumentStatusChangeReason(пПричина);
	
	_Response = ВетисMercuryApplications.WithdrawVetDocument(_vetDocumentId, _Reason, ТекущаяДата(), , пОтказ, пОшибка);
	
	Если пОтказ = Истина Тогда Возврат; КонецЕсли;
	
	_док = пСсылка.ПолучитьОбъект();
	
	ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_док, _Response);
	
	_док.ДополнительныеСвойства.Вставить("Загрузка");
	
	_док.Записать();
	
КонецПроцедуры

Процедура WithdrawTransportOperation(пСсылка, пПричина, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Объект = пСсылка.ПолучитьОбъект();
	
	Для каждого _ПартииСтрока Из _Объект.Партии Цикл
		Если ЗначениеЗаполнено(_ПартииСтрока.всд) И _ПартииСтрока.всд.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен Тогда
			ВетисMercuryApplicationsСлой1с.WithdrawVetDocumentOperation(_ПартииСтрока.всд, "ошибка оформления", пОтказ, пОшибка);
			Если пОтказ = Истина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	_Объект.СтатусТранзакции = Перечисления.ВетисСтатусТранзакции.Аннулирована;
	
	//_Объект.ОбменДанными.Загрузка = Истина;
	
	_Объект.ДополнительныеСвойства.Вставить("Загрузка");
	
	_Объект.Записать();
	
КонецПроцедуры

Функция getVetDocumentByUuid(пВСД, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.BusinessEntity КАК ХС
	|ИЗ
	|	Справочник.ВетисНастройкиПодключения.ИдентификаторыХС КАК _Таблица
	|ГДЕ
	|	Истина И _Таблица.BusinessEntity В(&Отправитель, &Получатель)");
	
	Запрос.УстановитьПараметр("Отправитель", пВСД.Отправитель);
	Запрос.УстановитьПараметр("Получатель", пВСД.Получатель);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_Отправитель = Ложь;
	_Получатель = Ложь;
	Пока Выборка.Следующий() Цикл
		_Отправитель = _Отправитель ИЛИ Выборка.ХС = пВСД.Отправитель;
		_Получатель = _Получатель ИЛИ Выборка.ХС = пВСД.Получатель;
	КонецЦикла;
	
	Если Ложь Тогда
	ИначеЕсли Ложь
		ИЛИ _Отправитель И _Получатель//оба наши
		ИЛИ НЕ _Отправитель И _Получатель
		Тогда
		_issuerId = ВетисDictionaryСлой1с.BusinessEntity(пВСД.Получатель);
		_enterpriseGuid = ВетисDictionaryСлой1с.Enterprise(пВСД.ПолучательПредприятие);
	ИначеЕсли Ложь
		ИЛИ _Отправитель И НЕ _Получатель
		Тогда
		_issuerId = ВетисDictionaryСлой1с.BusinessEntity(пВСД.Отправитель);
		_enterpriseGuid = ВетисDictionaryСлой1с.Enterprise(пВСД.ОтправительПредприятие);
	Иначе
		пОтказ = Истина;
		пОшибка = "Не найдены настройки подключения";
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ВетисMercuryApplications.getVetDocumentByUuid(пВСД.uuid, _enterpriseGuid, _issuerId, пОтказ, пОшибка);
	
КонецФункции

Функция ModifyActivityLocations(пХС, пПредприятие, ModificationTypeCREATE = Истина, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_ModificationType = ?(ModificationTypeCREATE, ВетисКонстанты.RegisterModificationType_CREATE(), ВетисКонстанты.RegisterModificationType_DELETE());
	
	_BusinessEntityGuid = ВетисDictionaryСлой1с.BusinessEntity(пХС);
	
	_EnterpriseGuid     = ВетисDictionaryСлой1с.Enterprise(пПредприятие);
	
	_Operation = ВетисMercuryVetdocument.BusinessEntityActivityLocationsModificationOperation(_ModificationType, _BusinessEntityGuid, _EnterpriseGuid);
	
	_BusinessEntityResponse = ВетисMercuryApplications.ModifyActivityLocations(_Operation, _BusinessEntityGuid, пОтказ, пОшибка);
	
	Возврат _BusinessEntityResponse;
	
КонецФункции

Функция ModifyBusinessEntity(пХС, пПричина = Неопределено, RegisterModificationType_FIND_OR_CREATE = Истина, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_type = ?(RegisterModificationType_FIND_OR_CREATE = Истина, ВетисКонстанты.RegisterModificationType_FIND_OR_CREATE(), ВетисКонстанты.RegisterModificationType_UPDATE());
	
	Если пПричина = Неопределено Тогда
		Если _type = ВетисКонстанты.RegisterModificationType_FIND_OR_CREATE() Тогда
			_Причина = "Создание";
		Иначе
			_Причина = "Обновление";
		КонецЕсли;
	Иначе
		_Причина = пПричина;
	КонецЕсли;
	
	_ХС = пХС.ПолучитьОбъект();
	
	_businessEntityGuid = ВетисDictionaryСлой1с.BusinessEntity(пХС);
	
	_businessEntity = ВетисDictionary.BusinessEntity(_businessEntityGuid);
	
	_businessEntity.type = ?(_ХС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, ВетисКонстанты.BusinessEntityType_JURIDICAL(), ВетисКонстанты.BusinessEntityType_SELF_EMPLOYED());
	
	_businessEntity.name = _ХС.Наименование;
	
	_businessEntity.fullName = _ХС.НаименованиеПолное;
	
	_businessEntity.inn = _ХС.ИНН;
	
	_businessEntity.incorporationForm = ВетисDictionary.IncorporationForm(?(_ХС.ЮрФизЛицо, "12300", "50102"));
	
	//_businessEntity.ogrn = ;
	
	//_businessEntity.juridicalAddress = ВетисDictionary.Address();
	
	_modificationOperation = ВетисMercuryVetdocument.BusinessEntityModificationOperation(_type, , _businessEntity, _Причина);
	
	_Response = ВетисMercuryApplications.ModifyBusinessEntity(_modificationOperation, _businessEntityGuid, пОтказ, пОшибка);
	
	Возврат _Response;
	
КонецФункции

Функция ModifyEnterprise(пПредприятие, пПричина = Неопределено, RegisterModificationType_CREATE = Истина, пОтказ = Ложь, пОшибка = "") Экспорт
//Доделана совместными усилиями:
// Орех Захаров
// Sany81
	
	_type = ?(RegisterModificationType_CREATE = Истина, ВетисКонстанты.RegisterModificationType_CREATE(), ВетисКонстанты.RegisterModificationType_UPDATE());
	
	Если пПричина = Неопределено Тогда
		Если _type = ВетисКонстанты.RegisterModificationType_CREATE() Тогда
			_Причина = "Создание";
		Иначе
			_Причина = "Обновление";
		КонецЕсли;
	Иначе
		_Причина = пПричина;
	КонецЕсли;
	
	_issuerId = Ветис.ТекущийХС();
	
	Если ТипЗнч(пПредприятие) = Тип("СправочникСсылка.ВетисEnterprise") Тогда
		_Предприятие = пПредприятие.ПолучитьОбъект();
	Иначе
		_Предприятие = пПредприятие;
	КонецЕсли;
	
	_enterprise = ВетисDictionary.Enterprise();
	
	Если _type = ВетисКонстанты.RegisterModificationType_UPDATE() Тогда
		_enterpriseGuid = ВетисDictionaryСлой1с.Enterprise(пПредприятие.Ссылка);
		_enterprise.uuid = ВетисEnterpriseService.GetEnterpriseByGuid(_enterpriseGuid).uuid;
	КонецЕсли;
	
	_enterprise.name = _Предприятие.Наименование;
	
	_enterprise.type = ВетисDictionaryСлой1с.EnterpriseType(_Предприятие.type);
	
	_enterprise.Address = ВетисDictionary.Address(_Предприятие.addressView, ВетисDictionaryСлой1с.Country(_Предприятие.Country), ВетисDictionaryСлой1с.Region(_Предприятие.Region), ВетисDictionaryСлой1с.District(_Предприятие.District), ВетисDictionaryСлой1с.Locality(_Предприятие.Locality));
	
	_activity = Новый Массив;
	
	Для каждого _ВидыДеятельностиСтрока Из _Предприятие.activityList Цикл
		_activity.Добавить(ВетисDictionary.EnterpriseActivity(_ВидыДеятельностиСтрока.name));
	КонецЦикла;
	
	_enterprise.activityList = ВетисDictionary.EnterpriseActivityList(_activity);
	
	//ошибки нет, но список номеров не воспринимает
	//_numberList = Новый Массив;
	//
	//Для каждого _НомераПредприятияСтрока Из _Предприятие.НомераПредприятия Цикл
	//	_numberList.Добавить(_НомераПредприятияСтрока.Номер);
	//КонецЦикла;
	//
	//_enterprise.numberList = ВетисDictionary.EnterpriseNumberList(_numberList);
	
	_enterprise.owner = ВетисDictionary.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_Предприятие.eOwner));
	
	_modificationOperation = ВетисMercuryVetdocument.EnterpriseModificationOperation(_type, _enterprise, _Причина);
	
	_Response = ВетисMercuryApplications.ModifyEnterprise(_modificationOperation, _issuerId, пОтказ, пОшибка);
	
	Возврат _Response;
	
КонецФункции

Функция ModifyProducerStock(ProductItemList, RegisterModificationType, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_type = RegisterModificationType;
	
	//_issuerId = Ветис.ТекущийХС();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.Наименование,
	|	_Таблица.guid,
	|	_Таблица.globalID,
	|	_Таблица.piCode,
	|	_Таблица.productType,
	|	_Таблица.product.guid КАК product,
	|	_Таблица.subProduct.guid КАК subProduct,
	|	_Таблица.correspondsToGost,
	|	_Таблица.gost,
	|	ЕСТЬNULL(_Таблица.producer.guid, Неопределено) КАК producer,
	|	ЕСТЬNULL(_Таблица.tmOwner.guid, Неопределено) КАК tmOwner,
	|	_Таблица.producing.(
	|		location.guid КАК location
	|	),
	|	_Таблица.packaging.(
	|		packagingType,
	|		quantity,
	|		volume,
	|		unit.guid КАК unit
	|	)
	|ИЗ
	|	Справочник.ВетисProductItem КАК _Таблица
	|ГДЕ
	|	_Таблица.Ссылка В(&Список)");
	
	Запрос.УстановитьПараметр("Список", ProductItemList);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_productItemList = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		//операция принимает по одной записи (в 1.4 это прямо написано, в 2.0 нет такого утверждения, просто мои предположения)
		_productItemList.Очистить();
		
		_productItem = ВетисDictionary.ProductItem();
		
		Если НЕ _type = ВетисКонстанты.RegisterModificationType_CREATE() Тогда
			_productItem.uuid = ВетисProductService.GetProductItemByGuid(Выборка.guid).uuid;
		КонецЕсли;
		
		Если НЕ _type = ВетисКонстанты.RegisterModificationType_DELETE() Тогда
			
			_productItem.name = Выборка.Наименование;
			_productItem.code = Выборка.piCode;
			_productItem.productType = ВетисDictionaryСлой1с.ProductType(Выборка.productType);
			_productItem.product = ВетисDictionary.Product(Выборка.product);
			_productItem.subProduct = ВетисDictionary.SubProduct(Выборка.subProduct);
			_productItem.correspondsToGost = Выборка.correspondsToGost;
			_productItem.gost = Выборка.gost;
			_productItem.producer = ВетисDictionary.BusinessEntity(Выборка.producer);
			_productItem.tmOwner = ВетисDictionary.BusinessEntity(Выборка.tmOwner);
			
			Если ЗначениеЗаполнено(Выборка.globalID) Тогда
				_productItem.globalID = Выборка.globalID;
			КонецЕсли;
			
			ВыборкаProducing = Выборка.producing.Выбрать();
			
			Пока ВыборкаProducing.Следующий() Цикл
				_productItem.producing.Добавить(ВетисDictionary.ProductItemProducing(ВетисDictionary.Enterprise(ВыборкаProducing.location)));
			КонецЦикла;
			
			ВыборкаPackaging = Выборка.packaging.Выбрать();
			
			Если ВыборкаPackaging.Следующий() Тогда
				_productItem.packaging = ВетисDictionary.Packaging(
					ВетисDictionary.PackingType(ВетисDictionaryСлой1с.PackingType(ВыборкаPackaging.packagingType)),
					ВыборкаPackaging.quantity,
					ВыборкаPackaging.volume,
					ВетисDictionary.Unit(ВыборкаPackaging.unit)
				);
			КонецЕсли;
		КонецЕсли;
		
		_productItemList.Добавить(_productItem);
		
		_modificationOperation = ВетисMercuryVetdocument.PSLModificationOperation(_type, _productItemList);
		
		_Response = ВетисMercuryApplications.ModifyProducerStockList(_modificationOperation, , пОтказ, пОшибка);
		
		Если пОтказ = Истина Тогда
			Прервать;
		КонецЕсли;
		
		Для каждого _productItem Из _Response.productItem Цикл
			
			Если _productItem.last Тогда
				Если _productItem.active Тогда
					//новая версия
					_Объект = Выборка.Ссылка.ПолучитьОбъект();
					_Объект.Заполнить(_productItem);
					Попытка
						_Объект.Записать();
					Исключение
						пОтказ = Истина;
						пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, "ModifyProducerStock");
						Прервать;
					КонецПопытки;
				Иначе
					//удаление
					Попытка
						Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
					Исключение
						пОтказ = Истина;
						пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, "ModifyProducerStock");
						Прервать;
					КонецПопытки;
				КонецЕсли;
				
			Иначе
				//старая запись, пропускаем
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//возвращаем последний _Response
	Возврат _Response;
	
КонецФункции

Функция Процент(Знач1, Знач2)
	
	_результат = ?(Знач2 = 0, 1, Знач1 / Знач2);
	
	Возврат ?(_результат > 1, _результат - 1, 1 - _результат) * 100;
	
КонецФункции

