
Процедура MergeOperation() Экспорт
	
КонецПроцедуры

Функция ResolveDiscrepancy(enterpriseGuid, stockEntry, АктПричина = Неопределено, АктОписание = Неопределено, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	//сделать: тестировать ResolveDiscrepancy
	_Версия20 = Ветис.Версия_2_0();
	_ВетисCerberusEnterprise = ?(_Версия20, ВетисDictionary_2_0, ВетисCerberusEnterprise);
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисMercuryVetdocument = ?(_Версия20, ВетисMercuryVetdocument_2_0, ВетисMercuryVetdocument);
	_ВетисMercuryApplications = ?(_Версия20, ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	_ВетисArgusCommon = ?(_Версия20, ВетисMercuryVetdocument_2_0, ВетисArgusCommon);
	
	_enterprise = _ВетисCerberusEnterprise.Enterprise(enterpriseGuid);
	
	_inventoryDate = ТекущаяДата();
	
	//_responsible = _ВетисArgusCommon.User(Ветис.ЛогинХС());
	_responsible = _ВетисArgusCommon.User(ВетисПовтИсп.Настройки_ЛогинПользователя());
	
	_stockDiscrepancy = _ВетисMercuryVetdocument.StockDiscrepancy(stockEntry);
	
	_stockDiscrepancy.id = "inv1";
	
	//2018-04-17
	//переданные сведения акта не отображаются через веб
	//т.е. отображаются, видимо, автоматически сгенерированные сервисом - номер, дата, причина
	_discrepancyReport = _ВетисMercuryVetdocument.DiscrepancyReport(,,,АктПричина,АктОписание);
	
	_discrepancyReport.for = "inv1";
	
	//по каждой позиции в маркировке добавляется запись с классом ProductMarkingClass.UNDEFINED
	//и сборной записью со всех маркировок по тексту
	//http://vetrf.ru/vetrf-forum/posts/list/7811.page
	
	_Response = _ВетисMercuryApplications.resolveDiscrepancy(_enterprise, _inventoryDate, _responsible, _stockDiscrepancy, _discrepancyReport, issuerId, пОтказ, пОшибка);
	
	Возврат _Response;
	
КонецФункции

Функция IncomingOperation(пОбъект, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Перем _discrepancyReport, _returnedDelivery;
	
	_Результат = Новый Структура;
	
	_Версия20 = Ветис.Версия_2_0();
	_ВетисCerberusEnterprise = ?(_Версия20, ВетисDictionary_2_0, ВетисCerberusEnterprise);
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисMercuryVetdocument = ?(_Версия20, ВетисMercuryVetdocument_2_0, ВетисMercuryVetdocument);
	_ВетисMercuryApplications = ?(_Версия20, ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	_ВетисArgusCommon = ?(_Версия20, ВетисDictionary_2_0, ВетисArgusCommon);
	_ВетисArgusCommonСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusCommonСлой1с);
	
	_ВозвратДата = пОбъект.Дата;
	
	_Отправитель = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пОбъект.Отправитель);
	_Получатель = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пОбъект.Получатель);
	
	_ОтправительПредприятие = _ВетисCerberusEnterpriseСлой1с.Enterprise(пОбъект.ОтправительПредприятие);
	_ПолучательПредприятие = _ВетисCerberusEnterpriseСлой1с.Enterprise(пОбъект.ПолучательПредприятие);
	
	Для каждого _СтрокаСЖ Из пОбъект.Товары Цикл
		
		Если _СтрокаСЖ.Свойство("Статус") И ЗначениеЗаполнено(_СтрокаСЖ.Статус) И НЕ _СтрокаСЖ.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен Тогда
			Продолжить;
		КонецЕсли;
		
		_ЕстьСвойствоВозврат = _СтрокаСЖ.Свойство("Возврат");
		
		Если _СтрокаСЖ.Свойство("ВСД") Тогда
			_всд = _СтрокаСЖ.ВСД;
		Иначе
			_всд = пОбъект;
		КонецЕсли;
		
		Если пОбъект.ТТН.Количество() = 0 Тогда
			_ттн = _всд.ТТН[0];
		Иначе
			_ттн = пОбъект.ТТН[0];
		КонецЕсли;
		
		_пар = Новый Структура("Товары,Упаковка,Маркировка,Производители,ИДПартии",Новый Массив,Новый Массив,Новый Массив,_всд.Производители,_всд.ИДПартии);
		
		_пар.Товары.Добавить(_СтрокаСЖ);
		
		Для каждого _СтрокаУпаковка Из пОбъект.Упаковка Цикл
			Если _СтрокаУпаковка.КлючСвязи = _СтрокаСЖ.КлючСтроки Тогда
				_пар.Упаковка.Добавить(_СтрокаУпаковка);
				Для каждого _СтрокаМаркировка Из пОбъект.Маркировка Цикл
					Если _СтрокаМаркировка.КлючСвязи = _СтрокаУпаковка.КлючСтроки Тогда
						_пар.Маркировка.Добавить(_СтрокаМаркировка);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если _Версия20 Тогда
			_VetDocument = ВетисMercuryVetdocument_2_0.VetDocument();
			
			Если ЗначениеЗаполнено(_всд.uuid) Тогда
				_VetDocument.uuid = _всд.uuid;
			Иначе
				ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать_20(_VetDocument, _всд);
				Если _VetDocument.statusChange.Количество() = 0 Тогда
					_VetDocument.statusChange.Добавить(ВетисMercuryVetdocument_2_0.VetDocumentStatusChange(
						ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен")),
						ВетисMercuryVetdocument_2_0.User(, _всд.ОтветственныйВетис.Наименование, _всд.ОтветственныйВетис.post),
						пОбъект.Дата
						));
				КонецЕсли;
			КонецЕсли;
			
			_waybill = ВетисMercuryVetdocument_2_0.Waybill();
			_waybill.issueSeries   = _ттн.Серия;
			_waybill.issueNumber   = _ттн.Номер;
			_waybill.issueDate     = _ттн.Дата;
			_waybill.type          = ВетисDictionaryСлой1с.DocumentType(_ттн.Тип);
			//_waybill.broker        = ВетисDictionary_2_0.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_ттн.Посредник));
			//_waybill.transportInfo = ВетисMercuryVetdocumentСлой1с.TransportInfo(_ттн.ТипТранспорта, _ттн.НомерТранспорта, _ттн.НомерПрицепа);
			//_waybill.transportStorageType = ВетисDictionaryСлой1с.TransportationStorageType(_ттн.СпособХранения);
			
			_delivery = ВетисMercuryVetdocument_2_0.Delivery(
				ВетисDictionary_2_0.BusinessMember(_Отправитель, _ОтправительПредприятие),
				ВетисDictionary_2_0.BusinessMember(_Получатель, _ПолучательПредприятие),
				ВетисMercuryVetdocumentСлой1с.BatchКонвертировать_20(_пар, ВетисMercuryVetdocument_2_0.Consignment()),
				ВетисMercuryVetdocument_2_0.ConsignmentDocumentList(_waybill, _vetDocument),
				ВетисDictionary_2_0.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_ттн.Посредник)),
				ВетисMercuryVetdocumentСлой1с.TransportInfo(_ттн.ТипТранспорта, _ттн.НомерТранспорта, _ттн.НомерПрицепа),
				ВетисDictionaryСлой1с.TransportationStorageType(_ттн.СпособХранения));
		Иначе
			_VetDocument = ВетисMercuryVetdocument.VetDocument();
			
			Если ЗначениеЗаполнено(_всд.uuid) Тогда
				_VetDocument.uuid = _всд.uuid;
			Иначе
				ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать_20(_VetDocument, _всд);
			КонецЕсли;
			
			_waybill = ВетисArgusShipment.Waybill();
			_waybill.issueSeries   = _ттн.Серия;
			_waybill.issueNumber   = _ттн.Номер;
			_waybill.issueDate     = _ттн.Дата;
			_waybill.type          = ВетисArgusShipmentСлой1с.WaybillType(_ттн.Тип);
			_waybill.broker        = ВетисCerberusEnterprise.BusinessEntity(ВетисCerberusEnterpriseСлой1с.BusinessEntity(_ттн.Посредник));
			_waybill.transportInfo = ВетисArgusShipmentСлой1с.TransportInfo(_ттн.ТипТранспорта, _ттн.НомерТранспорта, _ттн.НомерПрицепа);
			_waybill.transportStorageType = ВетисArgusShipmentСлой1с.TransportationStorageType(_ттн.СпособХранения);
			
			_delivery = ВетисMercuryVetdocument.Delivery(
				ВетисCerberusEnterprise.BusinessMember(_Отправитель, _ОтправительПредприятие),
				ВетисCerberusEnterprise.BusinessMember(_Получатель, _ПолучательПредприятие),
				ВетисMercuryVetdocumentСлой1с.BatchКонвертировать(_пар, ВетисMercuryVetdocument_2_0.Consignment()),
				ВетисMercuryVetdocument.ConsignmentDocumentList(_waybill, _vetDocument));
		КонецЕсли;
		
		_всдСтрокаСЖ = _всд.Товары[0];
		_всдСтрокаРО = _всд.РезультатыОсмотра[0];
		
		_КоличествоФакт     = _СтрокаСЖ.Количество + ?(_ЕстьСвойствоВозврат И _СтрокаСЖ.Возврат, _СтрокаСЖ.КоличествоВозврат, 0);
		
		_КоличествоМестФакт = 0;//общее количество мест (предположим что оно так считается в сервисе)
		Для каждого _СтрокаУпаковка Из пОбъект.Упаковка Цикл
			Если _СтрокаУпаковка.КлючСвязи = _СтрокаСЖ.КлючСтроки Тогда
				_КоличествоМестФакт = _КоличествоМестФакт + _СтрокаУпаковка.Количество + ?(_ЕстьСвойствоВозврат И _СтрокаСЖ.Возврат, _СтрокаУпаковка.КоличествоВозврат, 0);
			КонецЕсли;
		КонецЦикла;
		
		_всдСтрокаСЖКоличествоМест = 0;
		Для каждого _СтрокаУпаковка Из _всд.Упаковка Цикл
			Если _СтрокаУпаковка.КлючСвязи = _СтрокаСЖ.КлючСтроки Тогда
				_всдСтрокаСЖКоличествоМест = _всдСтрокаСЖКоличествоМест + _СтрокаУпаковка.Количество;
			КонецЕсли;
		КонецЦикла;
		
		_Отклонение     = Процент(_КоличествоФакт, _всдСтрокаСЖ.Количество);
		_ОтклонениеМест = Процент(_КоличествоМестФакт, _всдСтрокаСЖКоличествоМест);
		
		_РезультатПриема = Перечисления.ВетисDeliveryInspectionResult[?(_Отклонение > 5 ИЛИ _ОтклонениеМест > 10, "MISMATCH", "CORRESPONDS")];
		
		_РешениеОПриеме = Перечисления.ВетисDeliveryDecision[?(_ЕстьСвойствоВозврат И _СтрокаСЖ.Возврат, ?(_СтрокаСЖ.Количество = 0, "RETURN_ALL", "PARTIALLY"), "ACCEPT_ALL")];
		
		Если _СтрокаСЖ.Свойство("РезультатПриема") Тогда
			_СтрокаСЖ.РезультатПриема = _РезультатПриема;
			_СтрокаСЖ.РезультатВетКонтроля = _РезультатПриема;
			_СтрокаСЖ.РешениеОПриеме = _РешениеОПриеме;
		КонецЕсли;
		
		_deliveryFacts = _ВетисMercuryVetdocument.DeliveryFactList(
		  _ВетисArgusCommonСлой1с.DocumentNature(Перечисления.ВетисDocumentNature[?(ЗначениеЗаполнено(_всд.Статус), "ELECTRONIC", "PAPER")]),
		  _ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(_РезультатПриема)),
		  _ВетисMercuryVetdocument.DeliveryInspection(ВетисMercuryVetdocumentСлой1с.DeliveryInspectionResult(_РезультатПриема)),
		  ВетисMercuryVetdocumentСлой1с.DeliveryDecision(_РешениеОПриеме));
		
		_reason = "";
		_description = "";
		
		//MERC14259	Объем груза в запросе отличается от указанного в ветеринарно-сопроводительном документе более чем на 5% без указания причины в акте несоответствия.
		Если _Отклонение > 5 Тогда
			_КоличествоРазница = Макс(_КоличествоФакт - _всдСтрокаСЖ.Количество, _всдСтрокаСЖ.Количество - _КоличествоФакт);
			_КоличествоСтрока  = ?(_КоличествоФакт > _всдСтрокаСЖ.Количество, "больше", "меньше");
			_reason = _reason + "продукции " + _КоличествоСтрока + " на " + _КоличествоРазница + " кг";
			_description = _description + _всдСтрокаСЖ.Количество + " кг, прибыло " + _КоличествоФакт + " кг";
		КонецЕсли;
		
		//MERC14260	Количество упаковки в запросе отличается от указанного в ветеринарно-сопроводительном документе более чем на 10% без указания причины в акте несоответствия.
		Если _ОтклонениеМест > 10 Тогда
			_КоличествоРазница = Макс(_КоличествоМестФакт - _всдСтрокаСЖКоличествоМест, _всдСтрокаСЖКоличествоМест - _КоличествоМестФакт);
			_КоличествоСтрока  = ?(_КоличествоМестФакт > _всдСтрокаСЖКоличествоМест, "больше", "меньше");
			_reason = _reason + ?(_reason="", "", ", ") + "упаковок " + _КоличествоСтрока + " на " + _КоличествоРазница + " ед";
			_description = _description + ?(_description="", "", ", ") + _всдСтрокаСЖКоличествоМест + " ед, прибыло " + _КоличествоМестФакт + " ед";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(_reason) Тогда
			_discrepancyReport = _ВетисMercuryVetdocument.DiscrepancyReport(,,
				_ВозвратДата,
				"Количество " + _reason + ".",
				"В ВСД заявлено " + _description + ".");
		КонецЕсли;
		
		Если _СтрокаСЖ.Свойство("АктПричина") Тогда
			_СтрокаСЖ.АктПричина = _reason;
			_СтрокаСЖ.АктОписание = _description;
		КонецЕсли;
		
		Если _СтрокаСЖ.Свойство("Возврат") И _СтрокаСЖ.Возврат = Истина Тогда
			Если _Версия20 Тогда
				_vetDocument = ВетисMercuryVetdocument_2_0.VetDocument();
				_vetDocument.issueDate      = Ветис.ВремяСервиса(_ВозвратДата);
				_VetDocument.authentication = ВетисMercuryVetdocument_2_0.VeterinaryAuthentication(
					ВетисDictionary_2_0.Purpose(ВетисDictionaryСлой1с.Purpose(Ветис.Настройки_ВСД_НазначениеГрузаНаВозврат())),
					_СтрокаСЖ.ВозвратКонтрольГосВетврачем,
					ВетисDictionaryСлой1с.ResearchResult(_СтрокаСЖ.ВозвратВетсанэкспертиза),
					_СтрокаСЖ.ВозвратБлагополучиеМестности,
					_СтрокаСЖ.ВозвратОсобыеОтметки,
					ВетисMercuryVetdocument_2_0.RegionalizationClause(ВетисDictionary_2_0.RegionalizationCondition(ВетисDictionaryСлой1с.RegionalizationCondition(_СтрокаСЖ.ВозвратУсловияПеремещения)))
				);
				
				_waybill = ВетисMercuryVetdocument_2_0.Waybill();
				_waybill.issueDate     = _ВозвратДата;
				_waybill.type          = ВетисArgusShipmentСлой1с.WaybillType(_ттн.Тип);
				//_waybill.broker        = ВетисCerberusEnterprise.BusinessEntity(ВетисCerberusEnterpriseСлой1с.BusinessEntity(_ттн.Посредник));
				//_waybill.transportInfo = ВетисArgusShipmentСлой1с.TransportInfo(_ттн.ТипТранспорта, _ттн.НомерТранспорта, _ттн.НомерПрицепа);
				//_waybill.transportStorageType = ВетисArgusShipmentСлой1с.TransportationStorageType(_ттн.СпособХранения);
				
				//сделать: дополнить количеством коробок на возврат, пока из входящей просто копия
				_Consignment = ВетисMercuryVetdocumentСлой1с.BatchКонвертировать(_пар, ВетисMercuryVetdocument_2_0.Consignment());
				_Consignment.volume = _СтрокаСЖ.КоличествоВозврат;
				
				_returnedDelivery = ВетисMercuryVetdocument_2_0.Delivery(
					ВетисDictionary_2_0.BusinessMember(_Получатель, _ПолучательПредприятие),
					ВетисDictionary_2_0.BusinessMember(_Отправитель, _ОтправительПредприятие),
					_Consignment,
					ВетисMercuryVetdocument_2_0.ConsignmentDocumentList(_waybill, _vetDocument),
					ВетисDictionary_2_0.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_ттн.Посредник)),//пока тот же который привез
					ВетисMercuryVetdocumentСлой1с.TransportInfo(_ттн.ТипТранспорта, _ттн.НомерТранспорта, _ттн.НомерПрицепа),//пока тот же который привез
					ВетисDictionaryСлой1с.TransportationStorageType(_ттн.СпособХранения)//пока тот же который привез
					);
			Иначе
				_vetDocument = ВетисMercuryVetdocument.VetDocument();
				_vetDocument.issueDate          = Ветис.ВремяСервиса(_ВозвратДата);
				_vetDocument.purpose            = ВетисArgusCommon.Purpose(ВетисArgusCommonСлой1с.Purpose(Ветис.Настройки_ВСД_НазначениеГрузаНаВозврат()));
				_vetDocument.cargoInspected     = _СтрокаСЖ.ВозвратКонтрольГосВетврачем;
				_vetDocument.cargoExpertized    = _СтрокаСЖ.ВозвратВетсанэкспертиза;
				_vetDocument.confirmedDate      = Ветис.ВремяСервиса(_ВозвратДата);// xs:dateTime
				_vetDocument.locationProsperity = _СтрокаСЖ.ВозвратБлагополучиеМестности;
				_vetDocument.specialMarks       = _СтрокаСЖ.ВозвратОсобыеОтметки;
				
				_waybill = ВетисArgusShipment.Waybill();
				_waybill.issueDate     = _ВозвратДата;
				_waybill.type          = ВетисArgusShipmentСлой1с.WaybillType(_ттн.Тип);
				_waybill.broker        = ВетисCerberusEnterprise.BusinessEntity(ВетисCerberusEnterpriseСлой1с.BusinessEntity(_ттн.Посредник));
				_waybill.transportInfo = ВетисArgusShipmentСлой1с.TransportInfo(_ттн.ТипТранспорта, _ттн.НомерТранспорта, _ттн.НомерПрицепа);
				_waybill.transportStorageType = ВетисArgusShipmentСлой1с.TransportationStorageType(_ттн.СпособХранения);
				
				//сделать: дополнить количеством коробок на возврат, пока из входящей просто копия
				_Consignment = ВетисMercuryVetdocumentСлой1с.BatchКонвертировать(_пар, ВетисMercuryVetdocument.Consignment());
				_Consignment.volume = _СтрокаСЖ.КоличествоВозврат;
				//_Consignment.packingAmount = _СтрокаСЖ.КоличествоМестВозврат;
				
				_returnedDelivery = ВетисMercuryVetdocument.Delivery(
					ВетисCerberusEnterprise.BusinessMember(_Получатель, _ПолучательПредприятие),
					ВетисCerberusEnterprise.BusinessMember(_Отправитель, _ОтправительПредприятие),
					_Consignment,
					ВетисMercuryVetdocument.ConsignmentDocumentList(_waybill, _VetDocument)
				);
			КонецЕсли;
		КонецЕсли;
		
		_Response = _ВетисMercuryApplications.processIncomingConsignment(_delivery, _deliveryFacts, _discrepancyReport, _returnedDelivery, _Получатель, пОтказ, пОшибка);
		
		Если пОтказ = Истина Тогда Возврат Неопределено; КонецЕсли;
		
		//может быть гашение возвратных входящих ВСД
		//видимо, может быть оформлен возврат на возрат, т.е. в ответе будет два возвратных
		//входящий электронный можно найти только по типу TRANSPORT или по uuid равно входящему
		//входящий бумажный можно только по типу TRANSPORT
		//входящий возвратный надо искать по uuid
		//исходящий возвртаный можно по типу RETURNABLE и uuid не равно входящему
		Для каждого _vetDocument Из _Response.vetDocument Цикл
			//входящий электронный или бумажный
			Если ?(_Версия20, _vetDocument.vetDType, _vetDocument.type) = ВетисКонстанты.VetDocumentType_TRANSPORT() Тогда
				
				_всд.uuid = _vetDocument.uuid;
				_всд.Статус = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(?(_Версия20, _vetDocument.vetDStatus, _vetDocument.status));
				//_всдОбъект = _всд.Ссылка.ПолучитьОбъект();
				//
				//Если _Версия20 Тогда
				//	ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать_20(_всдОбъект, _vetDocument);
				//Иначе
				//	ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_всдОбъект, _vetDocument);
				//КонецЕсли;
				//
				//Если ТипЗнч(_всдОбъект) = Тип("ДокументОбъект.ВетисВетеринарноСопроводительныйДокумент") Тогда
				//	
				//	_всдОбъект.ОбменДанными.Загрузка = Истина;
				//	
				//	Попытка
				//		_всдОбъект.Записать();
				//	Исключение
				//		ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке());
				//		ВызватьИсключение;
				//	КонецПопытки;
				//КонецЕсли;
				
			//возвратный входящий либо исходящий
			ИначеЕсли ?(_Версия20, _vetDocument.vetDType, _vetDocument.type) = ВетисКонстанты.VetDocumentType_RETURNABLE() Тогда
				
				//входящий
				Если _всд.uuid = _vetDocument.uuid Тогда
					
					_всд.Статус = ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(?(_Версия20, _vetDocument.vetDStatus, _vetDocument.status));
					//_всдОбъект = _всд.Ссылка.ПолучитьОбъект();
					//
					//Если _Версия20 Тогда
					//	ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать_20(_всдОбъект, _vetDocument);
					//Иначе
					//	ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_всдОбъект, _vetDocument);
					//КонецЕсли;
					//
					//_всдОбъект.ОбменДанными.Загрузка = Истина;
					//
					//Попытка
					//	_всдОбъект.Записать();
					//Исключение
					//	ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке());
					//	ВызватьИсключение;
					//КонецПопытки;
			
				//исходящий
				Иначе
					Если _СтрокаСЖ.Свойство("ВозвратныйВСД") Тогда
						//_СтрокаСЖ.ВозвратныйВСД.uuid = _vetDocument.uuid;
						
						Если ЗначениеЗаполнено(_СтрокаСЖ.ВозвратныйВСД) Тогда
							_возвратный = _СтрокаСЖ.ВозвратныйВСД.ПолучитьОбъект();
						Иначе
							_возвратный = Документы.ВетисВетеринарноСопроводительныйДокумент.СоздатьДокумент();
							_возвратный.Дата = _ВозвратДата;
						КонецЕсли;
						
						Если _Версия20 Тогда
							ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать_20(_возвратный, _vetDocument);
						Иначе
							ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_возвратный, _vetDocument);
						КонецЕсли;
						
						_возвратный.ДополнительныеСвойства.Вставить("Загрузка");
						
						Попытка
							_возвратный.Записать(РежимЗаписиДокумента.Проведение);
						Исключение
							ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), "Возвратный ВСД");
							ВызватьИсключение;
						КонецПопытки;
						
						_СтрокаСЖ.ВозвратныйВСД = _возвратный.Ссылка;
						
						//_Результат.Вставить("ВозвратныйВСД", _возвратный.Ссылка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	//Если НЕ пОтказ = Истина Тогда
	//	ВетисСинхронизация.VetDocumentListChanges(пОтказ, пОшибка);
	//КонецЕсли;
	
КонецФункции

Процедура TransportOperation(пДокумент, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_НачалоПериода = ТекущаяДата();
	
	_Версия20 = Ветис.Версия_2_0();
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	
	_Отладка = Ветис.РазрешенаОтладка();
	
	_СтрокаВСД = пДокумент.ВСД[0];
	_ттн = пДокумент.ТТН[0];
	
	_Отправитель = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пДокумент.Отправитель);
	_Получатель = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пДокумент.Получатель);
	
	_ОтправительПредприятие = _ВетисCerberusEnterpriseСлой1с.Enterprise(пДокумент.ОтправительПредприятие);
	_ПолучательПредприятие = _ВетисCerberusEnterpriseСлой1с.Enterprise(пДокумент.ПолучательПредприятие);
	
	_ConsignmentСписок = Новый Массив;
	_VetDocumentСписок = Новый Массив;
	_id = 1;
	
	Если _Версия20 Тогда
		Для каждого _СтрокаПартии Из пДокумент.Партии Цикл
			
			Если _СтрокаПартии.Отправлена ИЛИ ЗначениеЗаполнено(_СтрокаПартии.Статус) Тогда
				Продолжить;
			КонецЕсли;
			
			_Consignment = ВетисMercuryVetdocument_2_0.Consignment();
			_Consignment.id               = "id" + _id;
			_Consignment.volume           = _СтрокаПартии.Количество;
			_Consignment.unit             = ВетисDictionary_2_0.Unit(ВетисDictionaryСлой1с.Unit(_СтрокаПартии.Unit));
			_Consignment.sourceStockEntry = ВетисMercuryVetdocument_2_0.StockEntry(_СтрокаПартии.guid);
			
			//Consignment это одна партия, значит несколько партий одной продукции будут упакованы одинаково
			//наверное, физически это должно быть несколько упаковок
			
			_packageList = Новый Массив;
			Для каждого _СтрокаУпаковка Из пДокумент.Упаковка.НайтиСтроки(Новый Структура("КлючСвязи", _СтрокаПартии.КлючСтроки)) Цикл
				
				//https://github.com/mevgenym/1c_vetis.api/issues/5#issuecomment-369898911
				Если _СтрокаУпаковка.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				_productMarks = Новый Массив;
				Для каждого _СтрокаМаркировка Из пДокумент.Маркировка.НайтиСтроки(Новый Структура("КлючСвязи", _СтрокаУпаковка.КлючСтроки)) Цикл
					_productMarks.Добавить(ВетисDictionary_2_0.ProductMarks(_СтрокаМаркировка.Маркировка, ВетисDictionaryСлой1с.ProductMarkingClass(_СтрокаМаркировка.КлассМаркировки)));
				КонецЦикла;
				
				_packageList.Добавить(ВетисDictionary_2_0.Package(
					ВетисDictionaryСлой1с.PackageLevelType(_СтрокаУпаковка.Уровень),
					ВетисDictionary_2_0.PackingType(ВетисDictionaryСлой1с.PackingType(_СтрокаУпаковка.Упаковка)),
					_СтрокаУпаковка.Количество,
					_productMarks
					));
				
			КонецЦикла;
			
			Если _packageList.Количество() > 0 Тогда
				_Consignment.packageList = ВетисDictionary_2_0.PackageList(_packageList);
			КонецЕсли;
			
			_ConsignmentСписок.Добавить(_Consignment);
			
			_authentication = ВетисMercuryVetdocument_2_0.VeterinaryAuthentication(
				ВетисDictionary_2_0.Purpose(ВетисDictionaryСлой1с.Purpose(_СтрокаВСД.НазначениеГруза)),
				_СтрокаВСД.КонтрольГосВетврачем,
				ВетисDictionaryСлой1с.ResearchResult(_СтрокаВСД.Ветсанэкспертиза20),
				_СтрокаВСД.БлагополучиеМестности
				);
				
			_VetDocument = ВетисMercuryVetdocument_2_0.VetDocument();
			_VetDocument.authentication = _authentication;
			_VetDocument.for = _Consignment.id;
			
			_VetDocumentСписок.Добавить(_VetDocument);
			
			_id = _id + 1;
		КонецЦикла;
		
		_waybill = ВетисMercuryVetdocument_2_0.Waybill();
		_waybill.issueSeries   = _ттн.Серия;
		_waybill.issueNumber   = _ттн.Номер;
		_waybill.issueDate     = _ттн.Дата;
		_waybill.type          = ВетисDictionaryСлой1с.DocumentType(_ттн.Тип);
		_waybill.broker        = ВетисDictionary_2_0.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_ттн.Посредник));
		_waybill.transportInfo = ВетисMercuryVetdocumentСлой1с.TransportInfo(_ттн.ТипТранспорта, _ттн.НомерТранспорта, _ттн.НомерПрицепа);
		_waybill.transportStorageType = ВетисDictionaryСлой1с.TransportationStorageType(_ттн.СпособХранения);
		
		_delivery = ВетисMercuryVetdocument_2_0.Delivery(
			ВетисDictionary_2_0.BusinessMember(_Отправитель, _ОтправительПредприятие),
			ВетисDictionary_2_0.BusinessMember(_Получатель, _ПолучательПредприятие),
			_ConsignmentСписок,
			ВетисMercuryVetdocument_2_0.ConsignmentDocumentList(_waybill, _VetDocumentСписок),
			ВетисDictionary_2_0.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_ттн.Посредник)),
			ВетисMercuryVetdocumentСлой1с.TransportInfo(_ттн.ТипТранспорта, _ттн.НомерТранспорта, _ттн.НомерПрицепа),
			ВетисDictionaryСлой1с.TransportationStorageType(_ттн.СпособХранения)
			);
		
		_Response = ВетисMercuryApplications_2_0.PrepareOutgoingConsignment(_delivery, _Отправитель, пОтказ, пОшибка);
	Иначе
		Для каждого _СтрокаСЖ Из пДокумент.Партии Цикл
			_Consignment = ВетисMercuryVetdocument.Consignment();
			_Consignment.volume           = _СтрокаСЖ.Количество;
			_Consignment.unit             = ВетисArgusCommon.Unit(ВетисArgusCommonСлой1с.Unit(_СтрокаСЖ.ЕдиницаИзмерения));
			_Consignment.packingList      = ВетисArgusCommon.PackingFormList(ВетисArgusCommonСлой1с.PackingForm(_СтрокаСЖ.Упаковка));
			_Consignment.packingAmount    = _СтрокаСЖ.КоличествоМест;
			_Consignment.sourceStockEntry = ВетисMercuryVetdocument.StockEntry(_СтрокаСЖ.guid);
			_ConsignmentСписок.Добавить(_Consignment);
		КонецЦикла;
		
		_VetDocument = ВетисMercuryVetdocument.VetDocument();
		_VetDocument.purpose            = ВетисArgusCommon.Purpose(ВетисArgusCommonСлой1с.Purpose(_СтрокаВСД.НазначениеГруза));
		_VetDocument.transportInfo      = ВетисArgusShipmentСлой1с.TransportInfo(_ттн.ТипТранспорта, _ттн.НомерТранспорта, _ттн.НомерПрицепа);
		_VetDocument.transportStorageType = ВетисArgusShipmentСлой1с.TransportationStorageType(_ттн.СпособХранения);
		_VetDocument.cargoInspected     = _СтрокаВСД.КонтрольГосВетврачем;
		_VetDocument.cargoExpertized    = _СтрокаВСД.Ветсанэкспертиза;
		_VetDocument.expertiseInfo      = _СтрокаВСД.ЛабораторныеИсследования;
		//Указываются только для бумажных ветеринарных сертификатов
		//_VetDocument.confirmedBy        = Ветис.Врач();
		_VetDocument.locationProsperity = _СтрокаВСД.БлагополучиеМестности;
		
		_waybill = ВетисArgusShipment.Waybill();
		_waybill.issueSeries   = _ттн.Серия;
		_waybill.issueNumber   = _ттн.Номер;
		_waybill.issueDate     = _ттн.Дата;
		_waybill.type          = ВетисArgusShipmentСлой1с.WaybillType(_ттн.Тип);
		_waybill.broker        = ВетисCerberusEnterprise.BusinessEntity(ВетисCerberusEnterpriseСлой1с.BusinessEntity(_ттн.Посредник));
		_waybill.transportInfo = ВетисArgusShipmentСлой1с.TransportInfo(_ттн.ТипТранспорта, _ттн.НомерТранспорта, _ттн.НомерПрицепа);
		_waybill.transportStorageType = ВетисArgusShipmentСлой1с.TransportationStorageType(_ттн.СпособХранения);
		
		_delivery = ВетисMercuryVetdocument.Delivery(
			ВетисCerberusEnterprise.BusinessMember(_Отправитель, _ОтправительПредприятие),
			ВетисCerberusEnterprise.BusinessMember(_Получатель, _ПолучательПредприятие),
			_ConsignmentСписок,
			ВетисMercuryVetdocument.ConsignmentDocumentList(_waybill, _VetDocument));
		
		_Response = ВетисMercuryApplications.prepareOutcomingConsignment(_delivery, _Отправитель, пОтказ, пОшибка);
	КонецЕсли;
	
	Если пОтказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	//в ответе список партий и список всд
	Для каждого _vetDocument Из _Response.vetDocument Цикл
		
		//поищем партию в документе
		_СтрокиПартии = Неопределено;
		Для каждого _Consignment Из _ConsignmentСписок Цикл
			Если _Consignment.id = _vetDocument.qualifier Тогда
				_СтрокиПартии = пДокумент.Партии.НайтиСтроки(Новый Структура("guid", _Consignment.sourceStockEntry.guid));
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если _СтрокиПартии = Неопределено Тогда
			//что то пошло не так
			Продолжить;
		КонецЕсли;
		
		//может быть несколько строк с этой партией
		//пока сделаем простой вариант - одна партия
		//сделать: отправить документ с дублями одной партии, по ответу дописать код
		//либо сворачивать дубли, упаковку брать первую
		_СтрокаПартии = _СтрокиПартии[0];
		
		//ищем существующий
		_всд = Документы.ВетисВетеринарноСопроводительныйДокумент.НайтиПоРеквизиту("uuid", _vetDocument.uuid);
		
		Если ЗначениеЗаполнено(_всд) Тогда
			_всд = _всд.ПолучитьОбъект();
		ИначеЕсли ЗначениеЗаполнено(_СтрокаПартии.ВСД) Тогда
			_всд = _СтрокаПартии.ВСД.ПолучитьОбъект();
		Иначе
			_всд = Документы.ВетисВетеринарноСопроводительныйДокумент.СоздатьДокумент();
			_всд.Дата = ТекущаяДата();
		КонецЕсли;
		
		Если _Версия20 Тогда
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать_20(_всд, _vetDocument);
		Иначе
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_всд, _vetDocument);
		КонецЕсли;
		
		_всд.ДополнительныеСвойства.Вставить("Загрузка");
		
		Попытка
			_всд.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), "prepareOutcomingConsignment_Response");
			ВызватьИсключение;
		КонецПопытки;
		
		//меняем значения в документе
		_СтрокаПартии.ВСД = _всд.Ссылка;
		_СтрокаПартии.Статус = _всд.Статус;
		_СтрокаПартии.Отправлена = Истина;
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		ВетисСинхронизация.VetDocumentListChanges(пОтказ, пОшибка);
	КонецЕсли;
	
	//http://vetrf.ru/vetrf-forum/posts/list/7130.page#44764
	//Партия приходуется на сток с той упаковкой, которая была во входящем сертификате.
	//Упаковка по умолчанию "наследуется" из стока при формировании исходящего сертификата.
	//Кроме того, упаковка содержит сведения о маркировке, по которой в том числе можно сопоставить физическую партию с записью в системе.
	//При этом в момент отгрузки (оформления исходящего сертификата) сведения об упаковке можно изменить. 
	
КонецПроцедуры

//Запрос условий регионализации
//Параметры:
// subProductList - список видов продукции (массив)
// routePointList - список точек маршрута, массив структур Страна, Регион или Предприятие
Процедура CheckShipmentRegionalization(subProductList, routePointList, пОтказ = Ложь, пОшибка = "")
	
	_issuerId = Ветис.ТекущийХС();
	
	_cargoType = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.guid
	|ИЗ
	|	Справочник.ВетисSubProduct КАК _Таблица
	|ГДЕ
	|	_Таблица.Ссылка В(&Список)");
	
	Запрос.УстановитьПараметр("Список", subProductList);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		_cargoType.Добавить(ВетисDictionary_2_0.SubProduct(Выборка.guid));
	КонецЦикла;
	
	_shipmentRoute = ВетисMercuryVetdocument_2_0.ShipmentRoute();
	
	_Индекс = 1;
	Для каждого _routePoint Из routePointList Цикл
		
		_Location = Неопределено; _Enterprise = Неопределено;
		Если _routePoint.Свойство("Предприятие") Тогда
			_Enterprise = ВетисDictionary_2_0.Enterprise(ВетисDictionaryСлой1с.Enterprise(_routePoint.Предприятие));
		Иначе
			_Location = ВетисDictionary_2_0.Location(,ВетисDictionary_2_0.Address(, ВетисDictionaryСлой1с.Country(_routePoint.Страна), ВетисDictionaryСлой1с.Region(_routePoint.Регион)));
		КонецЕсли;
		
		_shipmentRoute.routePoint.Добавить(ВетисMercuryVetdocument_2_0.ShipmentRoutePoint(_Индекс, _Location, _Enterprise));
		
		_Индекс = _Индекс + 1;
	КонецЦикла;
	
	_Response = ВетисMercuryApplications_2_0.CheckShipmentRegionalization(_cargoType, _shipmentRoute, _issuerId, пОтказ, пОшибка);
	
	Если пОтказ = Истина Тогда Возврат; КонецЕсли;
	
КонецПроцедуры


Процедура WithdrawVetDocumentOperation(пСсылка, пПричина, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если НЕ пСсылка.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ пСсылка.Тип = Перечисления.ВетисVetDocumentType.Транспортный Тогда
		Возврат;
	КонецЕсли;
	
	_Отладка = Ветис.РазрешенаОтладка();
	
	_vetDocumentId = ВетисMercuryVetdocumentСлой1с.VetDocument(пСсылка);
	
	Если Ветис.Версия_2_0() Тогда
		_Reason = ВетисMercuryVetdocument_2_0.VetDocumentStatusChangeReason(пПричина);
		
		_Получатель = ВетисDictionaryСлой1с.BusinessEntity(пСсылка.Получатель);
		
		_Response = ВетисMercuryApplications_2_0.withdrawVetDocument(_vetDocumentId, _Reason, ТекущаяДата(), _Получатель, пОтказ, пОшибка);
		
		Если пОтказ = Истина Тогда Возврат; КонецЕсли;
		
		_док = пСсылка.ПолучитьОбъект();
		
		ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать_20(_док, _Response.VetDocument);
	Иначе
		_Reason = ВетисMercuryVetdocument.WithdrawReason(пПричина);
		
		_Получатель = ВетисCerberusEnterpriseСлой1с.BusinessEntity(пСсылка.Получатель);
		
		_Response = ВетисMercuryApplications.withdrawVetDocument(_vetDocumentId, _Reason, ТекущаяДата(), _Получатель, пОтказ, пОшибка);
		
		Если пОтказ = Истина Тогда Возврат; КонецЕсли;
		
		_док = пСсылка.ПолучитьОбъект();
		
		ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_док, _Response.VetDocument);
	КонецЕсли;
	
	//_док.ДатаОбновления = ТекущаяДата();
	
	_док.ДополнительныеСвойства.Вставить("Загрузка");
	
	_док.Записать();
	
КонецПроцедуры

Функция getVetDocumentByUuid(пВСД, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_ВетисCerberusEnterpriseСлой1с = ?(Ветис.Версия_2_0(), ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисMercuryApplications = ?(Ветис.Версия_2_0(), ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.BusinessEntity КАК ХС
	|ИЗ
	|	Справочник.ВетисНастройкиПодключения.ИдентификаторыХС КАК _Таблица
	|ГДЕ
	|	Истина И _Таблица.BusinessEntity В(&Отправитель, &Получатель)");
	
	Запрос.УстановитьПараметр("Отправитель", пВСД.Отправитель);
	Запрос.УстановитьПараметр("Получатель", пВСД.Получатель);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_Отправитель = Ложь;
	_Получатель = Ложь;
	Пока Выборка.Следующий() Цикл
		_Отправитель = _Отправитель ИЛИ Выборка.ХС = пВСД.Отправитель;
		_Получатель = _Получатель ИЛИ Выборка.ХС = пВСД.Получатель;
	КонецЦикла;
	
	Если Ложь Тогда
	ИначеЕсли Ложь
		ИЛИ _Отправитель И _Получатель//оба наши
		ИЛИ НЕ _Отправитель И _Получатель
		Тогда
		_issuerId = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пВСД.Получатель);
		_enterpriseGuid = _ВетисCerberusEnterpriseСлой1с.Enterprise(пВСД.ПолучательПредприятие);
	ИначеЕсли Ложь
		ИЛИ _Отправитель И НЕ _Получатель
		Тогда
		_issuerId = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(пВСД.Отправитель);
		_enterpriseGuid = _ВетисCerberusEnterpriseСлой1с.Enterprise(пВСД.ОтправительПредприятие);
	Иначе
		пОтказ = Истина;
		пОшибка = "Не найдены настройки подключения";
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат _ВетисMercuryApplications.getVetDocumentByUuid(пВСД.uuid, _enterpriseGuid, _issuerId, пОтказ, пОшибка);
	
КонецФункции

Функция ModifyActivityLocations(пХС, пПредприятие, ModificationTypeCREATE = Истина, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_ModificationType = ?(ModificationTypeCREATE, ВетисКонстанты.RegisterModificationType_CREATE(), ВетисКонстанты.RegisterModificationType_DELETE());
	
	Если Ветис.Версия_2_0() Тогда
		
		_BusinessEntityGuid = ВетисDictionaryСлой1с.BusinessEntity(пХС);
		
		_EnterpriseGuid     = ВетисDictionaryСлой1с.Enterprise(пПредприятие);
		
		_Operation = ВетисMercuryVetdocument_2_0.BusinessEntityActivityLocationsModificationOperation(_ModificationType, _BusinessEntityGuid, _EnterpriseGuid);
		
		_BusinessEntityResponse = ВетисMercuryApplications_2_0.ModifyActivityLocations(_Operation, _BusinessEntityGuid, пОтказ, пОшибка);
		
	Иначе
		
		_BusinessEntityGuid = ВетисCerberusEnterpriseСлой1с.BusinessEntity(пХС);
		
		_EnterpriseGuid     = ВетисCerberusEnterpriseСлой1с.Enterprise(пПредприятие);
		
		_Operation = ВетисCerberusEnterprise.BusinessEntityActivityLocationsModificationOperation(_ModificationType, _BusinessEntityGuid, _EnterpriseGuid);
		
		_BusinessEntityResponse = ВетисMercuryApplications.ModifyActivityLocations(_Operation, _BusinessEntityGuid, пОтказ, пОшибка);
		
	КонецЕсли;
	
	Возврат _BusinessEntityResponse;
	
КонецФункции

Функция ModifyBusinessEntity(пХС, пПричина = Неопределено, RegisterModificationType_FIND_OR_CREATE = Истина, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_type = ?(RegisterModificationType_FIND_OR_CREATE = Истина, ВетисКонстанты.RegisterModificationType_FIND_OR_CREATE(), ВетисКонстанты.RegisterModificationType_UPDATE());
	
	Если пПричина = Неопределено Тогда
		Если _type = ВетисКонстанты.RegisterModificationType_FIND_OR_CREATE() Тогда
			_Причина = "Создание";
		Иначе
			_Причина = "Обновление";
		КонецЕсли;
	Иначе
		_Причина = пПричина;
	КонецЕсли;
	
	_ХС = пХС.ПолучитьОбъект();
	
	Если Ветис.Версия_2_0() Тогда
		
		_businessEntityGuid = ВетисDictionaryСлой1с.BusinessEntity(пХС);
		
		_businessEntity = ВетисDictionary_2_0.BusinessEntity(_businessEntityGuid);
		
		_businessEntity.type = ?(_ХС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, ВетисКонстанты.BusinessEntityType_JURIDICAL(), ВетисКонстанты.BusinessEntityType_SELF_EMPLOYED());
		
		_businessEntity.name = _ХС.Наименование;
		
		_businessEntity.fullName = _ХС.НаименованиеПолное;
		
		_businessEntity.inn = _ХС.ИНН;
		
		_businessEntity.incorporationForm = ВетисDictionary_2_0.IncorporationForm(?(_ХС.ЮрФизЛицо, "12300", "50102"));
		
		//_businessEntity.ogrn = ;
		
		//_businessEntity.juridicalAddress = ВетисDictionary_2_0.Address();
		
		_modificationOperation = ВетисMercuryVetdocument_2_0.BusinessEntityModificationOperation(_type, , _businessEntity, _Причина);
		
		_Response = ВетисMercuryApplications_2_0.ModifyBusinessEntity(_modificationOperation, _businessEntityGuid, пОтказ, пОшибка);
		
	Иначе
		
		_businessEntityGuid = ВетисCerberusEnterpriseСлой1с.BusinessEntity(пХС);
		
		_businessEntity = ВетисCerberusEnterprise.BusinessEntity(_businessEntityGuid);
		
		_businessEntity.type = ?(_ХС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, ВетисКонстанты.BusinessEntityType_JURIDICAL(), ВетисКонстанты.BusinessEntityType_SELF_EMPLOYED());
		
		_businessEntity.name = _ХС.Наименование;
		
		_businessEntity.fullName = _ХС.НаименованиеПолное;
		
		_businessEntity.inn = _ХС.ИНН;
		
		_businessEntity.incorporationForm = ВетисDictionary_2_0.IncorporationForm(?(_ХС.ЮрФизЛицо, "12300", "50102"));
		
		//_businessEntity.juridicalAddress = ВетисDictionary_2_0.Address();
		
		//_businessEntity.ogrn = ;
		
		_modificationOperation = ВетисCerberusEnterprise.BusinessEntityModificationOperation(_type, , _businessEntity, _Причина);
		
		_Response = ВетисMercuryApplications.ModifyBusinessEntity(_modificationOperation, _businessEntityGuid, пОтказ, пОшибка);
		
	КонецЕсли;
	
	Возврат _Response;
	
КонецФункции

Функция ModifyEnterprise(пПредприятие, пПричина = Неопределено, RegisterModificationType_CREATE = Истина, пОтказ = Ложь, пОшибка = "") Экспорт
//Доделана совместными усилиями:
// Орех Захаров
// Sany81
	
	_type = ?(RegisterModificationType_CREATE = Истина, ВетисКонстанты.RegisterModificationType_CREATE(), ВетисКонстанты.RegisterModificationType_UPDATE());
	
	Если пПричина = Неопределено Тогда
		Если _type = ВетисКонстанты.RegisterModificationType_CREATE() Тогда
			_Причина = "Создание";
		Иначе
			_Причина = "Обновление";
		КонецЕсли;
	Иначе
		_Причина = пПричина;
	КонецЕсли;
	
	_issuerId = Ветис.ТекущийХС();
	
	Если ТипЗнч(пПредприятие) = Тип("СправочникСсылка.ВетисEnterprise") Тогда
		_Предприятие = пПредприятие.ПолучитьОбъект();
	Иначе
		_Предприятие = пПредприятие;
	КонецЕсли;
	
	Если Ветис.Версия_2_0() Тогда
		
		_enterprise = ВетисDictionary_2_0.Enterprise();
		
		Если _type = ВетисКонстанты.RegisterModificationType_UPDATE() Тогда
			_enterpriseGuid = ВетисDictionaryСлой1с.Enterprise(пПредприятие.Ссылка);
			_enterprise.uuid = ВетисEnterpriseService_2_0.GetEnterpriseByGuid(_enterpriseGuid).uuid;
		КонецЕсли;
		
		_enterprise.name = _Предприятие.Наименование;
		
		_enterprise.type = ВетисDictionaryСлой1с.EnterpriseType(_Предприятие.type);
		
		_enterprise.Address = ВетисDictionary_2_0.Address(_Предприятие.addressView, ВетисDictionaryСлой1с.Country(_Предприятие.Country), ВетисDictionaryСлой1с.Region(_Предприятие.Region), ВетисDictionaryСлой1с.District(_Предприятие.District), ВетисDictionaryСлой1с.Locality(_Предприятие.Locality));
		
		_activity = Новый Массив;
		
		Для каждого _ВидыДеятельностиСтрока Из _Предприятие.activityList Цикл
			_activity.Добавить(ВетисDictionary_2_0.EnterpriseActivity(_ВидыДеятельностиСтрока.name));
		КонецЦикла;
		
		_enterprise.activityList = ВетисDictionary_2_0.EnterpriseActivityList(_activity);
		
		//ошибки нет, но список номеров не воспринимает
		//_numberList = Новый Массив;
		//
		//Для каждого _НомераПредприятияСтрока Из _Предприятие.НомераПредприятия Цикл
		//	_numberList.Добавить(_НомераПредприятияСтрока.Номер);
		//КонецЦикла;
		//
		//_enterprise.numberList = ВетисDictionary_2_0.EnterpriseNumberList(_numberList);
		
		_enterprise.owner = ВетисDictionary_2_0.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_Предприятие.eOwner));
		
		_modificationOperation = ВетисMercuryVetdocument_2_0.EnterpriseModificationOperation(_type, _enterprise, _Причина);
		
		_Response = ВетисMercuryApplications_2_0.ModifyEnterprise(_modificationOperation, _issuerId, пОтказ, пОшибка);
		
	Иначе
		
		_enterprise = ВетисCerberusEnterprise.Enterprise();
		
		Если _type = ВетисКонстанты.RegisterModificationType_UPDATE() Тогда
			_enterpriseGuid = ВетисCerberusEnterpriseСлой1с.Enterprise(пПредприятие.Ссылка);
			_enterprise.uuid = ВетисEnterpriseService.GetEnterpriseByGuid(_enterpriseGuid).uuid;
		КонецЕсли;
		
		_enterprise.name = _Предприятие.Наименование;
		
		_enterprise.type = ВетисCerberusEnterpriseСлой1с.EnterpriseType(_Предприятие.type);
		
		_enterprise.Address = ВетисIkar.Address(_Предприятие.addressView, ВетисIkarСлой1с.Country(_Предприятие.Country), ВетисIkarСлой1с.Region(_Предприятие.Region), ВетисIkarСлой1с.District(_Предприятие.District), ВетисIkarСлой1с.Locality(_Предприятие.Locality));
		
		_activity = Новый Массив;
		
		Для каждого _ВидыДеятельностиСтрока Из _Предприятие.activityList Цикл
			_activity.Добавить(ВетисCerberusEnterprise.EnterpriseActivity(_ВидыДеятельностиСтрока.name));
		КонецЦикла;
		
		_enterprise.activityList = ВетисCerberusEnterprise.EnterpriseActivityList(_activity);
		
		//ошибки нет, но список номеров не воспринимает
		//_numberList = Новый Массив;
		//
		//Для каждого _НомераПредприятияСтрока Из _Предприятие.НомераПредприятия Цикл
		//	_numberList.Добавить(_НомераПредприятияСтрока.Номер);
		//КонецЦикла;
		//
		//_enterprise.numberList = ВетисCerberusEnterprise.EnterpriseNumberList(_numberList);
		
		_enterprise.owner = ВетисCerberusEnterprise.BusinessEntity(ВетисCerberusEnterpriseСлой1с.BusinessEntity(_Предприятие.eOwner));
		
		_modificationOperation = ВетисCerberusEnterprise.EnterpriseModificationOperation(_type, _enterprise, _Причина);
		
		_Response = ВетисMercuryApplications.ModifyEnterprise(_modificationOperation, _issuerId, пОтказ, пОшибка);
		
	КонецЕсли;
	
	Возврат _Response;
	
КонецФункции

Функция ModifyProducerStock(ProductItemList, RegisterModificationType, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_type = RegisterModificationType;
	
	_issuerId = Ветис.ТекущийХС();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.Наименование,
	|	_Таблица.guid,
	|	_Таблица.globalID,
	|	_Таблица.piCode,
	|	_Таблица.productType,
	|	_Таблица.product.guid КАК product,
	|	_Таблица.subProduct.guid КАК subProduct,
	|	_Таблица.correspondsToGost,
	|	_Таблица.gost,
	|	_Таблица.producer.guid КАК producer,
	|	_Таблица.tmOwner.guid КАК tmOwner,
	|	_Таблица.producing.(
	|		location.guid КАК location
	|	),
	|	_Таблица.packaging.(
	|		packagingType,
	|		quantity,
	|		volume,
	|		unit.guid КАК unit
	|	)
	|ИЗ
	|	Справочник.ВетисProductItem КАК _Таблица
	|ГДЕ
	|	_Таблица.Ссылка В(&Список)");
	
	Запрос.УстановитьПараметр("Список", ProductItemList);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_productItemList = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		//операция принимает по одной записи (в 1.4 это прямо написано, в 2.0 нет такого утверждения, просто мои предположения)
		_productItemList.Очистить();
		
		Если Ветис.Версия_2_0() Тогда
			
			_productItem = ВетисDictionary_2_0.ProductItem();
			
			Если НЕ _type = ВетисКонстанты.RegisterModificationType_CREATE() Тогда
				_productItem.uuid = ВетисProductService_2_0.GetProductItemByGuid(Выборка.guid).uuid;
			КонецЕсли;
			
			Если НЕ _type = ВетисКонстанты.RegisterModificationType_DELETE() Тогда
				
				_productItem.name = Выборка.Наименование;
				_productItem.code = Выборка.piCode;
				_productItem.productType = ВетисDictionaryСлой1с.ProductType(Выборка.productType);
				_productItem.product = ВетисDictionary_2_0.Product(Выборка.product);
				_productItem.subProduct = ВетисDictionary_2_0.SubProduct(Выборка.subProduct);
				_productItem.correspondsToGost = Выборка.correspondsToGost;
				_productItem.gost = Выборка.gost;
				_productItem.producer = ВетисDictionary_2_0.BusinessEntity(Выборка.producer);
				_productItem.tmOwner = ВетисDictionary_2_0.BusinessEntity(Выборка.tmOwner);
				
				Если ЗначениеЗаполнено(Выборка.globalID) Тогда
					_productItem.globalID = Выборка.globalID;
				КонецЕсли;
				
				ВыборкаProducing = Выборка.producing.Выбрать();
				
				Пока ВыборкаProducing.Следующий() Цикл
					_productItem.producing.Добавить(ВетисDictionary_2_0.ProductItemProducing(ВетисDictionary_2_0.Enterprise(ВыборкаProducing.location)));
				КонецЦикла;
				
				ВыборкаPackaging = Выборка.packaging.Выбрать();
				
				Если ВыборкаPackaging.Следующий() Тогда
					_productItem.packaging = ВетисDictionary_2_0.Packaging(
						ВетисDictionary_2_0.PackingType(ВетисDictionaryСлой1с.PackingType(ВыборкаPackaging.packagingType)),
						ВыборкаPackaging.quantity,
						ВыборкаPackaging.volume,
						ВетисDictionary_2_0.Unit(ВыборкаPackaging.unit)
					);
				КонецЕсли;
			КонецЕсли;
			
			_productItemList.Добавить(_productItem);
			
			_modificationOperation = ВетисMercuryVetdocument_2_0.PSLModificationOperation(_type, _productItemList);
			
			_Response = ВетисMercuryApplications_2_0.ModifyProducerStockList(_modificationOperation, _issuerId, пОтказ, пОшибка);
			
			Если пОтказ = Истина Тогда
				Прервать;
			КонецЕсли;
			
			Для каждого _productItem Из _Response.productItem Цикл
				
				Если _productItem.last Тогда
					Если _productItem.active Тогда
						//новая версия
						_Объект = Выборка.Ссылка.ПолучитьОбъект();
						_Объект.Заполнить(_productItem);
						Попытка
							_Объект.Записать();
						Исключение
							пОтказ = Истина;
							пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, "ModifyProducerStock");
							Прервать;
						КонецПопытки;
					Иначе
						//удаление
						Попытка
							Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
						Исключение
							пОтказ = Истина;
							пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, "ModifyProducerStock");
							Прервать;
						КонецПопытки;
					КонецЕсли;
				Иначе
					//старая запись, пропускаем
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			//код для 1.4 аналогичный
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция Процент(Знач1, Знач2)
	
	_результат = ?(Знач2 = 0, 1, Знач1 / Знач2);
	
	Возврат ?(_результат > 1, _результат - 1, 1 - _результат) * 100;
	
КонецФункции

