
Функция Сериализовать(пОбъект) Экспорт
	
	_ЗаписьXML = Новый ЗаписьXML;
	_ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЗаписатьXML(_ЗаписьXML, пОбъект);
	
	Возврат _ЗаписьXML.Закрыть();
	
КонецФункции

Функция Десериализовать(пТекст) Экспорт
	
	_Чтение = Новый ЧтениеXML;
	
	_Чтение.УстановитьСтроку(пТекст);
	
	_Результат = ПрочитатьXML(_Чтение);
	
	_Чтение.Закрыть();
	
	Возврат _Результат;
	
КонецФункции


Функция ПолучитьСтруктуруОбъекта(пОбъект, пВыгруженные = Неопределено, пПодробно = Истина, пПодробноПоСсылке = Истина) Экспорт
	
	_Объект = пОбъект;
	
	Если ТипЗнч(пОбъект) = Тип("УдалениеОбъекта") Тогда
		_структура = Новый Структура;
		_структура.Вставить("Объект", ПолучитьСтруктуруОбъекта(_Объект.Ссылка, пВыгруженные, пПодробно, пПодробноПоСсылке));
		_структура.Вставить("Тип", "УдалениеОбъекта");
		Возврат _структура;
	КонецЕсли;
	
	_метаданные = _Объект.Метаданные();
	
	_Имя = _метаданные.Имя;
	
	_ПолноеИмя = _метаданные.ПолноеИмя();
	
	Если пВыгруженные = Неопределено Тогда
		пВыгруженные = Новый Массив;
	КонецЕсли;
	
	_структура = Новый Структура;
	_структура.Вставить("Тип", _ПолноеИмя);
	
	Если Ложь Тогда
		//
	ИначеЕсли Метаданные.Документы.Содержит(_метаданные) Тогда
		Если НЕ ЗначениеЗаполнено(_Объект.Ссылка) Тогда Возврат _структура; КонецЕсли;
		_структура.Вставить("Ref", Строка(_Объект.Ссылка.УникальныйИдентификатор()));
		Если НЕ пПодробно Тогда Возврат _структура; КонецЕсли;
		Если пВыгруженные.Найти(_Объект.Ссылка) = Неопределено Тогда пВыгруженные.Добавить(_Объект.Ссылка); Иначе Возврат _структура; КонецЕсли;
		ПолучитьСтруктуруОбъектаДобавитьРеквизиты(_Объект, _структура, _метаданные, "СтандартныеРеквизиты", пВыгруженные, пПодробноПоСсылке);
		ПолучитьСтруктуруОбъектаДобавитьРеквизиты(_Объект, _структура, _метаданные, "Реквизиты", пВыгруженные, пПодробноПоСсылке);
		ПолучитьСтруктуруОбъектаДобавитьТабличныеЧасти(_Объект, _структура, _метаданные, "ТабличныеЧасти", пВыгруженные, пПодробноПоСсылке);
		
	ИначеЕсли Метаданные.Справочники.Содержит(_метаданные) Тогда
		Если НЕ ЗначениеЗаполнено(_Объект.Ссылка) Тогда Возврат _структура; КонецЕсли;
		_структура.Вставить("Ref", Строка(_Объект.Ссылка.УникальныйИдентификатор()));
		Если НЕ пПодробно Тогда Возврат _структура; КонецЕсли;
		Если пВыгруженные.Найти(_Объект.Ссылка) = Неопределено Тогда пВыгруженные.Добавить(_Объект.Ссылка); Иначе Возврат _структура; КонецЕсли;
		ПолучитьСтруктуруОбъектаДобавитьРеквизиты(_Объект, _структура, _метаданные, "СтандартныеРеквизиты", пВыгруженные, пПодробноПоСсылке);
		ПолучитьСтруктуруОбъектаДобавитьРеквизиты(_Объект, _структура, _метаданные, "Реквизиты", пВыгруженные, пПодробноПоСсылке);
		ПолучитьСтруктуруОбъектаДобавитьТабличныеЧасти(_Объект, _структура, _метаданные, "ТабличныеЧасти", пВыгруженные, пПодробноПоСсылке);
		
	ИначеЕсли Метаданные.Перечисления.Содержит(_метаданные) Тогда
		_структура.Вставить("Имя", ВетисОбщегоНазначения.ИмяЭлементаПеречисления(_Объект));
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(_метаданные) Тогда
		_записи = Новый Массив;
		_структура.Вставить("Записи", _записи);
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(_метаданные) Тогда
		_записи = Новый Массив;
		_структура.Вставить("Записи", _записи);
		
	КонецЕсли;
	
	Возврат _структура;
	
КонецФункции

Процедура ПолучитьСтруктуруОбъектаДобавитьРеквизиты(пОбъект, пСтруктура, пМетаданные, пИмяКоллекции, пВыгруженные, пПодробно = Истина, пПодробноПоСсылке = Истина)
	
	Для каждого _реквизит Из пМетаданные[пИмяКоллекции] Цикл
		Если _реквизит.Имя = "Ссылка" Тогда Продолжить; КонецЕсли;
		_значение = пОбъект[_реквизит.Имя];
		Если ВетисОбщегоНазначения.ЭтоСсылка(ТипЗнч(_значение)) Тогда
			_значение = ПолучитьСтруктуруОбъекта(_значение, пВыгруженные, пПодробно, пПодробноПоСсылке);
		КонецЕсли;
		пСтруктура.Вставить(_реквизит.Имя, _значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСтруктуруОбъектаДобавитьТабличныеЧасти(пОбъект, пСтруктура, пМетаданные, пИмяКоллекции, пВыгруженные, пПодробно = Истина, пПодробноПоСсылке = Истина)
	
	Для каждого _ТабличнаяЧастьМД Из пМетаданные.ТабличныеЧасти Цикл
		_ТабличнаяЧастьСтруктура = Новый Массив;
		Для каждого _СтрокаТабличнаяЧасть Из пОбъект[_ТабличнаяЧастьМД.Имя] Цикл
			_СтрокаСтруктура = Новый Структура;
			ПолучитьСтруктуруОбъектаДобавитьРеквизиты(_СтрокаТабличнаяЧасть, _СтрокаСтруктура, _ТабличнаяЧастьМД, "Реквизиты", пВыгруженные, пПодробно, пПодробноПоСсылке);
			//Для каждого _реквизит Из _ТабличнаяЧастьМД.Реквизиты Цикл
			//	_СтрокаСтруктура.Вставить(_реквизит.Имя, _СтрокаТабличнаяЧасть[_реквизит.Имя]);
			//КонецЦикла;
			_ТабличнаяЧастьСтруктура.Добавить(_СтрокаСтруктура);
		КонецЦикла;
		пСтруктура.Вставить(_ТабличнаяЧастьМД.Имя, _ТабличнаяЧастьСтруктура);
	КонецЦикла;
	
КонецПроцедуры


Функция ОбработатьСсылку(пСтруктураОбъекта, пОшибка = "", пОбновление = Ложь, пОбменДаннымиЗагрузка = Истина, пУдаление = Ложь) Экспорт
	
	Если НЕ ТипЗнч(пСтруктураОбъекта) = Тип("Структура") Тогда
		пОшибка = "Некорректные входные данные 1";
		Возврат Неопределено;
	КонецЕсли;
	
	_Ссылка = Неопределено;
	
	Если НЕ пСтруктураОбъекта.Свойство("Тип") Тогда
		пОшибка = "Некорректные входные данные 1";
		Возврат Неопределено;
	ИначеЕсли пСтруктураОбъекта.Тип = "УдалениеОбъекта" Тогда
		Возврат ОбработатьСсылку(пСтруктураОбъекта.Объект, пОшибка, пОбновление, пОбменДаннымиЗагрузка, Истина);
	КонецЕсли;
	
	_менеджер = МенеджерПоИмени(пСтруктураОбъекта.Тип, пОшибка);
	
	Если НЕ пОшибка = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если _менеджер.Тип = Документы Тогда
		_Ссылка = ЗаполнитьДокумент(_менеджер.менеджер, пСтруктураОбъекта, пОшибка, пОбновление, пОбменДаннымиЗагрузка, пУдаление);
	ИначеЕсли _менеджер.Тип = Справочники Тогда
		_Ссылка = ЗаполнитьСправочник(_менеджер.менеджер, пСтруктураОбъекта, пОшибка, пОбновление, пОбменДаннымиЗагрузка, пУдаление);
	ИначеЕсли _менеджер.Тип = Перечисления Тогда
		Если НЕ пСтруктураОбъекта.Свойство("Имя") Тогда
			пОшибка = "Некорректные входные данные 2";
			Возврат Неопределено;
		ИначеЕсли пСтруктураОбъекта.Имя = "" Тогда
			_Ссылка = _менеджер.менеджер.ПустаяСсылка();
		Иначе
			_Ссылка = _менеджер.менеджер[пСтруктураОбъекта.Имя];
		КонецЕсли;
	ИначеЕсли _менеджер.Тип = РегистрыСведений Тогда
		_Ссылка = ЗаполнитьРегистрСведений(_менеджер, пСтруктураОбъекта, пОшибка, пОбновление, пОбменДаннымиЗагрузка, пУдаление);
	ИначеЕсли _менеджер.Тип = РегистрыНакопления Тогда
		_Ссылка = ЗаполнитьРегистрНакопления(_менеджер, пСтруктураОбъекта, пОшибка, пОбновление, пОбменДаннымиЗагрузка, пУдаление);
	КонецЕсли;
	
	Возврат _Ссылка;
	
КонецФункции

Функция ЗаполнитьСправочник(пМенеджер, пСтруктураОбъекта, пОшибка = "", пОбновление = Ложь, пОбменДаннымиЗагрузка = Истина, пУдаление = Ложь)
	
	_менеджер = пМенеджер;
	
	Если НЕ пСтруктураОбъекта.Свойство("ref") Тогда
		Возврат _менеджер.ПустаяСсылка();
	КонецЕсли;
	
	Если пСтруктураОбъекта.ref = "00000000-0000-0000-0000-000000000000" Тогда
		Возврат _менеджер.ПустаяСсылка();
	КонецЕсли;
	
	Если пСтруктураОбъекта.Свойство("guid") Тогда
		_ref = Новый УникальныйИдентификатор(пСтруктураОбъекта.guid);
	Иначе
		_ref = Новый УникальныйИдентификатор(пСтруктураОбъекта.ref);
	КонецЕсли;
	
	_Ссылка = _менеджер.ПолучитьСсылку(_ref);
	
	_Объект = _Ссылка.ПолучитьОбъект();
	
	//если количество больше 2, считаем что объект передан полностью и возможно его обновление
	_Обновление = _Объект = Неопределено ИЛИ пОбновление = Истина И пСтруктураОбъекта.Количество()>2;
	
	Если _Обновление И ПравоДоступа("Изменение",_менеджер.ПустаяСсылка().Метаданные()) Тогда
		Если _Объект = Неопределено Тогда
			_Объект = _менеджер.СоздатьЭлемент();
			_Объект.УстановитьСсылкуНового(_Ссылка);
		КонецЕсли;
		_Объект.ОбменДанными.Загрузка = пОбменДаннымиЗагрузка;
		УстановитьЗначение(_Объект, пСтруктураОбъекта, "Код");
		УстановитьЗначение(_Объект, пСтруктураОбъекта, "Наименование");
		УстановитьЗначение(_Объект, пСтруктураОбъекта, "ПометкаУдаления");
		Попытка
			_Объект.Записать();
		Исключение
			пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат _Ссылка;
	
КонецФункции

Функция ЗаполнитьДокумент(пМенеджер, пСтруктураОбъекта, пОшибка = "", пОбновление = Ложь, пОбменДаннымиЗагрузка = Истина, пУдаление = Ложь)
	
	Если НЕ пСтруктураОбъекта.Свойство("ref") Тогда
		пОшибка = "Некорректные входные данные";
		Возврат Неопределено;
	КонецЕсли;
	
	_менеджер = пМенеджер;
	
	//Если НЕ пСтруктураОбъекта.Свойство("guid") Тогда
	//	//пОшибка = "Некорректные входные данные";
	//	//Возврат Неопределено;
	//	Возврат _менеджер.ПустаяСсылка();
	//КонецЕсли;
	
	Если пСтруктураОбъекта.ref = "00000000-0000-0000-0000-000000000000" Тогда
		Возврат _менеджер.ПустаяСсылка();
	КонецЕсли;
	
	_Метаданные = _менеджер.ПустаяСсылка().Метаданные();
	
	_ref = Новый УникальныйИдентификатор(пСтруктураОбъекта.ref);
	
	_Ссылка = _менеджер.ПолучитьСсылку(_ref);
	
	_Объект = _Ссылка.ПолучитьОбъект();
	
	//если количество больше 2, считаем что объект передан полностью и возможно его обновление
	_Обновление = _Объект = Неопределено ИЛИ пОбновление = Истина И пСтруктураОбъекта.Количество()>2;
	
	Если _Обновление И ПравоДоступа("Изменение", _Метаданные) Тогда
		Если _Объект = Неопределено Тогда
			_Объект = _менеджер.СоздатьДокумент();
			_Объект.УстановитьСсылкуНового(_Ссылка);
		КонецЕсли;
		_Объект.ОбменДанными.Загрузка = пОбменДаннымиЗагрузка;
		УстановитьЗначение(_Объект, пСтруктураОбъекта, "Дата");
		УстановитьЗначение(_Объект, пСтруктураОбъекта, "Номер");
		УстановитьЗначение(_Объект, пСтруктураОбъекта, "Проведен");
		УстановитьЗначение(_Объект, пСтруктураОбъекта, "ПометкаУдаления");
		
		ЗаполнитьРеквизиты(_Метаданные.Реквизиты, _Объект, пСтруктураОбъекта);
		
		Для каждого _МетаданныеТЧ Из _Метаданные.ТабличныеЧасти Цикл
			Если пСтруктураОбъекта.Свойство(_МетаданныеТЧ.Имя) Тогда
				_ТЧ = _Объект[_МетаданныеТЧ.Имя];
				_ТЧ.Очистить();
				Для каждого _ИсточникСтрокаТЧ Из пСтруктураОбъекта[_МетаданныеТЧ.Имя] Цикл
					ЗаполнитьРеквизиты(_МетаданныеТЧ.Реквизиты, _ТЧ.Добавить(), _ИсточникСтрокаТЧ);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			_Объект.Записать();
		Исключение
			пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат _Ссылка;
	
КонецФункции

Функция ЗаполнитьРегистрСведений(пМенеджер, пСтруктураОбъекта, пОшибка = "", пОбновление = Ложь, пОбменДаннымиЗагрузка = Истина, пУдаление = Ложь)
	
	Если НЕ пСтруктураОбъекта.Свойство("Записи") Тогда
		пОшибка = "Некорректные входные данные 4";
		Возврат Неопределено;
	КонецЕсли;
	
	_менеджер = пМенеджер.менеджер;
	
	_Объект = _менеджер.СоздатьНаборЗаписей();
	
	_Обновление = пОбновление = Истина;
	
	Если _Обновление И ПравоДоступа("Изменение",пМенеджер.Метаданные) Тогда
		_Объект.ОбменДанными.Загрузка = пОбменДаннымиЗагрузка;
		
		Если Ложь Тогда
		//Если _менеджер = РегистрыСведений.КомплектацияКонтейнеровОстатки Тогда
		//	Для каждого _Запись Из пСтруктураОбъекта.Записи Цикл
		//		_ОбъектЗапись = _Объект.Добавить();
		//		Если _Запись.Свойство("Контейнер") Тогда
		//			_ОбъектЗапись.Контейнер = ОбработатьСсылку(_Запись.Контейнер, пОшибка, _Обновление);
		//			Если НЕ пОшибка = "" Тогда
		//				Возврат Неопределено;
		//			КонецЕсли;
		//		КонецЕсли;
		//		Если _Запись.Свойство("Коробка") Тогда
		//			_ОбъектЗапись.Коробка = ОбработатьСсылку(_Запись.Коробка, пОшибка, _Обновление);
		//			Если НЕ пОшибка = "" Тогда
		//				Возврат Неопределено;
		//			КонецЕсли;
		//		КонецЕсли;
		//		УстановитьЗначение(_ОбъектЗапись, _Запись, "Порядок");
		//		УстановитьЗначение(_ОбъектЗапись, _Запись, "Количество");
		//		УстановитьЗначение(_ОбъектЗапись, _Запись, "КоличествоМест");
		//	КонецЦикла;
		//ИначеЕсли _менеджер = РегистрыСведений.РазмещениеКонтейнеровОстатки Тогда
		//	Для каждого _Запись Из пСтруктураОбъекта.Записи Цикл
		//		_ОбъектЗапись = _Объект.Добавить();
		//		Если _Запись.Свойство("Размещение") Тогда
		//			_ОбъектЗапись.Размещение = ОбработатьСсылку(_Запись.Размещение, пОшибка, _Обновление);
		//			Если НЕ пОшибка = "" Тогда
		//				Возврат Неопределено;
		//			КонецЕсли;
		//		КонецЕсли;
		//		Если _Запись.Свойство("Контейнер") Тогда
		//			_ОбъектЗапись.Контейнер = ОбработатьСсылку(_Запись.Контейнер, пОшибка, _Обновление);
		//			Если НЕ пОшибка = "" Тогда
		//				Возврат Неопределено;
		//			КонецЕсли;
		//		КонецЕсли;
		//		УстановитьЗначение(_ОбъектЗапись, _Запись, "Порядок");
		//		УстановитьЗначение(_ОбъектЗапись, _Запись, "Количество");
		//		УстановитьЗначение(_ОбъектЗапись, _Запись, "КоличествоМест");
		//	КонецЦикла;
		Иначе
			//Возврат;
		КонецЕсли;
		
		Попытка
			_Объект.Записать();
		Исключение
			пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция ЗаполнитьРегистрНакопления(пМенеджер, пСтруктураОбъекта, пОшибка = "", пОбновление = Ложь, пОбменДаннымиЗагрузка = Истина, пУдаление = Ложь)
	
	#Если НЕ МобильноеПриложениеСервер Тогда
		Возврат Неопределено;
	#КонецЕсли
	
	Если НЕ пСтруктураОбъекта.Свойство("Записи") Тогда
		пОшибка = "Некорректные входные данные 4";
		Возврат Неопределено;
	КонецЕсли;
	
	_менеджер = пМенеджер.менеджер;
	
	_Объект = _менеджер.СоздатьНаборЗаписей();
	
	//_Обновление = пОбновление = Истина;
	//
	//Если _Обновление И ПравоДоступа("Изменение",пМенеджер.Метаданные) Тогда
	//	_Объект.ОбменДанными.Загрузка = пОбменДаннымиЗагрузка;
	//	
	//	Попытка
	//		_Объект.Записать();
	//	Исключение
	//		пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	//		Возврат Неопределено;
	//	КонецПопытки;
	//КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции


Функция МенеджерПоИмени(пИмя, пОшибка = "") Экспорт
	
	_Метаданные = Метаданные.НайтиПоПолномуИмени(пИмя);
	
	Если _Метаданные = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли Метаданные.Справочники.Содержит(_Метаданные) Тогда
		_ТипМетаданных = Справочники;
		_менеджер = Справочники[_Метаданные.Имя];
	ИначеЕсли Метаданные.Документы.Содержит(_Метаданные) Тогда
		_ТипМетаданных = Документы;
		_менеджер = Документы[_Метаданные.Имя];
	ИначеЕсли Метаданные.Перечисления.Содержит(_Метаданные) Тогда
		_ТипМетаданных = Перечисления;
		_менеджер = Перечисления[_Метаданные.Имя];
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(_Метаданные) Тогда
		_ТипМетаданных = РегистрыСведений;
		_менеджер = РегистрыСведений[_Метаданные.Имя];
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(_Метаданные) Тогда
		_ТипМетаданных = РегистрыНакопления;
		_менеджер = РегистрыНакопления[_Метаданные.Имя];
	Иначе
		пОшибка = "Некорректные входные данные 3 " + пИмя;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("Менеджер, Тип, Метаданные", _менеджер, _ТипМетаданных, _метаданные);
	
КонецФункции

Процедура УстановитьЗначение(пПриемник, пИсточник, пИмяСвойства)
	
	Если пИсточник.Свойство(пИмяСвойства) Тогда
		_Источник = пИсточник[пИмяСвойства];
		Если ТипЗнч(_Источник) = Тип("Структура") Тогда
			Если _Источник.Свойство("Тип") Тогда
				Если _Источник.Тип = "Дата" Тогда
					_Источник = Дата(_Источник.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		пПриемник[пИмяСвойства] = _Источник;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеСсылки(пПриемник, пИсточник, пИмяСвойства, пОшибка, пОбновление)
	
	Если пИсточник.Свойство(пИмяСвойства) Тогда
		пПриемник[пИмяСвойства] = ОбработатьСсылку(пИсточник[пИмяСвойства], пОшибка, пОбновление);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьРеквизиты(пМетаданныеКоллекция, пОбъект, пИсточник, пОшибка = "") Экспорт
	
	Для каждого _Реквизит Из пМетаданныеКоллекция Цикл
		_Значение = Неопределено;
		Если пИсточник.Свойство(_Реквизит.Имя, _Значение) Тогда
			Если ТипЗнч(_Значение) = Тип("Структура") Тогда
				_Значение = ОбработатьСсылку(_Значение, пОшибка);
				Если _Значение = Неопределено Тогда
					Возврат Ложь;
				Иначе
					пОбъект[_Реквизит.Имя] = _Значение;
				КонецЕсли;
			Иначе
				пОбъект[_Реквизит.Имя] = _Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция МенеджерПоСсылке(пСсылка, пОшибка = "") Экспорт
	
	_Метаданные = пСсылка.Метаданные();
	
	Если Метаданные.Справочники.Содержит(_Метаданные) Тогда
		_ТипМетаданных = Справочники;
		_менеджер = Справочники[_Метаданные.Имя];
	ИначеЕсли Метаданные.Документы.Содержит(_Метаданные) Тогда
		_ТипМетаданных = Документы;
		_менеджер = Документы[_Метаданные.Имя];
	ИначеЕсли Метаданные.Перечисления.Содержит(_Метаданные) Тогда
		_ТипМетаданных = Перечисления;
		_менеджер = Перечисления[_Метаданные.Имя];
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(_Метаданные) Тогда
		_ТипМетаданных = РегистрыСведений;
		_менеджер = РегистрыСведений[_Метаданные.Имя];
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(_Метаданные) Тогда
		_ТипМетаданных = РегистрыНакопления;
		_менеджер = РегистрыНакопления[_Метаданные.Имя];
	Иначе
		//пОшибка = "Некорректные входные данные 3 " + пИмя;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат _менеджер;
	
КонецФункции

Функция ПолучитьОбъект(Менеджер, guid) Экспорт
	
	_Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(guid));
	
	_Объект = _Ссылка.ПолучитьОбъект();
	Если _Объект = Неопределено Тогда
		Если Метаданные.Документы.Содержит(Менеджер.ПустаяСсылка().Метаданные()) Тогда
			_Объект = Менеджер.СоздатьДокумент();
		Иначе
			_Объект = Менеджер.СоздатьЭлемент();
		КонецЕсли;
		_Объект.УстановитьСсылкуНового(_Ссылка);
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции
