
Функция Заявка(пСтруктураЗапроса, пПараметры = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(пСтруктураЗапроса) = Тип("Структура") Тогда
		_СтруктураЗапроса = Новый Структура;
	Иначе
		_СтруктураЗапроса = пСтруктураЗапроса;
	КонецЕсли;
	
	_СтруктураЗапроса.Вставить("id", ИдентификаторКлиента());
	
	_СтруктураЗапроса = Новый ХранилищеЗначения(_СтруктураЗапроса, Новый СжатиеДанных(9));
	
	_ТекстЗапроса = Сериализовать(_СтруктураЗапроса);
	
	_Отказ = Ложь;
	
	_ТекстОтвета = ВыполнитьЗапрос(_ТекстЗапроса, пПараметры, _Отказ);
	
	Если _Отказ = Истина Тогда
		Возврат Новый Структура("Сообщение, Отказ", "Ошибка сервиса: " + _ТекстОтвета, Истина);
	КонецЕсли;
	
	Попытка
		_Ответ = Десериализовать(_ТекстОтвета);
	Исключение
		Возврат Новый Структура("Сообщение, Отказ", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Истина);
	КонецПопытки;
	
	Если НЕ ТипЗнч(_Ответ) = Тип("ХранилищеЗначения") Тогда
		Возврат Новый Структура("Сообщение, Отказ", "Неправильный формат ответа", Истина);
	КонецЕсли;
	
	_Ответ = _Ответ.Получить();
	
	Если НЕ ТипЗнч(_Ответ) = Тип("Структура") Тогда
		Возврат Новый Структура("Сообщение, Отказ", "Неправильный формат ответа", Истина);
	КонецЕсли;
	
	Если НЕ _Ответ.Свойство("Отказ") ИЛИ НЕ _Ответ.Свойство("Сообщение") Тогда
		Возврат Новый Структура("Сообщение, Отказ", "Неправильный формат ответа", Истина);
	КонецЕсли;
	
	Возврат _Ответ;
	
КонецФункции

Функция ВыполнитьЗапрос(пТекстЗапроса, пПараметры, пОтказ = Ложь) Экспорт
	
	Попытка 
		_Параметры = пПараметры;
		
		Если _Параметры.Порт = Неопределено Тогда
			_Соединение = Новый HTTPСоединение(_Параметры.Сервер, , _Параметры.Логин, _Параметры.Пароль,, );
		Иначе
			_Соединение = Новый HTTPСоединение(_Параметры.Сервер, _Параметры.Порт, _Параметры.Логин, _Параметры.Пароль,, );
		КонецЕсли;
		
		_Запрос = Новый HTTPЗапрос(_Параметры.Ресурс);
		
		_Запрос.Заголовки.Вставить("Content-Type", "text/xml;charset=utf-8");
		
		_Запрос.УстановитьТелоИзСтроки(пТекстЗапроса);
		
		_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
		
		Если НЕ _Ответ.КодСостояния = 200 Тогда
			пОтказ = Истина;
			Возврат "Ошибка сервиса ("+_Ответ.КодСостояния+": "+_Ответ.ПолучитьТелоКакСтроку("UTF-8")+")";
		КонецЕсли;
		
		пОтказ = Ложь;
		
		Возврат _Ответ.ПолучитьТелоКакСтроку("UTF-8");
		
	Исключение
		пОтказ = Истина;
		Возврат ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецФункции


Функция ОбработатьСсылку(пОбъект, пПараметры = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(пОбъект) = Тип("Структура") Тогда
		пПараметры.Вставить("Ошибка", "Некорректные входные данные 1");
		Возврат Неопределено;
	КонецЕсли;
	
	пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
	пПараметры.Вставить("Ошибка", "");
	пПараметры.Вставить("Обновление", ?(пПараметры.Свойство("Обновление"), пПараметры.Обновление, Ложь));
	пПараметры.Вставить("ОбменДаннымиЗагрузка", ?(пПараметры.Свойство("ОбменДаннымиЗагрузка"), пПараметры.ОбменДаннымиЗагрузка, Истина));
	пПараметры.Вставить("ОбменДаннымиАвтоЗаполнение", ?(пПараметры.Свойство("ОбменДаннымиАвтоЗаполнение"), пПараметры.ОбменДаннымиАвтоЗаполнение, Ложь));
	пПараметры.Вставить("Удаление", ?(пПараметры.Свойство("Удаление"), пПараметры.Удаление, Ложь));
	пПараметры.Вставить("Узел", ?(пПараметры.Свойство("Узел"), пПараметры.Узел, Неопределено));
	
	_Ссылка = Неопределено;
	
	Если НЕ пОбъект.Свойство("Тип") Тогда
		пПараметры.Вставить("Ошибка", "Некорректные входные данные 1");
		Возврат Неопределено;
	ИначеЕсли пОбъект.Тип = "УдалениеОбъекта" Тогда
		Если пОбъект.Свойство("Объект")
			И ТипЗнч(пОбъект.Объект) = Тип("Структура")
			И пОбъект.Объект.Свойство("Тип")
			И пОбъект.Объект.Свойство("ref") Тогда
			_Ошибка = "";
			_менеджер = МенеджерПоИмени(пОбъект.Объект.Тип, _Ошибка);
			Если _менеджер = Неопределено ИЛИ НЕ _Ошибка = "" Тогда
				пПараметры.Вставить("Ошибка", _Ошибка);
				Возврат Неопределено;
			КонецЕсли;
			_Ссылка = _менеджер.Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(пОбъект.Объект.ref));
			_Объект = _Ссылка.ПолучитьОбъект();
			Если НЕ _Объект = Неопределено Тогда
				_Объект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	_Ошибка = "";
	_менеджер = МенеджерПоИмени(пОбъект.Тип, _Ошибка);
	
	Если _менеджер = Неопределено ИЛИ НЕ _Ошибка = "" Тогда
		пПараметры.Вставить("Ошибка", _Ошибка);
		Возврат Неопределено;
	КонецЕсли;
	
	Если _менеджер.Тип = Документы Тогда
		_Ссылка = ЗаполнитьДокумент(_менеджер, пОбъект, пПараметры);
	ИначеЕсли _менеджер.Тип = Справочники Тогда
		_Ссылка = ЗаполнитьСправочник(_менеджер, пОбъект, пПараметры);
	ИначеЕсли _менеджер.Тип = Перечисления Тогда
		Если НЕ пОбъект.Свойство("Имя") Тогда
			пПараметры.Ошибка = "Некорректные входные данные 2";
			Возврат Неопределено;
		ИначеЕсли пОбъект.Имя = "" Тогда
			_Ссылка = _менеджер.менеджер.ПустаяСсылка();
		Иначе
			_Ссылка = _менеджер.менеджер[пОбъект.Имя];
		КонецЕсли;
	ИначеЕсли _менеджер.Тип = РегистрыСведений Тогда
		_Ссылка = ЗаполнитьРегистрСведений(_менеджер, пОбъект, пПараметры);
	ИначеЕсли _менеджер.Тип = РегистрыНакопления Тогда
		_Ссылка = ЗаполнитьРегистрНакопления(_менеджер, пОбъект, пПараметры);
	КонецЕсли;
	
	Возврат _Ссылка;
	
КонецФункции

Функция ЗаполнитьСправочник(пМенеджер, пОбъект, пПараметры)
	
	_менеджер = пМенеджер.менеджер;
	
	_Метаданные = пМенеджер.метаданные;
	
	Если НЕ пОбъект.Свойство("ref") ИЛИ ПустаяСтрока(пОбъект.ref) ИЛИ пОбъект.ref = ПустойУникальныйИдентификатор() Тогда
		Возврат _менеджер.ПустаяСсылка();
	КонецЕсли;
	
	_ref = Новый УникальныйИдентификатор(пОбъект.ref);
	
	_Ссылка = _менеджер.ПолучитьСсылку(_ref);
	
	Попытка
		_Объект = _Ссылка.ПолучитьОбъект();
	Исключение
		//непонятно почему происходит исключение
		Возврат _менеджер.ПустаяСсылка();
	КонецПопытки;
	
	//если количество больше 2, считаем что объект передан полностью и возможно его обновление
	_Обновление = пПараметры.Обновление = Истина И пОбъект.Количество()>2;
	
	Если (_Объект = Неопределено ИЛИ _Обновление) Тогда// И ПравоДоступа("Изменение", _Метаданные) Тогда
		
		Если _Объект = Неопределено Тогда
			_Объект = _менеджер.СоздатьЭлемент();
			_Объект.УстановитьСсылкуНового(_Ссылка);
		КонецЕсли;
		
		_Объект.ОбменДанными.Получатели.АвтоЗаполнение = пПараметры.ОбменДаннымиАвтоЗаполнение;
		_Объект.ОбменДанными.Загрузка = пПараметры.ОбменДаннымиЗагрузка;
		
		Если _Обновление Тогда
			Если _Метаданные.ДлинаКода > 0 Тогда
				УстановитьЗначение(_Объект, пОбъект, "Код");
			КонецЕсли;
			
			Если _Метаданные.ДлинаНаименования > 0 Тогда
				УстановитьЗначение(_Объект, пОбъект, "Наименование");
			КонецЕсли;
			
			УстановитьЗначение(_Объект, пОбъект, "ПометкаУдаления");
			
			ЗаполнитьРеквизиты(_Метаданные.Реквизиты, _Объект, пОбъект, пПараметры);
			
			Для каждого _МетаданныеТЧ Из _Метаданные.ТабличныеЧасти Цикл
				Если пОбъект.Свойство(_МетаданныеТЧ.Имя) Тогда
					_ТЧ = _Объект[_МетаданныеТЧ.Имя];
					_ТЧ.Очистить();
					Для каждого _ИсточникСтрокаТЧ Из пОбъект[_МетаданныеТЧ.Имя] Цикл
						ЗаполнитьРеквизиты(_МетаданныеТЧ.Реквизиты, _ТЧ.Добавить(), _ИсточникСтрокаТЧ, пПараметры);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			_Объект.Записать();
		Исключение
			пПараметры.Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Неопределено;
		КонецПопытки;
		
		Если пПараметры.Свойство("Узел") //И ЗначениеЗаполнено(пПараметры.Узел)
			И (_Метаданные.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеНаименования И _Метаданные.ДлинаНаименования > 0 И ПустаяСтрока(_Объект.Наименование)
			ИЛИ _Метаданные.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеКода И _Метаданные.ДлинаКода > 0 И ПустаяСтрока(_Объект.Код)) Тогда
			РегистрыСведений.ВетисОбъектыДляУточнения.Добавить(_Объект.Ссылка, пПараметры.Узел);
		КонецЕсли;
		
	ИначеЕсли пПараметры.Свойство("Узел") //И ЗначениеЗаполнено(пПараметры.Узел)
		И НЕ _Объект = Неопределено
		И (_Метаданные.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеНаименования И _Метаданные.ДлинаНаименования > 0 И ПустаяСтрока(_Объект.Наименование)
		ИЛИ _Метаданные.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеКода И _Метаданные.ДлинаКода > 0 И ПустаяСтрока(_Объект.Код)) Тогда
		РегистрыСведений.ВетисОбъектыДляУточнения.Добавить(_Объект.Ссылка, пПараметры.Узел);
		
	КонецЕсли;
	
	Возврат _Ссылка;
	
КонецФункции

Функция ЗаполнитьДокумент(пМенеджер, пОбъект, пПараметры)
	
	_менеджер = пМенеджер.менеджер;
	
	_Метаданные = пМенеджер.метаданные;
	
	Если НЕ пОбъект.Свойство("ref") ИЛИ ПустаяСтрока(пОбъект.ref) ИЛИ пОбъект.ref = ПустойУникальныйИдентификатор() Тогда
		Возврат _менеджер.ПустаяСсылка();
	КонецЕсли;
	
	_ref = Новый УникальныйИдентификатор(пОбъект.ref);
	
	_Ссылка = _менеджер.ПолучитьСсылку(_ref);
	
	Попытка
		_Объект = _Ссылка.ПолучитьОбъект();
	Исключение
		//непонятно почему происходит исключение
		Возврат _менеджер.ПустаяСсылка();
	КонецПопытки;
	
	//если количество больше 2, считаем что объект передан полностью и возможно его обновление
	_Обновление = пПараметры.Обновление = Истина И пОбъект.Количество()>2;
	
	Если (_Объект = Неопределено ИЛИ _Обновление) Тогда// И ПравоДоступа("Изменение", _Метаданные) Тогда
		
		Если _Объект = Неопределено Тогда
			_Объект = _менеджер.СоздатьДокумент();
			_Объект.УстановитьСсылкуНового(_Ссылка);
			_Объект.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		_Объект.ОбменДанными.Получатели.АвтоЗаполнение = пПараметры.ОбменДаннымиАвтоЗаполнение;
		_Объект.ОбменДанными.Загрузка = пПараметры.ОбменДаннымиЗагрузка;
		
		Если _Обновление Тогда
			
			УстановитьЗначение(_Объект, пОбъект, "Дата");
			УстановитьЗначение(_Объект, пОбъект, "Проведен");
			УстановитьЗначение(_Объект, пОбъект, "ПометкаУдаления");
			
			Если _Метаданные.ДлинаНомера > 0 Тогда
				УстановитьЗначение(_Объект, пОбъект, "Номер");
			КонецЕсли;
			
			ЗаполнитьРеквизиты(_Метаданные.Реквизиты, _Объект, пОбъект, пПараметры);
			
			Для каждого _МетаданныеТЧ Из _Метаданные.ТабличныеЧасти Цикл
				Если пОбъект.Свойство(_МетаданныеТЧ.Имя) Тогда
					_ТЧ = _Объект[_МетаданныеТЧ.Имя];
					_ТЧ.Очистить();
					Для каждого _ИсточникСтрокаТЧ Из пОбъект[_МетаданныеТЧ.Имя] Цикл
						ЗаполнитьРеквизиты(_МетаданныеТЧ.Реквизиты, _ТЧ.Добавить(), _ИсточникСтрокаТЧ, пПараметры);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			_Объект.Записать();
		Исключение
			пПараметры.Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Неопределено;
		КонецПопытки;
		
		Если пПараметры.Свойство("Узел") //И ЗначениеЗаполнено(пПараметры.Узел)
			И (НЕ ЗначениеЗаполнено(_Объект.Дата)
			ИЛИ _Метаданные.ДлинаНомера > 0 И ПустаяСтрока(_Объект.Номер)) Тогда
			РегистрыСведений.ВетисОбъектыДляУточнения.Добавить(_Объект.Ссылка, пПараметры.Узел);
		КонецЕсли;
		
	ИначеЕсли пПараметры.Свойство("Узел") //И ЗначениеЗаполнено(пПараметры.Узел)
		И НЕ _Объект = Неопределено И (НЕ ЗначениеЗаполнено(_Объект.Дата) ИЛИ _Метаданные.ДлинаНомера > 0 И ПустаяСтрока(_Объект.Номер)) Тогда
		РегистрыСведений.ВетисОбъектыДляУточнения.Добавить(_Объект.Ссылка, пПараметры.Узел);
		
	КонецЕсли;
	
	Возврат _Ссылка;
	
КонецФункции

Функция ЗаполнитьРегистрСведений(пМенеджер, пОбъект, пПараметры)
	
	Если НЕ пОбъект.Свойство("Записи") Тогда
		пПараметры.Ошибка = "Некорректные входные данные 4";
		Возврат Неопределено;
	КонецЕсли;
	
	_менеджер = пМенеджер.менеджер;
	_метаданные = пМенеджер.Метаданные;
	
	_Объект = _менеджер.СоздатьНаборЗаписей();
	
	_Обновление = пПараметры.Обновление = Истина;
	
	Если _Обновление И ПравоДоступа("Изменение",_метаданные) Тогда
		_Объект.ОбменДанными.Получатели.АвтоЗаполнение = пПараметры.ОбменДаннымиАвтоЗаполнение;
		_Объект.ОбменДанными.Загрузка = пПараметры.ОбменДаннымиЗагрузка;
		
		Если пОбъект.Свойство("Отбор") Тогда
			Если _метаданные.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
				_Значение = Неопределено;
				Если пОбъект.Отбор.Свойство("Регистратор", _Значение) Тогда
					_Объект.Отбор.Регистратор.Установить(ОбработатьСсылку(_Значение, пПараметры));
				КонецЕсли;
			Иначе
				Для каждого _Измерение Из _метаданные.Измерения Цикл
					_Значение = Неопределено;
					Если пОбъект.Отбор.Свойство(_Измерение.Имя, _Значение) Тогда
						_Значение = ?(ТипЗнч(_Значение) = Тип("Структура"), ОбработатьСсылку(_Значение, пПараметры), _Значение);
						_Объект.Отбор[_Измерение.Имя].Установить(_Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		//значения для отбора, переданные через параметры
		Если пПараметры.Свойство("Отбор") Тогда
			Если _метаданные.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора Тогда
				_Значение = Неопределено;
				Если пПараметры.Отбор.Свойство("Регистратор", _Значение) Тогда
					_Объект.Отбор.Регистратор.Установить(_Значение);
				КонецЕсли;
			Иначе
				Для каждого _Измерение Из _метаданные.Измерения Цикл
					_Значение = Неопределено;
					Если пПараметры.Отбор.Свойство(_Измерение.Имя, _Значение) Тогда
						_Объект.Отбор[_Измерение.Имя].Установить(_Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если пОбъект.Свойство("Записи") Тогда
			_период = ТекущаяДатаСеанса();
			Для каждого _ЗаписьСтруктура Из пОбъект.Записи Цикл
				_Запись = _Объект.Добавить();
				//ЗаполнитьРеквизиты(_метаданные.СтандартныеРеквизиты, _Запись, _ЗаписьСтруктура, пПараметры);
				ЗаполнитьРеквизиты(_метаданные.Измерения, _Запись, _ЗаписьСтруктура, пПараметры);
				ЗаполнитьРеквизиты(_метаданные.Ресурсы, _Запись, _ЗаписьСтруктура, пПараметры);
				ЗаполнитьРеквизиты(_метаданные.Реквизиты, _Запись, _ЗаписьСтруктура, пПараметры);
				Если _метаданные.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора Тогда
					_Запись.НомерСтроки = _ЗаписьСтруктура.НомерСтроки;
				КонецЕсли;
				Если НЕ _метаданные.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
					_Запись.Период = ?(ЗначениеЗаполнено(_ЗаписьСтруктура.Период), _ЗаписьСтруктура.Период, _период);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			_Объект.Записать();
		Исключение
			пПараметры.Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция ЗаполнитьРегистрНакопления(пМенеджер, пОбъект, пПараметры)
	
	#Если НЕ МобильноеПриложениеСервер Тогда
		Возврат Неопределено;
	#КонецЕсли
	
	Если НЕ пОбъект.Свойство("Записи") Тогда
		пПараметры.Вставить("Ошибка", "Некорректные входные данные 4");
		Возврат Неопределено;
	КонецЕсли;
	
	_менеджер = пМенеджер.менеджер;
	_метаданные = пМенеджер.Метаданные;
	
	_Объект = _менеджер.СоздатьНаборЗаписей();
	
	_Обновление = пПараметры.Обновление = Истина;
	
	Если _Обновление И ПравоДоступа("Изменение",_метаданные) Тогда
		_Объект.ОбменДанными.Получатели.АвтоЗаполнение = пПараметры.ОбменДаннымиАвтоЗаполнение;
		_Объект.ОбменДанными.Загрузка = пПараметры.ОбменДаннымиЗагрузка;
		
		Если пОбъект.Свойство("Отбор") Тогда
			_Значение = Неопределено;
			Если пОбъект.Отбор.Свойство("Регистратор", _Значение) Тогда
				_Объект.Отбор.Регистратор.Установить(ОбработатьСсылку(_Значение, пПараметры));
			КонецЕсли;
		КонецЕсли;
		
		//значения для отбора, переданные через параметры
		Если пПараметры.Свойство("Отбор") Тогда
			_Значение = Неопределено;
			Если пПараметры.Отбор.Свойство("Регистратор", _Значение) Тогда
				_Объект.Отбор.Регистратор.Установить(_Значение);
			КонецЕсли;
		КонецЕсли;
		
		Если пОбъект.Свойство("Записи") Тогда
			_период = ТекущаяДатаСеанса();
			Для каждого _ЗаписьСтруктура Из пОбъект.Записи Цикл
				_Запись = _Объект.Добавить();
				//ЗаполнитьРеквизиты(_метаданные.СтандартныеРеквизиты, _Запись, _ЗаписьСтруктура, пПараметры);
				ЗаполнитьРеквизиты(_метаданные.Измерения, _Запись, _ЗаписьСтруктура, пПараметры);
				ЗаполнитьРеквизиты(_метаданные.Ресурсы, _Запись, _ЗаписьСтруктура, пПараметры);
				ЗаполнитьРеквизиты(_метаданные.Реквизиты, _Запись, _ЗаписьСтруктура, пПараметры);
				_Запись.Период = ?(ЗначениеЗаполнено(_ЗаписьСтруктура.Период), _ЗаписьСтруктура.Период, _период);
				_Запись.ВидДвижения = _ЗаписьСтруктура.ВидДвижения;
				//_Запись.НомерСтроки = _ЗаписьСтруктура.НомерСтроки;
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			_Объект.Записать();
		Исключение
			пПараметры.Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Процедура УстановитьЗначение(пПриемник, пИсточник, пИмяСвойства)
	
	Если пИсточник.Свойство(пИмяСвойства) Тогда
		_Источник = пИсточник[пИмяСвойства];
		Если ТипЗнч(_Источник) = Тип("Структура") Тогда
			Если _Источник.Свойство("Тип") Тогда
				Если _Источник.Тип = "Дата" Тогда
					_Источник = Дата(_Источник.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		пПриемник[пИмяСвойства] = _Источник;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьРеквизиты(пМетаданныеКоллекция, пОбъект, пИсточник, пПараметры) Экспорт
	
	Для каждого _Реквизит Из пМетаданныеКоллекция Цикл
		_Значение = Неопределено;
		Если пИсточник.Свойство(_Реквизит.Имя, _Значение) Тогда
			Если ТипЗнч(_Значение) = Тип("Структура") Тогда
				_Значение = ОбработатьСсылку(_Значение, пПараметры);
				//Если _Значение = Неопределено Тогда
				//	Возврат Ложь;
				//Иначе
					пОбъект[_Реквизит.Имя] = _Значение;
				//КонецЕсли;
			Иначе
				пОбъект[_Реквизит.Имя] = _Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


Функция ПолучитьСтруктуруОбъекта(пОбъект, пПараметры = Неопределено) Экспорт
	
	Если пПараметры = Неопределено Тогда
		пПараметры = Новый Структура;
	КонецЕсли;
	
	Если НЕ пПараметры.Свойство("Выгруженные") Тогда
		пПараметры.Вставить("Выгруженные", Новый Массив);
	КонецЕсли;
	
	_Подробно = ?(пПараметры.Свойство("Подробно"), пПараметры.Подробно, Ложь);
	
	_Параметры = Новый Структура;
	_Параметры.Вставить("Выгруженные", пПараметры.Выгруженные);
	_Параметры.Вставить("Подробно", ?(пПараметры.Свойство("ПодробноПоСсылке"), пПараметры.ПодробноПоСсылке, Ложь));
	_Параметры.Вставить("ПодробноПоСсылке", Ложь);
	_Параметры.Вставить("СтандартныеРеквизиты", ?(пПараметры.Свойство("СтандартныеРеквизиты"), пПараметры.СтандартныеРеквизиты=Истина, Истина));
	_Параметры.Вставить("ТабличныеЧасти", ?(пПараметры.Свойство("ТабличныеЧасти"), пПараметры.ТабличныеЧасти=Истина, Истина));
	_Параметры.Вставить("Реквизиты", ?(пПараметры.Свойство("Реквизиты"), пПараметры.Реквизиты=Истина, Истина));
	
	_Объект = пОбъект;
	
	Если ТипЗнч(пОбъект) = Тип("УдалениеОбъекта") Тогда
		_структура = Новый Структура;
		_структура.Вставить("Объект", ПолучитьСтруктуруОбъекта(_Объект, _Параметры));
		_структура.Вставить("Тип", "УдалениеОбъекта");
		Возврат _структура;
	КонецЕсли;
	
	_метаданные = _Объект.Метаданные();
	
	_Имя = _метаданные.Имя;
	
	_ПолноеИмя = _метаданные.ПолноеИмя();
	
	_структура = Новый Структура;
	_структура.Вставить("Тип", _ПолноеИмя);
	
	Если Ложь Тогда
		//
	ИначеЕсли Метаданные.Документы.Содержит(_метаданные) Тогда
		
		Если НЕ ЗначениеЗаполнено(_Объект.Ссылка) Тогда Возврат _структура; КонецЕсли;
		
		_структура.Вставить("ref", Строка(_Объект.Ссылка.УникальныйИдентификатор()));
		//_структура.Вставить("Дата", ЗначениеРеквизита(_Объект.Ссылка, "Дата"));
		
		Если НЕ _Подробно Тогда Возврат _структура; КонецЕсли;
		
		Если _Параметры.Выгруженные.Найти(_Объект.Ссылка) = Неопределено Тогда _Параметры.Выгруженные.Добавить(_Объект.Ссылка); Иначе Возврат _структура; КонецЕсли;
		
		Если ЭтоСсылка(ТипЗнч(_Объект)) Тогда
			ПолучитьСтруктуруСсылки(_структура, _Объект, _метаданные, _Параметры);
		Иначе
			ПолучитьСтруктуруОбъектаДобавитьРеквизиты(_Объект, _структура, _метаданные, "СтандартныеРеквизиты", _Параметры);
			ПолучитьСтруктуруОбъектаДобавитьРеквизиты(_Объект, _структура, _метаданные, "Реквизиты", _Параметры);
			ПолучитьСтруктуруОбъектаДобавитьТабличныеЧасти(_Объект, _структура, _метаданные, "ТабличныеЧасти", _Параметры);
		КонецЕсли;
		
	ИначеЕсли Метаданные.Справочники.Содержит(_метаданные) Тогда
		
		Если НЕ ЗначениеЗаполнено(_Объект.Ссылка) Тогда Возврат _структура; КонецЕсли;
		
		_структура.Вставить("ref", Строка(_Объект.Ссылка.УникальныйИдентификатор()));
		
		Если НЕ _Подробно Тогда Возврат _структура; КонецЕсли;
		
		Если _Параметры.Выгруженные.Найти(_Объект.Ссылка) = Неопределено Тогда _Параметры.Выгруженные.Добавить(_Объект.Ссылка); Иначе Возврат _структура; КонецЕсли;
		
		Если ЭтоСсылка(ТипЗнч(_Объект)) Тогда
			ПолучитьСтруктуруСсылки(_структура, _Объект, _метаданные, _Параметры);
		Иначе
			ПолучитьСтруктуруОбъектаДобавитьРеквизиты(_Объект, _структура, _метаданные, "СтандартныеРеквизиты", _Параметры);
			ПолучитьСтруктуруОбъектаДобавитьРеквизиты(_Объект, _структура, _метаданные, "Реквизиты", _Параметры);
			ПолучитьСтруктуруОбъектаДобавитьТабличныеЧасти(_Объект, _структура, _метаданные, "ТабличныеЧасти", _Параметры);
		КонецЕсли;
		
	ИначеЕсли Метаданные.Перечисления.Содержит(_метаданные) Тогда
		_структура.Вставить("Имя", ИмяЭлементаПеречисления(_Объект));
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(_метаданные) Тогда
		_записи = Новый Массив;
		Для каждого _Запись Из _Объект Цикл
			_записьСтруктура = Новый Структура;
			ПолучитьСтруктуруОбъектаДобавитьРеквизиты(_Запись, _записьСтруктура, _метаданные, "СтандартныеРеквизиты", _Параметры);
			ПолучитьСтруктуруОбъектаДобавитьРеквизиты(_Запись, _записьСтруктура, _метаданные, "Измерения", _Параметры);
			ПолучитьСтруктуруОбъектаДобавитьРеквизиты(_Запись, _записьСтруктура, _метаданные, "Ресурсы", _Параметры);
			ПолучитьСтруктуруОбъектаДобавитьРеквизиты(_Запись, _записьСтруктура, _метаданные, "Реквизиты", _Параметры);
			_записи.Добавить(_записьСтруктура);
		КонецЦикла;
		_структура.Вставить("Записи", _записи);
		
		_отбор = Новый Структура;
		Для каждого _Элемент Из _Объект.Отбор Цикл
			Если _Элемент.Использование Тогда
				Если ЭтоСсылка(ТипЗнч(_Элемент.Значение)) Тогда
					_отбор.Вставить(_Элемент.Имя, ПолучитьСтруктуруОбъекта(_Элемент.Значение, _Параметры));
				Иначе
					_отбор.Вставить(_Элемент.Имя, _Элемент.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		_структура.Вставить("Отбор", _отбор);
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(_метаданные) Тогда
		_записи = Новый Массив;
		Для каждого _Запись Из _Объект Цикл
			_записьСтруктура = Новый Структура;
			ПолучитьСтруктуруОбъектаДобавитьРеквизиты(_Запись, _записьСтруктура, _метаданные, "СтандартныеРеквизиты", _Параметры);
			ПолучитьСтруктуруОбъектаДобавитьРеквизиты(_Запись, _записьСтруктура, _метаданные, "Измерения", _Параметры);
			ПолучитьСтруктуруОбъектаДобавитьРеквизиты(_Запись, _записьСтруктура, _метаданные, "Ресурсы", _Параметры);
			ПолучитьСтруктуруОбъектаДобавитьРеквизиты(_Запись, _записьСтруктура, _метаданные, "Реквизиты", _Параметры);
			_записи.Добавить(_записьСтруктура);
		КонецЦикла;
		_структура.Вставить("Записи", _записи);
		
		_отбор = Новый Структура;
		Для каждого _Элемент Из _Объект.Отбор Цикл
			Если _Элемент.Использование Тогда
				Если ЭтоСсылка(ТипЗнч(_Элемент.Значение)) Тогда
					_отбор.Вставить(_Элемент.Имя, ПолучитьСтруктуруОбъекта(_Элемент.Значение, _Параметры));
				Иначе
					_отбор.Вставить(_Элемент.Имя, _Элемент.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		_структура.Вставить("Отбор", _отбор);
		
	КонецЕсли;
	
	Возврат _структура;
	
КонецФункции

Процедура ПолучитьСтруктуруОбъектаДобавитьРеквизиты(пОбъект, пСтруктура, пМетаданные, пИмяКоллекции, пПараметры)
	
	Для каждого _реквизит Из пМетаданные[пИмяКоллекции] Цикл
		Если _реквизит.Имя = "Ссылка" ИЛИ _реквизит.Имя = "ИмяПредопределенныхДанных" Тогда Продолжить; КонецЕсли;
		_значение = пОбъект[_реквизит.Имя];
		Если ЭтоСсылка(ТипЗнч(_значение)) Тогда
			пСтруктура.Вставить(_реквизит.Имя, ПолучитьСтруктуруОбъекта(_значение, пПараметры));
		Иначе
			пСтруктура.Вставить(_реквизит.Имя, _значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСтруктуруОбъектаДобавитьТабличныеЧасти(пОбъект, пСтруктура, пМетаданные, пИмяКоллекции, пПараметры)
	
	Для каждого _ТабличнаяЧастьМД Из пМетаданные.ТабличныеЧасти Цикл
		_ТабличнаяЧастьСтруктура = Новый Массив;
		Для каждого _СтрокаТабличнаяЧасть Из пОбъект[_ТабличнаяЧастьМД.Имя] Цикл
			_СтрокаСтруктура = Новый Структура;
			ПолучитьСтруктуруОбъектаДобавитьРеквизиты(_СтрокаТабличнаяЧасть, _СтрокаСтруктура, _ТабличнаяЧастьМД, "СтандартныеРеквизиты", пПараметры);
			ПолучитьСтруктуруОбъектаДобавитьРеквизиты(_СтрокаТабличнаяЧасть, _СтрокаСтруктура, _ТабличнаяЧастьМД, "Реквизиты", пПараметры);
			_ТабличнаяЧастьСтруктура.Добавить(_СтрокаСтруктура);
		КонецЦикла;
		пСтруктура.Вставить(_ТабличнаяЧастьМД.Имя, _ТабличнаяЧастьСтруктура);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтруктуруСсылки(пСтруктура, пСсылка, пМетаданные, пПараметры)
	
	Если НЕ СсылкаСуществует(пСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	_Параметры = пПараметры;
	
	Запрос = Новый Запрос(ПолучитьСтруктуруСсылкиТекстЗапроса(пМетаданные, _Параметры));
	
	Запрос.УстановитьПараметр("Ссылка", пСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Если _Параметры.Свойство("СтандартныеРеквизиты") И _Параметры.СтандартныеРеквизиты Тогда
		Для каждого _реквизит Из пМетаданные.СтандартныеРеквизиты Цикл
			Если _реквизит.Имя = "Ссылка" ИЛИ _реквизит.Имя = "ИмяПредопределенныхДанных" Тогда Продолжить; КонецЕсли;
			_значение = Выборка[_реквизит.Имя];
			Если ЭтоСсылка(ТипЗнч(_значение)) Тогда
				пСтруктура.Вставить(_реквизит.Имя, ПолучитьСтруктуруОбъекта(_значение, _Параметры));
			Иначе
				пСтруктура.Вставить(_реквизит.Имя, _значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если _Параметры.Свойство("Реквизиты") И _Параметры.Реквизиты Тогда
		Для каждого _реквизит Из пМетаданные.Реквизиты Цикл
			_значение = Выборка[_реквизит.Имя];
			Если ЭтоСсылка(ТипЗнч(_значение)) Тогда
				пСтруктура.Вставить(_реквизит.Имя, ПолучитьСтруктуруОбъекта(_значение, _Параметры));
			Иначе
				пСтруктура.Вставить(_реквизит.Имя, _значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если _Параметры.Свойство("ТабличныеЧасти") И _Параметры.ТабличныеЧасти Тогда
		Для каждого _ТабличнаяЧастьМД Из пМетаданные.ТабличныеЧасти Цикл
			_Коллекция = пМетаданные.ТабличныеЧасти[_ТабличнаяЧастьМД.Имя];
			_СтрокиТЧ = Новый Массив;
			ВыборкаТЧ = Выборка[_ТабличнаяЧастьМД.Имя].Выбрать();
			Пока ВыборкаТЧ.Следующий() Цикл
				_структурастрока = Новый Структура;
				Для каждого _реквизит Из _Коллекция.СтандартныеРеквизиты Цикл
					_Значение = ВыборкаТЧ[_реквизит.Имя];
					Если ЭтоСсылка(ТипЗнч(_Значение)) Тогда
						_структурастрока.Вставить(_реквизит.Имя, ПолучитьСтруктуруОбъекта(_Значение, _Параметры));
					Иначе
						_структурастрока.Вставить(_реквизит.Имя, _Значение);
					КонецЕсли;
				КонецЦикла;
				Для каждого _реквизит Из _Коллекция.Реквизиты Цикл
					_Значение = ВыборкаТЧ[_реквизит.Имя];
					Если ЭтоСсылка(ТипЗнч(_Значение)) Тогда
						_структурастрока.Вставить(_реквизит.Имя, ПолучитьСтруктуруОбъекта(_Значение, _Параметры));
					Иначе
						_структурастрока.Вставить(_реквизит.Имя, _Значение);
					КонецЕсли;
				КонецЦикла;
				_СтрокиТЧ.Добавить(_структурастрока);
			КонецЦикла;
			пСтруктура.Вставить(_ТабличнаяЧастьМД.Имя, _СтрокиТЧ);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруСсылкиТекстЗапроса(пМетаданные, пПараметры)
	
	_Параметры = пПараметры;
	
	_поля = "";
	
	Если _Параметры.Свойство("СтандартныеРеквизиты") И _Параметры.СтандартныеРеквизиты Тогда
		Для каждого _реквизит Из пМетаданные.СтандартныеРеквизиты Цикл
			Если _реквизит.Имя = "Ссылка" ИЛИ _реквизит.Имя = "ИмяПредопределенныхДанных" Тогда Продолжить; КонецЕсли;
			_поля = _поля + ?(_поля="","",Символы.ПС + ",") + " _Таблица." + _реквизит.Имя;
		КонецЦикла;
	КонецЕсли;
	
	Если _Параметры.Свойство("Реквизиты") И _Параметры.Реквизиты Тогда
		Для каждого _реквизит Из пМетаданные.Реквизиты Цикл
			_поля = _поля + ?(_поля="","",Символы.ПС + ",") + " _Таблица." + _реквизит.Имя;
		КонецЦикла;
	КонецЕсли;
	
	Если _Параметры.Свойство("ТабличныеЧасти") И _Параметры.ТабличныеЧасти Тогда
		Для каждого _ТабличнаяЧастьМД Из пМетаданные.ТабличныеЧасти Цикл
			_поля = _поля + ?(_поля="","",Символы.ПС + ",") + " _Таблица." + _ТабличнаяЧастьМД.Имя + ".(";
			_полятч = "";
			_Коллекция = пМетаданные.ТабличныеЧасти[_ТабличнаяЧастьМД.Имя];
			Для каждого _реквизит Из _Коллекция.СтандартныеРеквизиты Цикл
				_полятч = _полятч + Символы.ПС + "		" + ?(_полятч="","",",") + _реквизит.Имя;
			КонецЦикла;
			Для каждого _реквизит Из _Коллекция.Реквизиты Цикл
				_полятч = _полятч + Символы.ПС + "		" + ?(_полятч="","",",") + _реквизит.Имя;
			КонецЦикла;
			_поля = _поля + Символы.ПС + _полятч + Символы.ПС + "	) КАК " + _ТабличнаяЧастьМД.Имя + "";
		КонецЦикла;
	КонецЕсли;
	
	_Текст = СтрШаблон(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	| %1
	|ИЗ
	|	%2 КАК _Таблица
	|ГДЕ
	|	_Таблица.Ссылка = &Ссылка",
	_поля, пМетаданные.ПолноеИмя());
	
	Возврат _Текст;
	
КонецФункции


Функция Сериализовать(пОбъект) Экспорт
	
	Возврат СериализоватьXML(пОбъект);
	
КонецФункции

Функция Десериализовать(пТекст) Экспорт
	
	Возврат ДесериализоватьXML(пТекст);
	
КонецФункции

Функция СериализоватьJSON(пОбъект, пЗапись = Неопределено) Экспорт
	
	Если НЕ пЗапись = Неопределено Тогда
		_Запись = пЗапись;
	Иначе
		_Запись = Новый ЗаписьJSON;
		_Запись.УстановитьСтроку(Новый ПараметрыЗаписиJSON(,Символы.Таб));
	КонецЕсли;
	
	Если ТипЗнч(пОбъект) = Тип("Структура") Тогда
		_Запись.ЗаписатьНачалоОбъекта();
		Для каждого _Свойство Из пОбъект Цикл
			Если ТипЗнч(_Свойство.Значение) = Тип("Структура") Тогда
				_Запись.ЗаписатьИмяСвойства(_Свойство.Ключ);
				СериализоватьJSON(_Свойство.Значение, _Запись);
			ИначеЕсли ТипЗнч(_Свойство.Значение) = Тип("Массив") Тогда
				_Запись.ЗаписатьИмяСвойства(_Свойство.Ключ);
				СериализоватьJSON(_Свойство.Значение, _Запись);
			Иначе
				_Запись.ЗаписатьИмяСвойства(_Свойство.Ключ);
				СериализоватьJSONЗаписатьЗначение(_Запись, _Свойство.Значение);
			КонецЕсли;
		КонецЦикла;
		_Запись.ЗаписатьКонецОбъекта();
		
	ИначеЕсли ТипЗнч(пОбъект) = Тип("Массив") Тогда
		_Запись.ЗаписатьНачалоМассива();
		Для каждого _Значение Из пОбъект Цикл
			Если ТипЗнч(_Значение) = Тип("Структура") Тогда
				СериализоватьJSON(_Значение, _Запись);
			ИначеЕсли ТипЗнч(_Значение) = Тип("Массив") Тогда
				СериализоватьJSON(_Значение, _Запись);
			Иначе
				//_Запись.ЗаписатьЗначение(Строка(_Значение));
				СериализоватьJSONЗаписатьЗначение(_Запись, _Свойство.Значение);
			КонецЕсли;
		КонецЦикла;
		_Запись.ЗаписатьКонецМассива();
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если пЗапись = Неопределено Тогда
		Возврат _Запись.Закрыть();
	КонецЕсли;
	
КонецФункции

Процедура СериализоватьJSONЗаписатьЗначение(пЗапись, пЗначение)
	
	Если ТипЗнч(пЗначение) = Тип("Число") Тогда
		пЗапись.ЗаписатьЗначение(пЗначение);
	ИначеЕсли ТипЗнч(пЗначение) = Тип("Булево") Тогда
		пЗапись.ЗаписатьЗначение(пЗначение);
	ИначеЕсли ТипЗнч(пЗначение) = Тип("Дата") Тогда
		//пЗапись.ЗаписатьЗначение(Формат(пЗначение, "ДФ=yyyy,MM,dd,hh,mm,ss"));
		пЗапись.ЗаписатьНачалоОбъекта();
		пЗапись.ЗаписатьИмяСвойства("Тип");
		пЗапись.ЗаписатьЗначение("Дата");
		пЗапись.ЗаписатьИмяСвойства("Значение");
		пЗапись.ЗаписатьЗначение(Формат(пЗначение, "ДФ=yyyyMMddHHmmss"));
		пЗапись.ЗаписатьКонецОбъекта();
	ИначеЕсли пЗначение = Неопределено Тогда
		пЗапись.ЗаписатьЗначение(пЗначение);
	Иначе
		пЗапись.ЗаписатьЗначение(Строка(пЗначение));
	КонецЕсли;
	
КонецПроцедуры

Функция ДесериализоватьJSON(пТекст, пОшибка = "") Экспорт
	
	_чтение = Новый ЧтениеJSON;
	_чтение.УстановитьСтроку(пТекст);
	
	_Результат = ПрочитатьJSON(_чтение);
	
	_чтение.Закрыть();
	
	Возврат _Результат
	
КонецФункции

Функция СериализоватьXML(пОбъект) Экспорт
	
	_Запись = Новый ЗаписьXML;
	
	_Запись.УстановитьСтроку();
	
	ЗаписатьXML(_Запись, пОбъект);
	
	Возврат _Запись.Закрыть();
	
КонецФункции

Функция ДесериализоватьXML(пТекст) Экспорт
	
	_чтение = Новый ЧтениеXML;
	_чтение.УстановитьСтроку(пТекст);
	
	_Результат = ПрочитатьXML(_чтение);
	
	_чтение.Закрыть();
	
	Возврат _Результат;
	
КонецФункции


Функция ПолучитьОбъект(пМенеджер, пУИД, пСоздавать = Истина) Экспорт
	
	_Ссылка = пМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(пУИД));
	
	_Объект = _Ссылка.ПолучитьОбъект();
	Если _Объект = Неопределено И пСоздавать = Истина Тогда
		_метаданные = пМенеджер.ПустаяСсылка().Метаданные();
		Если Метаданные.Документы.Содержит(_метаданные) Тогда
			_Объект = пМенеджер.СоздатьДокумент();
		ИначеЕсли Метаданные.Справочники.Содержит(_метаданные) Тогда
			_Объект = пМенеджер.СоздатьЭлемент();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		_Объект.УстановитьСсылкуНового(_Ссылка);
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция ПолучитьСсылку(пМенеджер, пУИД, пПроверять = Истина) Экспорт
	
	_Ссылка = ?(ТипЗнч(пМенеджер) = Тип("Строка"), Вычислить(пМенеджер), пМенеджер).ПолучитьСсылку(Новый УникальныйИдентификатор(пУИД));
	
	Если пПроверять = Истина Тогда
		Если СсылкаСуществует(_Ссылка) Тогда
			Возврат _Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат _Ссылка;
	КонецЕсли;
	
КонецФункции

Функция СсылкаСуществует(пСсылка) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ "+пСсылка.Метаданные().ПолноеИмя()+" ГДЕ Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", пСсылка);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

Функция МенеджерПоИмени(пИмя, пОшибка = "") Экспорт
	
	_Метаданные = Метаданные.НайтиПоПолномуИмени(пИмя);
	
	Если _Метаданные = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли Метаданные.Справочники.Содержит(_Метаданные) Тогда
		_ТипМетаданных = Справочники;
		_менеджер = Справочники[_Метаданные.Имя];
	ИначеЕсли Метаданные.Документы.Содержит(_Метаданные) Тогда
		_ТипМетаданных = Документы;
		_менеджер = Документы[_Метаданные.Имя];
	ИначеЕсли Метаданные.Перечисления.Содержит(_Метаданные) Тогда
		_ТипМетаданных = Перечисления;
		_менеджер = Перечисления[_Метаданные.Имя];
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(_Метаданные) Тогда
		_ТипМетаданных = РегистрыСведений;
		_менеджер = РегистрыСведений[_Метаданные.Имя];
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(_Метаданные) Тогда
		_ТипМетаданных = РегистрыНакопления;
		_менеджер = РегистрыНакопления[_Метаданные.Имя];
	Иначе
		пОшибка = "Некорректные входные данные 3 " + пИмя;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("Менеджер, Тип, Метаданные", _менеджер, _ТипМетаданных, _метаданные);
	
КонецФункции

Функция МенеджерПоСсылке(пСсылка, пОшибка = "") Экспорт
	
	_Метаданные = пСсылка.Метаданные();
	
	Если Метаданные.Справочники.Содержит(_Метаданные) Тогда
		_ТипМетаданных = Справочники;
		_менеджер = Справочники[_Метаданные.Имя];
	ИначеЕсли Метаданные.Документы.Содержит(_Метаданные) Тогда
		_ТипМетаданных = Документы;
		_менеджер = Документы[_Метаданные.Имя];
	ИначеЕсли Метаданные.Перечисления.Содержит(_Метаданные) Тогда
		_ТипМетаданных = Перечисления;
		_менеджер = Перечисления[_Метаданные.Имя];
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(_Метаданные) Тогда
		_ТипМетаданных = РегистрыСведений;
		_менеджер = РегистрыСведений[_Метаданные.Имя];
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(_Метаданные) Тогда
		_ТипМетаданных = РегистрыНакопления;
		_менеджер = РегистрыНакопления[_Метаданные.Имя];
	Иначе
		//пОшибка = "Некорректные входные данные 3 " + пИмя;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат _менеджер;
	
КонецФункции

Функция ИмяЭлементаПеречисления(ЗначениеПеречисления) Экспорт
	//УТ 10.3
	ИмяЭлемента = Строка(ЗначениеПеречисления);
	Для каждого ЭлементПеречисления Из Метаданные.Перечисления[ЗначениеПеречисления.Метаданные().Имя].ЗначенияПеречисления Цикл
		Если ЭлементПеречисления.Синоним = Строка(ЗначениеПеречисления) Тогда
			ИмяЭлемента = ЭлементПеречисления.Имя;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ИмяЭлемента;
	
КонецФункции

Функция ЭтоСсылка(Тип) Экспорт
	//УТ 10.3
	Если Тип = Тип("Неопределено") Тогда
		Возврат Ложь;
	Иначе
		Возврат Справочники.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
			//ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
			//ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
			//ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
			//ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
			//ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
			//ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип);
	КонецЕсли;
	
КонецФункции

Функция ЗначениеРеквизита(пСсылка, пИмя) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ _Таблица."+пИмя+" КАК Значение ИЗ "+пСсылка.Метаданные().ПолноеИмя()+" КАК _Таблица ГДЕ _Таблица.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", пСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Значение;
	
КонецФункции

Функция ИдентификаторКлиента() Экспорт
	
	Возврат Строка(Вычислить("Новый СистемнаяИнформация").ИдентификаторКлиента);
	
КонецФункции

Функция ПустойУникальныйИдентификатор() Экспорт
	
	Возврат "00000000-0000-0000-0000-000000000000";
	
КонецФункции
