
Функция ActivityLocationList(BusinessMember) Экспорт
	
	_Объект = Создать("ActivityLocationList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, BusinessMember, "businessMember");
	
	Возврат _Объект;
	
КонецФункции

Функция Address(addressView = Неопределено, countryGuid = Неопределено, regionGuid = Неопределено, districtGuid = Неопределено, localityGuid = Неопределено, streetGuid = Неопределено, house = Неопределено, building = Неопределено) Экспорт
	
	_Объект = Создать("Address");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Country(countryGuid), "country");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Region(regionGuid), "region");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, District(districtGuid), "district");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Locality(localityGuid), "locality");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Street(streetGuid), "street");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, house, "house");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, building, "building");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, addressView, "addressView");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий заболевание.
//Параметры:
// name - Наименование заболевания
Функция AnimalDisease(guid = Неопределено) Экспорт
	
	_Объект = Создать("AnimalDisease");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid, "guid");
	
	Возврат _Объект;
	
КонецФункции

//тип, описывающий хозяйствующий субъект (ХС)
// Параметры:
//  guid - Строка - собственно guid
//       - Структура - структура со значениями свойств
Функция BusinessEntity(guid = Неопределено) Экспорт
	
	_Объект = Создать("BusinessEntity");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

//тип, описывающий связку хозяйствующего субъекта и площадки (поднадзорного объекта)
Функция BusinessMember(businessEntityGuid, enterpriseGuid, globalID = Неопределено) Экспорт
	
	_Объект = Создать("BusinessMember");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, BusinessEntity(businessEntityGuid), "businessEntity");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Enterprise(enterpriseGuid), "enterprise");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, globalID, "globalID");
	
	Возврат _Объект;
	
КонецФункции

Функция ComplexDate(пОбъект, пДень = Ложь, пЧас = Ложь, пМинута = Ложь) Экспорт
	
	Перем _Объект;
	
	Если ТипЗнч(пОбъект) = Тип("Дата") Тогда
		
		Если пЧас = Ложь Тогда
			_Дата = пОбъект;
		Иначе
			_Дата = Ветис.ВремяСервиса(пОбъект);
		КонецЕсли;
		
		_Объект = Создать("ComplexDate");
		
		_Объект.year  = Год(_Дата);
		_Объект.month = Месяц(_Дата);
		
		Если пДень = Истина Тогда
			_Объект.day   = День(_Дата);
			Если пЧас = Истина Тогда
				_Объект.hour   = Час(_Дата);
				Если пМинута = Истина Тогда
					_Объект.minute   = Минута(_Дата);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(пОбъект) = Тип("ОбъектXDTO") Тогда
		
		_свойства = пОбъект.Свойства();
		
		_гггг = ?(_свойства.Получить("year") = Неопределено ИЛИ пОбъект.year = Неопределено, 1, Число(пОбъект.year));
		_мм = ?(_свойства.Получить("month") = Неопределено ИЛИ пОбъект.month = Неопределено, 1, Число(пОбъект.month));
		_дд = ?(_свойства.Получить("day") = Неопределено ИЛИ пОбъект.day = Неопределено, 1, Число(пОбъект.day));
		
		_чч = ?(_свойства.Получить("hour") = Неопределено ИЛИ пОбъект.hour = Неопределено, Неопределено, Число(пОбъект.hour));
		_мин = ?(_свойства.Получить("minute") = Неопределено ИЛИ пОбъект.minute = Неопределено, 0, Число(пОбъект.minute));
		
		Если _чч = Неопределено Тогда
			_Объект = Дата(_гггг, _мм, _дд);
		Иначе
			_Объект = Дата(_гггг, _мм, _дд, _чч, _мин, 0);
			_Объект = Ветис.ВремяМестное(_Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат _Объект;
		
КонецФункции

Функция Country(guid = Неопределено) Экспорт
	
	_Объект = Создать("Country");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция CountryList(guid = Неопределено) Экспорт
	
	_Объект = Создать("CountryList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid, "country", "ВетисDictionary_2_0.Country");
	
	Возврат _Объект;
	
КонецФункции

Функция District(guid = Неопределено) Экспорт
	
	_Объект = Создать("District");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция DistrictList(guid = Неопределено) Экспорт
	
	_Объект = Создать("DistrictList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid, "district", "ВетисDictionary_2_0.District");
	
	Возврат _Объект;
	
КонецФункции

//тип, описывающий предприятие
// Параметры:
//  guid - Строка - собственно guid
//       - Структура - структура со значениями свойств
Функция Enterprise(guid = Неопределено) Экспорт
	
	_Объект = Создать("Enterprise");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция EnterpriseActivity(name = Неопределено) Экспорт
	
	_Объект = Создать("EnterpriseActivity");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, name, "name");
	
	Возврат _Объект;
	
КонецФункции

Функция EnterpriseActivityList(activity = Неопределено) Экспорт
	
	_Объект = Создать("EnterpriseActivityList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, activity, "activity");
	
	_Объект.count = _Объект.activity.Количество();
	_Объект.offset = 0;
	_Объект.total = 0;
	
	Возврат _Объект;
	
КонецФункции

Функция EnterpriseList(enterprise = Неопределено) Экспорт
	
	_Объект = Создать("EnterpriseList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, enterprise, "enterprise");
	
	_Объект.count = _Объект.enterprise.Количество();
	_Объект.offset = 0;
	_Объект.total = 0;
	
	Возврат _Объект;
	
КонецФункции

Функция EnterpriseNumberList(enterpriseNumber = Неопределено) Экспорт
	
	_Объект = Создать("EnterpriseNumberList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, enterpriseNumber, "enterpriseNumber");
	
	Возврат _Объект;
	
КонецФункции

Функция FederalDistrict(guid = Неопределено) Экспорт
	
	_Объект = Создать("FederalDistrict");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция IncorporationForm(code, shortName = "", name = "") Экспорт
	
	_Объект = Создать("IncorporationForm");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, code, "code");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, name, "name");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, shortName, "shortName");
	
	Возврат _Объект;
	
КонецФункции

Функция Locality(guid = Неопределено) Экспорт
	
	_Объект = Создать("Locality");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция LocalityList(guid = Неопределено) Экспорт
	
	_Объект = Создать("LocalityList");
	
	Если НЕ guid = Неопределено Тогда
		_Объект.locality.Добавить(Country(guid));
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Тип, содержащий информацию о пункте маршрута следования.
//Параметры:
// name - Название пункта перегрузки
// address - Адрес пункта перегрузки
Функция Location(name = "", address = Неопределено) Экспорт
	
	_Объект = Создать("Location");
	
	_Объект.name = name;
	
	Если address = Неопределено Тогда
		//
	Иначе
		_Объект.address = address;
	КонецЕсли;
	
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий препарат/вакцину, которыми обрабатывались животные.
//Параметры:
// ID - Идентификационный (уникальный) номер препарата
// name - Наименование вакцины/препарата
// series - Номер серии препарата/вакцины
// producer - dt:BusinessMember - Производитель препарата/вакцины
Функция MedicinalDrug(ID = "", name = "", series = "", producer = Неопределено) Экспорт
	
	_Объект = Создать("MedicinalDrug");
	
	_Объект.ID     = ID;
	_Объект.name   = name;
	_Объект.series = series;
	
	Если НЕ producer = Неопределено Тогда
		_Объект.producer = producer;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий организацию, в т.ч. учреждения структуры Россельхознадзора, ветеринарных управлений субъектов РФ и т.д.
Функция Organization() Экспорт
	
	_Объект = Создать("Organization");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий упаковку партии продукции.
//Поддерживается указание многоуровневой упаковки и маркировки партии продукции.
//Параметры:
// level        - dt:PackageLevelType - Уровень упаковки
// packingType  - dt:PackingType - Тип упаковки
// quantity     - xs:integer - Количество единиц упаковки
// productMarks - dt:ProductMarks - Маркировка партии продукции
Функция Package(level = Неопределено, packingType = Неопределено, quantity = Неопределено, productMarks = Неопределено) Экспорт
	
	_Объект = Создать("Package");
	
	//если level = Неопределено, все остальное не имеет смысла
	//APLM0007 - Wrong application data format. Format validation failed due to XML Schema rules:  Элемент 'quantity' не предусмотрен.
	//APLM0007 - Wrong application data format. Format validation failed due to XML Schema rules:  Элемент 'packingType' не предусмотрен.
	Если НЕ level = Неопределено Тогда
		ВетисОбщегоНазначения.УстановитьЗначение(_Объект, level, "level");
		ВетисОбщегоНазначения.УстановитьЗначение(_Объект, packingType, "packingType", , PackingType());
		ВетисОбщегоНазначения.УстановитьЗначение(_Объект, quantity, "quantity");
		ВетисОбщегоНазначения.УстановитьЗначение(_Объект, productMarks, "productMarks", , ProductMarks());
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция PackageList(package = Неопределено) Экспорт
	
	_Объект = Создать("PackageList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, package, "package");
	
	//_Объект.count = _Объект.package.Количество();
	//_Объект.offset = 0;
	//_Объект.total = 0;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий вариант фасовки продукции.
//Поддерживается указание многоуровневой упаковки и маркировки партии продукции.
//Параметры:
// packagingType - dt:PackingType - Тип упаковки
// quantity    - xs:integer - Количество единиц упаковки
// volume      - bs:Decimal - Объём единицы упаковки товара
// unit        - dt:Unit - Единица измерения объёма единицы упаковки товара
Функция Packaging(packagingType, quantity = Неопределено, volume = Неопределено, unit = Неопределено) Экспорт
	
	_Объект = Создать("Packaging");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, packagingType, "packagingType");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, quantity, "quantity");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, volume, "volume");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, unit, "unit");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий вид упаковки.
//по xsd это bs:GenericVersioningEntity, по справке bs:GenericEntity (24.10.2017), считаем что по xsd правильнее
Функция PackingType(guid = Неопределено) Экспорт
	
	_Объект = Создать("PackingType");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid, "guid");
	
	Возврат _Объект;
	
КонецФункции

//тип, описывающий производителя продукции
Функция Producer(enterpriseGuid = Неопределено, role = Неопределено) Экспорт
	
	_Объект = Создать("Producer");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Enterprise(enterpriseGuid), "enterprise");
	
	_Объект.role = ?(role = Неопределено, ВетисКонстанты.EnterpriseRole_PRODUCER(), role);
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий список производителей продукции
Функция ProducerList(guid) Экспорт
	
	_Объект = Создать("ProducerList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid, "producer", "ВетисDictionary_2_0.Producer");
	
	_Объект.count = _Объект.producer.Количество();
	_Объект.offset = 0;
	_Объект.total = 0;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий продукцию.
Функция Product(guid = Неопределено) Экспорт
	
	_Объект = Создать("Product");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий cведения о наименовании продукции в соответствии с номенклатурой производителя.
Функция ProductItem(guid = Неопределено, name = Неопределено, packaging = Неопределено) Экспорт
	
	_Объект = Создать("ProductItem");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, ?(ПустаяСтрока(guid), Неопределено, guid), "guid");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, name, "name");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, packaging, "packaging");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий список наименований продукции
//Параметры:
// productItemList - Наименование продукции в номенклатуре производителя. Массив - dt:ProductItem 0..*
Функция ProductItemList(productItemList = Неопределено) Экспорт
	
	_Объект = Создать("ProductItemList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, productItemList, "productItem");
	
	_Объект.count = _Объект.productItem.Количество();
	_Объект.offset = 0;
	_Объект.total = 0;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий площадку, на которой выпускается продукция
//Параметры:
// location - Площадка, осуществляющая выпуск продукции. dt:Enterprise 1..1
Функция ProductItemProducing(location = Неопределено) Экспорт
	
	_Объект = Создать("ProductItemProducing");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, location, "location");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий список маркировок продукции.
//Под маркировкой понимается всё, что может быть физически нанесено на упаковку или непосредственно на продукцию.
//Для каждой маркировки может быть указан её тип (см. атрибут class), который также может определять формат маркировки.
//Параметры:
// class - Описание упаковки. dt:ProductMarkingClass
Функция ProductMarks(content = Неопределено, class = Неопределено) Экспорт
	
	_Объект = Создать("ProductMarks");
	
	//сделать: проверить с пустым __content
	//MERC13457 - Маркировка обязательна для заполнения.
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, content, "__content", , "0123456789");
	
	//MERC13456 - Идентификатор типа маркировки не указан или указан несуществующий.
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, class, "class", , ВетисКонстанты.ProductMarkingClass_UNDEFINED());
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий назначение груза.
Функция Purpose(guid = Неопределено) Экспорт
	
	_Объект = Создать("Purpose");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция Region(guid = Неопределено) Экспорт
	
	_Объект = Создать("Region");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция RegionList(guid = Неопределено) Экспорт
	
	_Объект = Создать("RegionList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid, "region", "ВетисDictionary_2_0.Region");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий условие регионализации, соблюдаемое при перевозке груза.
//Параметры:
// referenceNumber - Номер условия
// text - xs:Text - Формулировка условия
// strict - xs:boolean - Обязательность соблюдения условия
// relatedDisease - xs:String - Заболевание, к которому относится данное условие
Функция RegionalizationCondition(guid = Неопределено, referenceNumber = Неопределено, text = Неопределено, strict = Неопределено, relatedDisease = Неопределено) Экспорт
	
	_Объект = Создать("RegionalizationCondition");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid, "guid");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, referenceNumber, "referenceNumber");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, text, "text");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, strict, "strict");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, relatedDisease, "relatedDisease", "ВетисDictionary_2_0.AnimalDisease");
	
	Возврат _Объект;
	
КонецФункции

//Тип, содержащий информацию о пункте маршрута следования.
//Параметры:
// name - Наименование метода исследования
Функция ResearchMethod(name = "") Экспорт
	
	_Объект = Создать("ResearchMethod");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Лев(name, 255), "name");
	
	Возврат _Объект;
	
КонецФункции

Функция Street(guid = Неопределено) Экспорт
	
	_Объект = Создать("Street");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция StreetList(guid = Неопределено) Экспорт
	
	_Объект = Создать("StreetList");
	
	Если НЕ guid = Неопределено Тогда
		_Объект.street.Добавить(Country(guid));
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий вид продукции.
Функция SubProduct(guid = Неопределено, name = Неопределено) Экспорт
	
	_Объект = Создать("SubProduct");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, name, "name");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий единицу измерения.
Функция Unit(guid = Неопределено) Экспорт
	
	_Объект = Создать("Unit");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции


//Природа ВСД (электронный или бумажный).
Функция DocumentNature(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.DocumentNature_ELECTRONIC();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.DocumentNature_PAPER();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ProductMarkingClass(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.ProductMarkingClass_UNDEFINED();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.ProductMarkingClass_BN();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.ProductMarkingClass_SSCC();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Тип, описывающий cпособ хранения при перевозке.
Функция TransportationStorageType(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.TransportationStorageType_FROZEN();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.TransportationStorageType_CHILLED();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.TransportationStorageType_COOLED();
	ИначеЕсли value = 4 Тогда
		Возврат ВетисКонстанты.TransportationStorageType_VENTILATED();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


Функция Создать(пИмя, пФабрика = Неопределено) Экспорт
	
	Возврат ВетисОбщегоНазначения.Создать(пИмя, URI(), пФабрика);
	
КонецФункции

Функция URI() Экспорт
	
	Возврат "http://api.vetrf.ru/schema/cdm/dictionary/v2";
	
КонецФункции
