
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ ДополнительныеСвойства.Свойство("Загрузка")
		И (СтатусТранзакции = Перечисления.ВетисСтатусТранзакции.Отправлена
		ИЛИ СтатусТранзакции = Перечисления.ВетисСтатусТранзакции.Аннулирована)
		И НЕ Ветис.РазрешенаОтладка() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	_к1 = 0;_к2 = 0;_к3 = 0;
	Для каждого _СтрокаПартии Из Партии Цикл
		_СтрокаПартии.Статус = _СтрокаПартии.ВСД.Статус;
		_к1 = _к1 + ?(_СтрокаПартии.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен, 1, 0);
		_к2 = _к2 + ?(_СтрокаПартии.Статус = Перечисления.ВетисVetDocumentStatus.Погашен, 1, 0);
		_к3 = _к3 + ?(_СтрокаПартии.Статус = Перечисления.ВетисVetDocumentStatus.Аннулирован, 1, 0);
	КонецЦикла;
	
	_Количество = Партии.Количество();
	Если _Количество = 0 Тогда
		Статус = Перечисления.ВетисVetDocumentStatus.ПустаяСсылка();
	ИначеЕсли _к1 = _Количество Тогда
		Статус = Перечисления.ВетисVetDocumentStatus.Оформлен;
	ИначеЕсли _к2 = _Количество Тогда
		Статус = Перечисления.ВетисVetDocumentStatus.Погашен;
	ИначеЕсли _к3 = _Количество Тогда
		Статус = Перечисления.ВетисVetDocumentStatus.Аннулирован;
	Иначе
		Статус = Перечисления.ВетисVetDocumentStatus.ПустаяСсылка();
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("Загрузка") Тогда
		Возврат;
	КонецЕсли;
	
	Количество = Партии.Итог("Количество");
	
	КоличествоМест = 0;
	Для каждого _СтрокаУпаковка Из Упаковка Цикл
		КоличествоМест = КоличествоМест + _СтрокаУпаковка.Количество;
	КонецЦикла;
	
	Если ТТН[0].НомерТранспорта = "" Тогда
		ТТН[0].НомерТранспорта = "-";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = Ветис.ТекущийПользователь();
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	
	ЕстьОшибки = ЕстьОшибки ИЛИ НЕ ЗначениеЗаполнено(Отправитель);
	ЕстьОшибки = ЕстьОшибки ИЛИ НЕ ЗначениеЗаполнено(ОтправительПредприятие);
	
	ЕстьОшибки = ЕстьОшибки ИЛИ НЕ ЗначениеЗаполнено(Получатель);
	ЕстьОшибки = ЕстьОшибки ИЛИ НЕ ЗначениеЗаполнено(ПолучательПредприятие);
	
	Для каждого _ПартииСтрока Из Партии Цикл
		ЕстьОшибки = ЕстьОшибки ИЛИ НЕ ЗначениеЗаполнено(_ПартииСтрока.StockEntry);
		ЕстьОшибки = ЕстьОшибки ИЛИ НЕ ЗначениеЗаполнено(_ПартииСтрока.Количество);
		//ЕстьОшибки = ЕстьОшибки ИЛИ НЕ ЗначениеЗаполнено(_ПартииСтрока.КоличествоМест);
		//ЕстьОшибки = ЕстьОшибки ИЛИ НЕ ЗначениеЗаполнено(_ПартииСтрока.Упаковка);
		//ЕстьОшибки = ЕстьОшибки ИЛИ НЕ ЗначениеЗаполнено(_ПартииСтрока.Маркировка);
	КонецЦикла;
	
	//Если ЗначениеЗаполнено(ДокументОснование) Тогда
	//	ЕстьОшибки = ЕстьОшибки ИЛИ НЕ Количество = ДокументОснование.Товары.Итог("Количество");
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Статус = Неопределено;
	
	СтатусТранзакции = Неопределено;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Отправитель = Ветис.ТекущийХС();
	
	ОтправительПредприятие = Ветис.ТекущееПредприятие();
	
	_всд = РезультатыОсмотра.Добавить();
	_всд.НазначениеГруза       = Ветис.Настройки_ВСД_НазначениеГруза();
	_всд.БлагополучиеМестности = Ветис.Настройки_ВСД_БлагополучиеМестности();
	_всд.Ветсанэкспертиза      = Ветис.Настройки_ВСД_ВСЭ();
	_всд.КонтрольГосВетврачем  = Ветис.Настройки_ВСД_КонтрольГосВетврачем();
	
	_ттн = ТТН.Добавить();
	_ттн.Дата      = ТекущаяДатаСеанса();
	_ттн.Тип       = Перечисления.ВетисDocumentType.ТовароТранспортнаяНакладная;
	_ттн.Транспорт = Ветис.Настройки_ТТН_Транспорт();
	
	Если ЗначениеЗаполнено(_ттн.Транспорт) Тогда
		_Транспорт = ВетисОбщегоНазначения.ПолучитьСтруктуруСсылки(_ттн.Транспорт);
		_ттн.ТипТранспорта  = _Транспорт.ТипТранспорта;
		_ттн.НомерТранспорта= _Транспорт.Номер;
		_ттн.НомерПрицепа   = _Транспорт.НомерПрицепа;
		_ттн.Посредник      = _Транспорт.Перевозчик;
		_ттн.СпособХранения = _Транспорт.СпособХранения;
	Иначе
		_ттн.ТипТранспорта  = Перечисления.ВетисTransportType.Автомобильный;
		_ттн.Посредник      = Ветис.Настройки_ТТН_Посредник();
		_ттн.СпособХранения = Ветис.Настройки_ТТН_СпособХранения();
	КонецЕсли;
	
	Ответственный = Ветис.ТекущийПользователь();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//2019-01-23
	//попытка сделать регистр накопления
	//задачу на данный момент вполне решить не удастся, т.к. данных недостаточно
	//по истории записей СЖ мы видим только изменения, но не понятно в результате чего они получились
	//1. приход можно сделать по ВСД, их берем из записей СЖ (сейчас делается при записи элемента справочника ВетисStockEntry)
	//2. расход можно сделать по транспортной, причем только по "своим"
	//не учитываются транспортные, созданные через веб, т.к. нет апи для их получения (есть исходящие ВСД, но в них нет ссылки на СЖ, этот ВСД будет связан с записью СЖ у получателя при гашении)
	//не учитывается инвентаризация (недоступна через апи)
	//не учитываются прочие манипуляции с записями СЖ
	//как вариант, можно сделать некий универсальный документ для остальных случаев
	
	Если Ветис.Настройки_РегистрНакопленияStockEntry() Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	_Таблица.StockEntry,
		|	_Таблица.ВСД,
		|	_Таблица.Количество
		|ИЗ
		|	Документ.ВетисТранспортнаяПартия.Партии КАК _Таблица
		|ГДЕ
		|	ИСТИНА
		|	И _Таблица.Ссылка = &Ссылка
		|	И _Таблица.ВСД.Статус В (ЗНАЧЕНИЕ(Перечисление.ВетисVetDocumentStatus.Оформлен), ЗНАЧЕНИЕ(Перечисление.ВетисVetDocumentStatus.Погашен))
		|	И ИСТИНА");
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Движения.ВетисStockEntry.Записывать = Истина;
		Пока Выборка.Следующий() Цикл
			_Движение = Движения.ВетисStockEntry.Добавить();
			_Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			_Движение.Период = Дата;
			_Движение.vetDocument = Выборка.ВСД;
			_Движение.BusinessEntity = Отправитель;
			_Движение.Enterprise = ОтправительПредприятие;
			_Движение.StockEntry = Выборка.StockEntry;
			_Движение.volume = Выборка.Количество;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры
