
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаОтправить(Команда)
	
	Перем _Отказ, _Ошибка;
	
	Если НЕ Объект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	КомандаОтправитьНаСервере(_Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомандаОтправитьНаСервере(пОтказ = Ложь, пОшибка = "")
	
	_СтруктураПоиска = Новый Структура("КлючСвязи");
	
	_Версия20 = Ветис.Версия_2_0();
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	_ВетисMercuryApplications = ?(_Версия20, ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	_ВетисMercuryVetdocument = ?(_Версия20, ВетисMercuryVetdocument_2_0, ВетисMercuryVetdocument);
	
	_issuerId = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(Объект.ХС);
	_enterpriseGuid = _ВетисCerberusEnterpriseСлой1с.Enterprise(Объект.Предприятие);
	
	_stockEntryList = Новый Массив;
	_stockEntryList1 = Новый Массив;
	
	Для каждого _СтрокаТовары Из Объект.Товары Цикл
		
		Если _СтрокаТовары.Отправлена Тогда
			Продолжить;
		КонецЕсли;
		
		_СтруктураПоиска.КлючСвязи = _СтрокаТовары.КлючСтроки;
		_СтрокиУпаковка = Объект.Упаковка.НайтиСтроки(_СтруктураПоиска);
		_СтрокиМаркировка = Новый Массив;
		Для каждого _СтрокаУпаковка Из _СтрокиУпаковка Цикл
			_СтруктураПоиска.КлючСвязи = _СтрокаУпаковка.КлючСтроки;
			_СтрокаУпаковкаСтрокиМаркировка = Объект.Маркировка.НайтиСтроки(_СтруктураПоиска);
			Для каждого _СтрокаМаркировка Из _СтрокаУпаковкаСтрокиМаркировка Цикл
				_СтрокиМаркировка.Добавить(_СтрокаМаркировка);
			КонецЦикла;
		КонецЦикла;
		
		_СтрокиПроизводители = Новый Массив;
		_СтрокиПроизводители.Добавить(Новый Структура("Предприятие, Роль", _СтрокаТовары.ПроизводительПредприятие, Перечисления.ВетисEnterpriseRole.PRODUCER));
		
		_stockEntry = _ВетисMercuryVetdocument.StockEntry();
		
		Если ЗначениеЗаполнено(_СтрокаТовары.uuid) Тогда
			_stockEntry.uuid = _СтрокаТовары.uuid;
		КонецЕсли;
		
		_stockEntry.batch = _ВетисMercuryVetdocument.Batch();
		
		_Товары = Новый Массив;
		_Товары.Добавить(_СтрокаТовары);
		
		_всд = Новый Структура("Товары,Упаковка,Маркировка,Производители,ИДПартии", _Товары, _СтрокиУпаковка, _СтрокиМаркировка, _СтрокиПроизводители, Новый Массив);
		
		Если _Версия20 Тогда
			_stockEntry.batch = ВетисMercuryVetdocumentСлой1с.BatchКонвертировать_20(_всд);
		Иначе
			ВетисMercuryVetdocumentСлой1с.BatchКонвертировать(_stockEntry.batch, _СтрокаТовары);
		КонецЕсли;
		
		Если _СтрокаТовары.Удаление Тогда
			_stockEntry.batch.volume = 0;
			Если _Версия20 Тогда
				Для каждого _package Из _stockEntry.batch.packageList.package Цикл
					_package.quantity = 0;
				КонецЦикла;
			Иначе
				Для каждого _package Из _stockEntry.batch.packageList.package Цикл
					_package.quantity = 0;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		//новые будем отпралять по одной, потому что пока непонятно как идентифицировать их в ответе
		//если откзаться от обработки ответа, то можно все скопом отправлять
		Если ЗначениеЗаполнено(_СтрокаТовары.uuid) Тогда
			_stockEntryList.Add(_stockEntry);
		Иначе
			_stockEntryList1.Очистить();
			_stockEntryList1.Add(_stockEntry);
			_Результат = ВетисMercuryApplicationsСлой1с.ResolveDiscrepancy(_enterpriseGuid, _stockEntryList1, Объект.АктПричина, Объект.АктОписание, _issuerId, пОтказ, пОшибка);
			
			Если пОтказ = Истина Тогда
				Возврат;
			КонецЕсли;
			
			//новые идут одной строкой
			Для каждого _stockEntry Из _Результат.stockEntry Цикл
				_СтрокаТовары.Отправлена = Истина;
				_СтрокаТовары.guid = _stockEntry.guid;
				_СтрокаТовары.uuid = _stockEntry.uuid;
			КонецЦикла;
			
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если _stockEntryList.Количество() > 0 Тогда
		_Результат = ВетисMercuryApplicationsСлой1с.ResolveDiscrepancy(_enterpriseGuid, _stockEntryList, Объект.АктПричина, Объект.АктОписание, _issuerId, пОтказ, пОшибка);
		
		Если пОтказ = Истина Тогда
			Возврат;
		КонецЕсли;
		
		//измененные идут по две, новая и старая версия
		Для каждого _stockEntry Из _Результат.stockEntry Цикл
			_СтрокиТовары = Объект.Товары.НайтиСтроки(Новый Структура("uuid", _stockEntry.uuid));
			Для каждого _СтрокаТовары Из _СтрокиТовары Цикл
				Если _СтрокаТовары.uuid = _stockEntry.uuid Тогда
					_СтрокаТовары.Отправлена = Истина;
				КонецЕсли;
				Если _stockEntry.active И _stockEntry.last Тогда
					//_СтрокаТовары.uuid = _stockEntry.uuid;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоОстаткам(Команда)
	
	Перем _Отказ, _Ошибка;
	
	КомандаЗаполнитьПоОстаткамНаСервере(_Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомандаЗаполнитьПоОстаткамНаСервере(пОтказ = Ложь, пОшибка = "")
	
	Перем _stockEntry, _параметры;
	
	_Версия20 = Ветис.Версия_2_0();
	
	Если НЕ _Версия20 Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Товары.Очистить();
	Объект.PackageList.Очистить();
	Объект.ProductMarks.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.guid,
	|	_Таблица.uuid,
	|	_Таблица.Enterprise.guid КАК EnterpriseGuid,
	|	_Таблица.BusinessEntity.guid КАК issuerId,
	|	_Таблица.ProductType,
	|	_Таблица.Product,
	|	_Таблица.SubProduct,
	|	_Таблица.ProductItem,
	|	_Таблица.ProductItemName,
	|	_Таблица.Unit,
	|	_Таблица.seOwner,
	|	_Таблица.dateOfProductionFirst,
	|	_Таблица.dateOfProductionSecond,
	|	_Таблица.dateOfProductionInformal,
	|	_Таблица.expiryDateFirst,
	|	_Таблица.expiryDateSecond,
	|	_Таблица.expiryDateInformal,
	|	_Таблица.perishable,
	|	_Таблица.lowGradeCargo,
	|	_Таблица.PackageList.(
	|		КлючСтроки,
	|		level,
	|		packingType,
	|		quantity
	|	) КАК Упаковка,
	|	_Таблица.ProductMarks.(
	|		КлючСвязи,
	|		value,
	|		class
	|	) КАК Маркировка
	|ИЗ
	|	Справочник.ВетисStockEntry КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И _Таблица.last
	|	И _Таблица.active
	|	И _Таблица.volume > 0
	|	И НЕ _Таблица.status = ЗНАЧЕНИЕ(Перечисление.ВетисVersionStatus.WITHDRAWN)
	|	И _Таблица.BusinessEntity = &BusinessEntity
	|	И _Таблица.Enterprise = &Enterprise
	|	И ИСТИНА");
	
	Запрос.УстановитьПараметр("BusinessEntity", Объект.ХС);
	Запрос.УстановитьПараметр("Enterprise", Объект.Предприятие);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_КлючСтроки = 0;
	_КлючСтрокиУпаковка = 0;
	_СтруктураПоиска = Новый Структура;
	
	Пока Выборка.Следующий() Цикл
		
		_КлючСтроки = _КлючСтроки + 1;
		
		_строкаСЖ = Объект.Товары.Добавить();
		
		_строкаСЖ.StockEntry = Выборка.Ссылка;
		_строкаСЖ.guid = Выборка.guid;
		_строкаСЖ.uuid = Выборка.uuid;
		
		//ЗаполнитьЗначенияСвойств(_строкаСЖ, _batch.Товары[0]);
		
		_строкаСЖ.КлючСтроки = _КлючСтроки;
		
		_Упаковка = Выборка.Упаковка.Выбрать();
		_Маркировка = Выборка.Маркировка.Выбрать();
		
		Пока _Упаковка.Следующий() Цикл
			
			_КлючСтрокиУпаковка = _КлючСтрокиУпаковка + 1;
			
			_СтрокаУпаковка = Объект.PackageList.Добавить();
			ЗаполнитьЗначенияСвойств(_СтрокаУпаковка, _Упаковка);
			_СтрокаУпаковка.КлючСвязи = _КлючСтроки;
			_СтрокаУпаковка.КлючСтроки = _КлючСтрокиУпаковка;
			
			_СтруктураПоиска.Вставить("КлючСвязи",_Упаковка.КлючСтроки);
			_Маркировка.Сбросить();
			Пока _Маркировка.НайтиСледующий() Цикл
				_СтрокаМаркировка = Объект.ProductMarks.Добавить();
				ЗаполнитьЗначенияСвойств(_СтрокаМаркировка, _Маркировка);
				_СтрокаМаркировка.КлючСвязи = _КлючСтрокиУпаковка;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоМакету(Команда)
	
	ОткрытьФорму("Документ.ВетисИнвентаризация.Форма.ФормаЗаполнитьПоМакету", ,,,,,Новый ОписаниеОповещения("ЗаполнитьПоМакетуОбработкаОповещения", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМакетуОбработкаОповещения(Результат, Параметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Объект.Товары.Очистить();
		Для каждого _Строка Из Результат Цикл
			_СтрокаТовары = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(_СтрокаТовары, _строка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ХСПриИзменении(Элемент)
	
	Если ОтправительСвязь Тогда
		Объект.Предприятие = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ОтправительСвязь Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Объект.ХС) Тогда
			ОткрытьФорму("Справочник.ВетисEnterprise.ФормаВыбора", Новый Структура("BusinessEntity", Объект.ХС),,,,,Новый ОписаниеОповещения("ПредприятиеОбработкаОповещения",ЭтаФорма));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		Объект.Предприятие = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительСвязьНажатие(Элемент)
	
	ОтправительСвязь = НЕ ОтправительСвязь;
	
	УстановитьВидимостьКлиент("ОтправительСвязь");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКлиент(пИмяСобытия = Неопределено)
	
	Если пИмяСобытия = "ОтправительСвязь" ИЛИ пИмяСобытия = Неопределено Тогда
		Элементы.ОтправительСвязь.Подсказка = ?(ОтправительСвязь, "с учетом связи", "без учета связи");
		Элементы.ОтправительСвязь.Картинка = ?(ОтправительСвязь, БиблиотекаКартинок.ВетисЕстьСвязь, БиблиотекаКартинок.ВетисНетСвязи);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//Если Поле.Имя = "ТоварыВозвратныйВСД" Тогда
	//	//ОткрытьЗначение(Элементы.Товары.ТекущиеДанные.ВозвратныйВСД);
	//ИначеЕсли Поле.Имя = "ТоварыВСД" И ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.guid) Тогда
	//	//ОткрытьЗначение(Элементы.Товары.ТекущиеДанные.ВСД);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	//Отказ = Копирование;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Для каждого _ид Из Элемент.ВыделенныеСтроки Цикл
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(_ид);
		Если ТекущиеДанные.Отправлена Тогда
			Отказ = Истина;
			Сообщить("Отправленные удалять нельзя");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого _ид Из Элемент.ВыделенныеСтроки Цикл
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(_ид);
		Для каждого _СтрокаУпаковка Из Объект.Упаковка.НайтиСтроки(Новый Структура("КлючСвязи", ТекущиеДанные.КлючСтроки)) Цикл
			Для каждого _СтрокаМаркировка Из Объект.Маркировка.НайтиСтроки(Новый Структура("КлючСвязи", _СтрокаУпаковка.КлючСтроки)) Цикл
				Объект.Маркировка.Удалить(_СтрокаМаркировка);
			КонецЦикла;
			Объект.Упаковка.Удалить(_СтрокаУпаковка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	//Для каждого _СтрокаУпаковка Из Объект.Упаковка Цикл
	//	Если Объект.Товары.НайтиСтроки(Новый Структура("КлючСтроки", _СтрокаУпаковка.КлючСвязи)).Количество()=0 Тогда
	//		Объект.Упаковка.Удалить(_СтрокаУпаковка);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Для каждого _СтрокаМаркировка Из Объект.Маркировка Цикл
	//	Если Объект.Упаковка.НайтиСтроки(Новый Структура("КлючСтроки", _СтрокаМаркировка.КлючСвязи)).Количество()=0 Тогда
	//		Объект.Маркировка.Удалить(_СтрокаМаркировка);
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	_ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если _ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Упаковка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", _ТекущиеДанные.КлючСтроки);
	
	_СтрокиУпаковка = Объект.Упаковка.НайтиСтроки(Новый Структура("КлючСвязи", _ТекущиеДанные.КлючСтроки));
	Если _СтрокиУпаковка.Количество() > 0 Тогда
		Элементы.Упаковка.ТекущаяСтрока = _СтрокиУпаковка[0];
		Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", _СтрокиУпаковка[0].КлючСтроки);
	Иначе
		Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСтроки = ПолучитьКлючСтрокиТовары();
		Элемент.ТекущиеДанные.guid = "";
		Элемент.ТекущиеДанные.uuid = "";
		Элемент.ТекущиеДанные.Отправлена = Ложь;
		Элементы.Упаковка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", Элемент.ТекущиеДанные.КлючСтроки);
		Если НЕ Элементы.Упаковка.ТекущаяСтрока = Неопределено Тогда
			_ТекущиеДанные = Объект.Упаковка.НайтиПоИдентификатору(Элементы.Упаковка.ТекущаяСтрока);
			Если НЕ _ТекущиеДанные = Неопределено Тогда
				Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", _ТекущиеДанные.КлючСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура УпаковкаПриАктивизацииСтроки(Элемент)
	
	_ТекущиеДанные = Элементы.Упаковка.ТекущиеДанные;
	
	Если _ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", _ТекущиеДанные.КлючСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Элементы.Товары.ТекущиеДанные = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСвязи = Элементы.Товары.ТекущиеДанные.КлючСтроки;
		Элемент.ТекущиеДанные.КлючСтроки = ПолучитьКлючСтрокиУпаковка();
		Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", Элемент.ТекущиеДанные.КлючСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПередУдалением(Элемент, Отказ)
	
	Для каждого _Строка Из Объект.Маркировка.НайтиСтроки(Новый Структура("КлючСвязи", Элемент.ТекущиеДанные.КлючСтроки)) Цикл
		Объект.Маркировка.Удалить(_Строка);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура МаркировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Элементы.Упаковка.ТекущиеДанные = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	_ТекущиеДанные = Элементы.Упаковка.ТекущиеДанные;
	
	Если _ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСвязи = _ТекущиеДанные.КлючСтроки;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьКлючСтрокиТовары()
	
	_список = Объект.Товары.Выгрузить().ВыгрузитьКолонку("КлючСтроки");
	
	Для _Индекс = 1 По 999 Цикл
		Если _список.Найти(_Индекс) = Неопределено Тогда
			Возврат _Индекс;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПолучитьКлючСтрокиУпаковка()
	
	_список = Объект.Упаковка.Выгрузить().ВыгрузитьКолонку("КлючСтроки");
	
	Для _Индекс = 1 По 999 Цикл
		Если _список.Найти(_Индекс) = Неопределено Тогда
			Возврат _Индекс;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции
