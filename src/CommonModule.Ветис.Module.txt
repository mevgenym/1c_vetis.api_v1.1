
//вызывается из МодульУправляемогоПриложения.ПередНачаломРаботыСистемы или МодульОбычногоПриложения.ПередНачаломРаботыСистемы
Процедура Инициализировать() Экспорт
	
	#Если НЕ МобильноеПриложениеСервер Тогда
		Если НЕ РольДоступна("ВетисПользователь") Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	ИнициализироватьНастройкиПодключения();
	
	//ВетисСинхронизация.ЗапуститьФоновое("ПервыйЗапуск");
	ВетисСинхронизация.ПервыйЗапуск();
	
	//ВетисСинхронизация.ЗапуститьФоновое("НачальноеЗаполнение");
	
КонецПроцедуры

Процедура ИнициализироватьНастройкиПодключения() Экспорт
	
	//вызывать:
	// после изменения тестовый - рабочий
	// после изменения версии
	// после изменения сервиса
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ВетисПовтИсп.Настройки_ОсновнаяНастройка();
	
КонецПроцедуры


#Область Соответствие

Функция Соответствие_ПолучитьСсылку(пЗначение, пТаблица, ПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(пЗначение) = Тип("Строка") Тогда
		_уид = Новый УникальныйИдентификатор(пЗначение);
	ИначеЕсли ТипЗнч(пЗначение) = Тип("ОбъектXDTO") Тогда
		Если НЕ пЗначение.Свойства().Получить("guid") = Неопределено И ЗначениеЗаполнено(пЗначение.guid) Тогда
			_уид = Новый УникальныйИдентификатор(пЗначение.guid);
		ИначеЕсли НЕ пЗначение.Свойства().Получить("uuid") = Неопределено И ЗначениеЗаполнено(пЗначение.uuid) Тогда
			_уид = Новый УникальныйИдентификатор(пЗначение.uuid);
		Иначе
			Возврат ПоУмолчанию;
		КонецЕсли;
	ИначеЕсли ТипЗнч(пЗначение) = Тип("УникальныйИдентификатор") Тогда
		_уид = пЗначение;
	Иначе
		Возврат ПоУмолчанию;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	_Таблица.Ссылка
	|ИЗ
	|	" + пТаблица + " КАК _Таблица
	|ГДЕ
	|	_Таблица.уид = &уид
	|	И ИСТИНА");
	
	Запрос.УстановитьПараметр("уид", _уид);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Если ТипЗнч(пЗначение) = Тип("ОбъектXDTO") Тогда
			_Объект = НовыйОбъектПоИмениТаблицы(пТаблица);
			_Объект.Заполнить(пЗначение);
			_Объект.Записать();
			Возврат _Объект.Ссылка;
		Иначе
			Возврат ПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция Соответствие_ПолучитьGuid(пСсылка, ПоУмолчанию = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	_Таблица.guid
	|ИЗ
	|	" + пСсылка.Метаданные().ПолноеИмя() + " КАК _Таблица
	|ГДЕ
	|	_Таблица.Ссылка = &Ссылка
	|	И ИСТИНА");
	
	Запрос.УстановитьПараметр("Ссылка", пСсылка);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.guid;
	Иначе
		Возврат ПоУмолчанию;
	КонецЕсли;
	
КонецФункции

Функция Соответствие_ПолучитьУС(СсылкаВетис, ПоУмолчанию = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	_Таблица.ОбъектУС КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВетисСоответствие КАК _Таблица
	|ГДЕ
	|	_Таблица.ОбъектВетис = &Ссылка
	|	И ИСТИНА";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаВетис);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ПоУмолчанию;
	КонецЕсли;
	
КонецФункции

Функция Соответствие_ПолучитьВетис(СсылкаУС, ПоУмолчанию = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	_Таблица.ОбъектВетис КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВетисСоответствие КАК _Таблица
	|ГДЕ
	|	_Таблица.ОбъектУС = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаУС);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ПоУмолчанию;
	КонецЕсли;
	
КонецФункции

Процедура Соответствие_Добавить(СсылкаУС, СсылкаВетис) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаВетис) Тогда
		Возврат;
	КонецЕсли;
	
	мз = РегистрыСведений.ВетисСоответствие.СоздатьМенеджерЗаписи();
	
	мз.ОбъектУС = СсылкаУС;
	
	мз.ОбъектВетис = СсылкаВетис;
	
	Если НЕ ЗначениеЗаполнено(мз.ОбъектВетис) ИЛИ НЕ ЗначениеЗаполнено(мз.ОбъектУС) Тогда
		Возврат;
	КонецЕсли;
	
	мз.Записать();
	
КонецПроцедуры

Процедура Соответствие_УдалитьУС(Ссылка, пТип = Неопределено) Экспорт
	
	нз = РегистрыСведений.ВетисСоответствие.СоздатьНаборЗаписей();
	
	нз.Отбор.ОбъектУС.Установить(Ссылка);
	
	нз.Записать();
	
КонецПроцедуры

Процедура Соответствие_УдалитьВетис(Ссылка, пТип = Неопределено) Экспорт
	
	нз = РегистрыСведений.ВетисСоответствие.СоздатьНаборЗаписей();
	
	нз.Отбор.ОбъектВетис.Установить(Ссылка);
	
	нз.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаЗаполненияОбъектов1с

Функция ИмяТаблицыПоТипуXDTO(пТипXDTO)
	
	Если пТипXDTO.Имя = "AnimalDisease" Тогда
		Возврат "Справочник.Ветис"+пТипXDTO.Имя;
	ИначеЕсли пТипXDTO.Имя = "BusinessEntity" Тогда
		Возврат "Справочник.Ветис"+пТипXDTO.Имя;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НовыйОбъектПоИмениТаблицы(пТаблица)
	
	Если Лев(пТаблица, 10) = "Справочник" Тогда
		Возврат Справочники[Сред(пТаблица, 12)].СоздатьЭлемент();
	ИначеЕсли Лев(пТаблица, 8) = "Документ" Тогда
		Возврат Документы[Сред(пТаблица, 10)].СоздатьЭлемент();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Предопределенные

Функция Предопределенные_Получить(пНазначение, пПоУмолчанию = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_Таблица.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ВетисПредопределенные КАК _Таблица
	|ГДЕ
	|	_Таблица.Назначение = &Назначение";
	
	Запрос.УстановитьПараметр("Назначение", пНазначение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат пПоУмолчанию;
	ИначеЕсли Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Значение;
	Иначе
		_список = Новый Массив;
		Пока Выборка.Следующий() Цикл
			_список.Добавить(Выборка.Значение);
		КонецЦикла;
		Возврат _список;
	КонецЕсли;
	
КонецФункции

Процедура Предопределенные_Установить(пНазначение, пЗначение, пКомментарий = "", пЗаменить = Истина) Экспорт
	
	Если пЗаменить = Истина Тогда
		Предопределенные_Удалить(пНазначение);
	КонецЕсли;
	
	_мз = РегистрыСведений.ВетисПредопределенные.СоздатьМенеджерЗаписи();
	_мз.Назначение = пНазначение;
	_мз.Значение = пЗначение;
	_мз.Комментарий = пКомментарий;
	
	Попытка
		_мз.Записать();
	Исключение
		ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

Процедура Предопределенные_Удалить(пНазначение) Экспорт
	
	_нз = РегистрыСведений.ВетисПредопределенные.СоздатьНаборЗаписей();
	
	_нз.Отбор.Назначение.Установить(пНазначение);
	
	_нз.Записать();
	
КонецПроцедуры

Функция Предопределенные_СтрокаВызова(пНазначение) Экспорт
	
	Возврат
	"Предопределенные_Получить("""+пНазначение+""");
	|";
	
КонецФункции

#КонецОбласти

#Область Журнал

Процедура Журнал_Добавить(пТекст, пКонтекст = "") Экспорт
	
	Период = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	МенеджерЗаписи = РегистрыСведений.ВетисЖурнал.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период        = ТекущаяДата();
	МенеджерЗаписи.Миллисекунды  = Период % 1000;
	МенеджерЗаписи.Представление = Лев(пТекст, 100);
	МенеджерЗаписи.Хранилище     = Новый ХранилищеЗначения(пТекст, Новый СжатиеДанных(9));
	МенеджерЗаписи.Пользователь  = ТекущийПользователь();
	МенеджерЗаписи.Версия        = Версия();
	МенеджерЗаписи.Контекст      = пКонтекст;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура Журнал_ДобавитьИнформациюОбОшибке(пИнформацияОбОшибке, пКонтекст = "") Экспорт
	
	Журнал_Добавить(ПодробноеПредставлениеОшибки(пИнформацияОбОшибке), пКонтекст);
	
КонецПроцедуры

Процедура Журнал_Очистить() Экспорт
	
	нз = РегистрыСведений.ВетисЖурнал.СоздатьНаборЗаписей();
	нз.Записать();
	
КонецПроцедуры


Процедура ЖурналОпераций_Добавить(пТекст, пОперация, пОбъект = Неопределено, пСтатус = Неопределено) Экспорт
	
	Период = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	МенеджерЗаписи = РегистрыСведений.ВетисЖурналОпераций.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период        = ТекущаяДата();
	МенеджерЗаписи.Миллисекунды  = Период % 1000;
	МенеджерЗаписи.Представление = Лев(пТекст, 100);
	МенеджерЗаписи.Хранилище     = Новый ХранилищеЗначения(пТекст, Новый СжатиеДанных(9));
	МенеджерЗаписи.Пользователь  = ТекущийПользователь();
	МенеджерЗаписи.Версия        = Версия();
	МенеджерЗаписи.Объект        = пОбъект;
	МенеджерЗаписи.СтатусЗапроса = пСтатус;
	
	МенеджерЗаписи.Операция = ОперацияПоИмени(пОперация);
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ЖурналОпераций_Очистить() Экспорт
	
	нз = РегистрыСведений.ВетисЖурналОпераций.СоздатьНаборЗаписей();
	нз.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Переменные

Процедура ИнициализироватьПеременные() Экспорт
	
	ПараметрыСеанса.ВетисПеременные = ПоместитьВоВременноеХранилище(Новый Структура, Новый УникальныйИдентификатор);
	
КонецПроцедуры

Функция Переменные_Получить(ИмяПараметра, ПоУмолчанию = Неопределено) Экспорт
	
	Кэш = ПолучитьИзВременногоХранилища(ПараметрыСеанса.ВетисПеременные);
	
	НайденноеЗначение = Неопределено;
	Если Кэш.Свойство(ИмяПараметра, НайденноеЗначение) Тогда
		Возврат НайденноеЗначение;
	КонецЕсли;
	
	Кэш.Вставить(ИмяПараметра, ПоУмолчанию);
	
	Возврат ПоУмолчанию;
	
КонецФункции

Процедура Переменные_Установить(ИмяПараметра, Значение) Экспорт
	
	Кэш = ПолучитьИзВременногоХранилища(ПараметрыСеанса.ВетисПеременные);
	
	НайденноеЗначение = Неопределено;
	Если Кэш.Свойство(ИмяПараметра, НайденноеЗначение) Тогда
		Если НайденноеЗначение = Значение Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Кэш.Вставить(ИмяПараметра, Значение);
	
КонецПроцедуры

#КонецОбласти

#Область Настройки

Функция Настройки_Получить(пИмя, ПоУмолчанию = Неопределено) Экспорт
	
	_Значение = Переменные_Получить(пИмя, Неопределено);
	
	Если _Значение = Неопределено Тогда
		
		_Настройки = Константы.ВетисНастройки.Получить().Получить();
		
		Если _Настройки = Неопределено Тогда
			_Настройки = Новый Структура();
		КонецЕсли;
		
		Если НЕ _Настройки.Свойство(пИмя, _Значение) Тогда
			_Значение = ПоУмолчанию;
		КонецЕсли;
		
		Переменные_Установить(пИмя, _Значение);
		
	КонецЕсли;
	
	Возврат _Значение;
	
КонецФункции

Процедура Настройки_Установить(пИмя, пЗначение) Экспорт
	
	_Настройки = Константы.ВетисНастройки.Получить().Получить();
	
	Если _Настройки = Неопределено Тогда
		_Настройки = Новый Структура();
	КонецЕсли;
	
	Если пИмя = "Корень" Тогда
		Для каждого _Значение Из пЗначение Цикл
			_Настройки.Вставить(_Значение.Ключ, _Значение.Значение);
		КонецЦикла;
	Иначе
		_Настройки.Вставить(пИмя, пЗначение);
	КонецЕсли;
	
	Константы.ВетисНастройки.Установить(Новый ХранилищеЗначения(_Настройки, Новый СжатиеДанных(9)));
	
	Переменные_Установить(пИмя, пЗначение);
	
КонецПроцедуры


Функция Настройки_ОсновнойПользователь(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Константы.ВетисОсновнойПользователь.Получить();
	Иначе
		Константы.ВетисОсновнойПользователь.Установить(пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ЖурналОпераций(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ЖурналОпераций", Ложь);
	Иначе
		Настройки_Установить("ЖурналОпераций", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_Интеграция(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("Интеграция", Ложь);
	Иначе
		Настройки_Установить("Интеграция", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_Префикс(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("Префикс", "");
	Иначе
		Настройки_Установить("Префикс", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ОберткаHttp(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ОберткаHttp", Ложь);
	Иначе
		Настройки_Установить("ОберткаHttp", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВремяОжиданияОтвета(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ВремяОжиданияОтвета", 60);
	Иначе
		Настройки_Установить("ВремяОжиданияОтвета", ?(пЗначение < 0, 0, пЗначение));
	КонецЕсли;
	
КонецФункции

Функция РазрешенаОтладка(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("РазрешенаОтладка", Ложь) = Истина;
	Иначе
		Настройки_Установить("РазрешенаОтладка", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_КоличествоОбъектовВСписке(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("КоличествоОбъектовВСписке", 1000);
	Иначе
		Настройки_Установить("КоличествоОбъектовВСписке", ?(пЗначение < 0, 0, ?(пЗначение > 1000, 1000, пЗначение)));
	КонецЕсли;
	
КонецФункции

Функция Настройки_ГраницыЗапросов(пОперация, пЗначение = Неопределено) Экспорт
	
	Возврат Настройки_ГраницыЗапросовПоПредприятию(пОперация, Справочники.ВетисEnterprise.ПустаяСсылка(), Справочники.ВетисBusinessEntity.ПустаяСсылка(), пЗначение);
	
КонецФункции

Функция Настройки_ГраницыЗапросовПоПредприятию(пОперация, Enterprise, BusinessEntity, пЗначение = Неопределено) Экспорт
	
	_Операция = ОперацияПоИмени(пОперация);
	
	Если пЗначение = Неопределено Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ _Таблица.Граница ИЗ РегистрСведений.ВетисГраницыЗапросов КАК _Таблица ГДЕ _Таблица.Операция = &Операция И _Таблица.Enterprise = &Enterprise И _Таблица.BusinessEntity = &BusinessEntity");
		Запрос.УстановитьПараметр("Операция", _Операция);
		Запрос.УстановитьПараметр("Enterprise", Enterprise);
		Запрос.УстановитьПараметр("BusinessEntity", BusinessEntity);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Дата(1,1,1);
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Граница;
		КонецЕсли;
	Иначе
		_Границы = РегистрыСведений.ВетисГраницыЗапросов.СоздатьМенеджерЗаписи();
		_Границы.Операция = _Операция;
		_Границы.Enterprise = Enterprise;
		_Границы.BusinessEntity = BusinessEntity;
		_Границы.Граница = пЗначение;
		_Границы.Записать();
	КонецЕсли;
	
КонецФункции


Функция Настройки_УровеньУпаковки(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("УровеньУпаковки", Перечисления.ВетисPackageLevelType.Транспортный);
	Иначе
		Настройки_Установить("УровеньУпаковки", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_КлассМаркировки(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("КлассМаркировки", Перечисления.ВетисProductMarkingClass.UNDEFINED);
	Иначе
		Настройки_Установить("КлассМаркировки", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_Мероприятия(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("Мероприятия", Ложь) = Истина;
	Иначе
		Настройки_Установить("Мероприятия", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ЛабораторныеИсследования(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ЛабораторныеИсследования", Ложь) = Истина;
	Иначе
		Настройки_Установить("ЛабораторныеИсследования", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_МультимодальныеПеревозки(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("МультимодальныеПеревозки", Ложь) = Истина;
	Иначе
		Настройки_Установить("МультимодальныеПеревозки", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВСД_БлагополучиеМестности(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("БлагополучиеМестности", "Местность благополучна по заразным болезням животных");
	Иначе
		Настройки_Установить("БлагополучиеМестности", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВСД_НазначениеГруза(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ВСД_НазначениеГруза", Справочники.ВетисPurpose.ПустаяСсылка());
	Иначе
		Настройки_Установить("ВСД_НазначениеГруза", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВСД_НазначениеГрузаНаВозврат(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ВСД_НазначениеГрузаНаВозврат", Справочники.ВетисPurpose.ПустаяСсылка());
	Иначе
		Настройки_Установить("ВСД_НазначениеГрузаНаВозврат", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВСД_ВСЭ(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ВСД_ВСЭ", ПредопределенноеЗначение("Перечисление.ВетисResearchResult.UNKNOWN"));
	Иначе
		Настройки_Установить("ВСД_ВСЭ", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВСД_ОсобыеОтметки(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ВСД_ОсобыеОтметки", "");
	Иначе
		Настройки_Установить("ВСД_ОсобыеОтметки", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВСД_КонтрольГосВетврачем(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ВСД_КонтрольГосВетврачем", Ложь) = Истина;
	Иначе
		Настройки_Установить("ВСД_КонтрольГосВетврачем", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ТТН_Тип(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ТТН_Тип", ПредопределенноеЗначение("Перечисление.ВетисDocumentType.ТовароТранспортнаяНакладная"));
	Иначе
		Настройки_Установить("ТТН_Тип", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ТТН_СпособХранения(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ТТН_СпособХранения", ПредопределенноеЗначение("Перечисление.ВетисTransportStorageType.Замороженные"));
	Иначе
		Настройки_Установить("ТТН_СпособХранения", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ТТН_Посредник(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Предопределенные_Получить("ТТН_Посредник");
	Иначе
		Предопределенные_Установить("ТТН_Посредник", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ТТН_Транспорт(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Предопределенные_Получить("ТТН_Транспорт");
	Иначе
		Предопределенные_Установить("ТТН_Транспорт", пЗначение);
	КонецЕсли;
	
КонецФункции


#КонецОбласти

#Область ПараметрыСеанса

Процедура УстановкаПараметровСеанса() Экспорт
	
	Ветис.ИнициализироватьПеременные();
	
	ПараметрыСеанса.ТекущийПользователь = ОпределитьТекущегоПользователя();
	
КонецПроцедуры

Функция ОпределитьТекущегоПользователя()
	
	_ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если ЗначениеЗаполнено(_ПользовательИБ.Имя) Тогда
		_ТекущийПользователь = Справочники.ВетисПользователи.НайтиПоРеквизиту("Идентификатор", _ПользовательИБ.УникальныйИдентификатор);
		Если НЕ ЗначениеЗаполнено(_ТекущийПользователь) Тогда
			_ТекущийПользователь = Справочники.ВетисПользователи.НайтиПоКоду(_ПользовательИБ.Имя);
			Если ЗначениеЗаполнено(_ТекущийПользователь) Тогда
				_ТекущийПользовательОбъект = _ТекущийПользователь.ПолучитьОбъект();
			Иначе
				_ТекущийПользовательОбъект = Справочники.ВетисПользователи.СоздатьЭлемент();
			КонецЕсли;
			_ТекущийПользовательОбъект.Код = _ПользовательИБ.Имя;
			_ТекущийПользовательОбъект.Наименование = _ПользовательИБ.ПолноеИмя;
			_ТекущийПользовательОбъект.Идентификатор = _ПользовательИБ.УникальныйИдентификатор;
			_ТекущийПользовательОбъект.Записать();
			_ТекущийПользователь = _ТекущийПользовательОбъект.Ссылка;
		КонецЕсли;
	Иначе
		_ТекущийПользователь = Ветис.Настройки_ОсновнойПользователь();
	КонецЕсли;
	
	Возврат _ТекущийПользователь;
	
КонецФункции

Функция ТекущийХС(пЗначение = Неопределено) Экспорт
	Если пЗначение = Неопределено Тогда
		Возврат  Переменные_Получить("ТекущийХС", Справочники.ВетисBusinessEntity.ПустаяСсылка());
	Иначе
		Переменные_Установить("ТекущийХС", пЗначение);
	КонецЕсли;
КонецФункции

Функция ТекущееПредприятие(пЗначение = Неопределено) Экспорт
	Если пЗначение = Неопределено Тогда
		Возврат Переменные_Получить("ТекущееПредприятие", Справочники.ВетисEnterprise.ПустаяСсылка());
	Иначе
		Переменные_Установить("ТекущееПредприятие", пЗначение);
	КонецЕсли;
КонецФункции

Функция ТекущийПользователь() Экспорт
	
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции

Функция serviceId() Экспорт
	Возврат Строка(ВетисПовтИсп.Настройки_ЦелевойСервис()) + ВерсияПредставление(":");
КонецФункции

#КонецОбласти

#Область Версия

Функция Версия() Экспорт
	
	Возврат ВетисПовтИсп.Версия();
	
КонецФункции

Функция ВерсияПредставление(пПрефикс = Неопределено, пСуффикс = Неопределено) Экспорт
	
	_версия = Версия();
	
	_версия = ?(_версия = Перечисления.ВетисВерсияAPI.v1_4, "", ?(пПрефикс = Неопределено, "", пПрефикс) + _версия + ?(пСуффикс = Неопределено, "", пСуффикс));
	
	Возврат _версия;
	
КонецФункции

Функция ВерсияРавно(пЗначение) Экспорт
	
	_версия = Версия();
	
	Если ТипЗнч(пЗначение) = Тип("Строка") Тогда
		Возврат Строка(_версия) = пЗначение;
	Иначе
		Возврат _версия = пЗначение;
	КонецЕсли;
	
КонецФункции

Функция Версия_2_0() Экспорт
	
	Возврат Версия() = ПредопределенноеЗначение("Перечисление.ВетисВерсияAPI.v2_0");
	
КонецФункции

#КонецОбласти

#Область ДлительностьОпераций

Функция ОперацияПоИмени(пИмя, ПоУмолчанию = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(пИмя) Тогда
		Возврат ПоУмолчанию;
	КонецЕсли;
	
	_Операция = Справочники.ВетисОперации.НайтиПоНаименованию(пИмя);
	
	Если НЕ ЗначениеЗаполнено(_Операция) Тогда
		_Операция = Справочники.ВетисОперации.СоздатьЭлемент();
		_Операция.Наименование = пИмя;
		_Операция.Записать();
		_Операция = _Операция.Ссылка;
	КонецЕсли;
	
	Возврат _Операция;
	
КонецФункции

#КонецОбласти

#Область ОбменДанными

Функция ВыполнитьЗапрос(пСервис, пИмяОперации, пФабрика, пRequest, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_ЖурналОпераций = Настройки_ЖурналОпераций();
	
	_настройки = ВетисПовтИсп.ПолучитьНастройкиПодключения(issuerId);
	
	Если _настройки = Неопределено Тогда пОтказ = Истина; пОшибка = "Не найдена настройка подключения для текущего ХС"; Возврат Неопределено; КонецЕсли;
	
	_составные = ВетисПовтИсп.WSDLПолучить(пСервис).Составные;
	
	_Соединение = ПолучитьСоединение(_составные.Сервер, _составные.Порт, _настройки.Логин, _настройки.Пароль, _составные.ЗащищенноеСоединение);
	
	_Фабрика = пФабрика;
	
	_ИмяОперации = пИмяОперации;
	
	//запрос на создание заявки
	
	_Application = ВетисApplication.Application(пRequest, _ИмяОперации, _настройки.issuerId);
	
		_SubmitRequest = ВетисApplication.submitApplicationRequest(_Application, _настройки.КлючАПИ);
		
			_Envelope = ВетисSoapEnvelope.Envelope(_SubmitRequest, _Фабрика);
			
				_ТекстЗапроса = ВетисОбщегоНазначения.Сериализовать(_Envelope, _Фабрика);
				
				Если _ЖурналОпераций Тогда
					ЖурналОпераций_Добавить(_ТекстЗапроса, _ИмяОперации);
				КонецЕсли;
				
				_Запрос = ПолучитьЗапрос(_составные.Ресурс, _ТекстЗапроса);
				
				_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
				
				Если НЕ _Ответ.КодСостояния = 200 Тогда
					пОтказ = Истина;
					пОшибка = _Ответ.ПолучитьТелоКакСтроку("UTF-8");
					Если НЕ _ЖурналОпераций Тогда
						ЖурналОпераций_Добавить(_ТекстЗапроса, _ИмяОперации);
					КонецЕсли;
					ЖурналОпераций_Добавить("Ошибка при отправке запроса", _ИмяОперации);
					ЖурналОпераций_Добавить(пОшибка, _ИмяОперации);
					Возврат Неопределено;
				КонецЕсли;
				
			_Envelope = ВетисОбщегоНазначения.Десериализовать(_Ответ.ПолучитьТелоКакСтроку("UTF-8"), _Envelope.Тип(), _Фабрика);
		
		_SubmitResponse = ВетисSoapEnvelope.Извлечь(_Envelope).submitApplicationResponse;
	
	Если НЕ (_SubmitResponse.Application.status = ВетисКонстанты.Status_ACCEPTED()) Тогда
		пОтказ = Истина;
		пОшибка = "Запрос вернулся со статусом " + _SubmitResponse.Application.status;
		ЖурналОпераций_Добавить(пОшибка, _ИмяОперации);
		Возврат Неопределено;
	КонецЕсли;
	
	//запрос на получение результатов обработки заявки
	
	_receiveRequest = ВетисApplication.receiveApplicationResultRequest(_SubmitResponse.Application.applicationId, _настройки.issuerId, _настройки.КлючАПИ);
	
	_Envelope = ВетисSoapEnvelope.Envelope(_receiveRequest, _Фабрика, "receiveApplicationResultRequest");
	
	_ТекстЗапроса = ВетисОбщегоНазначения.Сериализовать(_Envelope, _Фабрика);
	
	Если _ЖурналОпераций Тогда
		ЖурналОпераций_Добавить(_ТекстЗапроса, _ИмяОперации);
	КонецЕсли;
	
	_Запрос = ПолучитьЗапрос(_составные.Ресурс, _ТекстЗапроса);
	
	//Журнал_Добавить("Ждем ответа", _ИмяОперации);
	
	//пауза перед первым запросом
	ВетисОбщегоНазначения.Пауза(7);
	
	//время ожидания считаем после первой паузы
	_Ожидание = Настройки_ВремяОжиданияОтвета();
	
	_ВремяНачала = ТекущаяДата();
	
	Пока Истина Цикл
		
		_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
		
		Если НЕ _Ответ.КодСостояния = 200 Тогда
			пОтказ = Истина;
			пОшибка = _Ответ.ПолучитьТелоКакСтроку("UTF-8");
			Если НЕ _ЖурналОпераций Тогда
				ЖурналОпераций_Добавить(_ТекстЗапроса, _ИмяОперации);
			КонецЕсли;
			ЖурналОпераций_Добавить("Ошибка при отправке запроса", _ИмяОперации);
			ЖурналОпераций_Добавить(пОшибка, _ИмяОперации);
			Возврат Неопределено;
		КонецЕсли;
		
		_Envelope = ВетисОбщегоНазначения.Десериализовать(_Ответ.ПолучитьТелоКакСтроку("UTF-8"), _Envelope.Тип(), _Фабрика);
		
		_receiveResponse = ВетисSoapEnvelope.Извлечь(_Envelope).receiveApplicationResultResponse;
		
		Если _receiveResponse.Application.Status = ВетисКонстанты.Status_IN_PROCESS() Тогда
			Если ТекущаяДата() > _ВремяНачала + _Ожидание Тогда
				пОтказ = Истина;
				пОшибка = "Превышено время ожидания";
				ЖурналОпераций_Добавить(пОшибка, _ИмяОперации);
				Возврат Неопределено;
			Иначе
				Журнал_Добавить("Ждем ответа", _ИмяОперации);
				ВетисОбщегоНазначения.Пауза(5);//рекомендванные 2 секунды перед повторным запросом
			КонецЕсли;
		Иначе
			Если НЕ _receiveResponse.Application.status = ВетисКонстанты.Status_COMPLETED() Тогда
				пОтказ = Истина;
				пОшибка = ПолучитьТекстОшибки(_receiveResponse.Application.errors);
				ЖурналОпераций_Добавить(пОшибка, _ИмяОперации, , ВетисApplicationСлой1с.Status(_receiveResponse.Application.Status));
				Возврат Неопределено;
			Иначе
				Если _ЖурналОпераций Тогда
					ЖурналОпераций_Добавить(ВетисОбщегоНазначения.Сериализовать(_receiveResponse.Application, _Фабрика), _ИмяОперации, , ВетисApplicationСлой1с.Status(_receiveResponse.Application.Status));
				КонецЕсли;
				
				Возврат ВетисApplication.ApplicationResult(_receiveResponse.Application);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ОтправитьЗапрос(пТекстЗапроса, issuerId) Экспорт
	
	_Результат = Новый Структура("Отказ, ТекстОтвета, ТекстОшибки", Ложь, "", "");
	
	_настройки = ВетисПовтИсп.ПолучитьНастройкиПодключения(issuerId);
	
	Если _настройки = Неопределено Тогда
		_Результат.Отказ = Истина;
		_Результат.ТекстОшибки = "Не найдена настройка подключения для текущего ХС";
		Возврат _Результат;
	КонецЕсли;
	
	_ТекстЗапроса = пТекстЗапроса;
	
	_составные = ВетисПовтИсп.WSDLПолучить(Перечисления.ВетисСервис.amsMercuryService).Составные;
	
	_Соединение = ПолучитьСоединение(_составные.Сервер, _составные.Порт, _настройки.Логин, _настройки.Пароль, _составные.ЗащищенноеСоединение);
	
	_Запрос = ПолучитьЗапрос(_составные.Ресурс, _ТекстЗапроса);
	
	_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
	
	Если НЕ _Ответ.КодСостояния = 200 Тогда
		_Результат.Отказ = Истина;
	КонецЕсли;
	
	_Результат.ТекстОтвета = _Ответ.ПолучитьТелоКакСтроку("UTF-8");
	
	Возврат _Результат;
	
КонецФункции

Функция ПолучитьОтвет(applicationId, issuerId = Неопределено, пОтказ = Ложь) Экспорт
	//запрос на получение результатов обработки заявки
	
	_Результат = Новый Структура("Отказ, ТекстОтвета, ТекстОшибки", Ложь, "", "");
	
	_настройки = ВетисПовтИсп.ПолучитьНастройкиПодключения(issuerId);
	
	Если _настройки = Неопределено Тогда
		_Результат.Отказ = Истина;
		_Результат.ТекстОшибки = "Не найдена настройка подключения для текущего ХС";
		Возврат _Результат;
	КонецЕсли;
	
	_составные = ВетисПовтИсп.WSDLПолучить(Перечисления.ВетисСервис.amsMercuryService).Составные;
	
	_Соединение = ПолучитьСоединение(_составные.Сервер, _составные.Порт, _настройки.Логин, _настройки.Пароль, _составные.ЗащищенноеСоединение);
	
	_Фабрика = ВетисПовтИсп.ФабрикаОбщая();
	
	_receiveRequest = ВетисApplication.receiveApplicationResultRequest(applicationId, _настройки.issuerId);
	
	_Envelope = ВетисSoapEnvelope.Envelope(_receiveRequest, _Фабрика);
	
	_ТекстЗапроса = ВетисОбщегоНазначения.Сериализовать(_Envelope, _Фабрика);
	
	_Запрос = ПолучитьЗапрос(_составные.Ресурс, _ТекстЗапроса);
	
	_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
	
	Если НЕ _Ответ.КодСостояния = 200 Тогда
		_Результат.Отказ = Истина;
		//_Результат.ТекстОшибки = _Ответ.ПолучитьТелоКакСтроку("UTF-8");
		//Возврат _Результат;
	КонецЕсли;
	
	_Результат.ТекстОтвета = _Ответ.ПолучитьТелоКакСтроку("UTF-8");
	
	Возврат _Результат;
	
КонецФункции

Функция ПроксиHttp(пИмяСервиса, пRequest, пОтказ = Ложь, пОшибка = "") Экспорт
	
	//_Отладка = РазрешенаОтладка();
	
	_ЖурналОпераций = Настройки_ЖурналОпераций();
	
	_ИмяОперации = пRequest.Тип().Имя;//должно совпадать с именем объекта
	
	_настройки = ВетисПовтИсп.ПолучитьНастройкиПодключения();
	
	_составные = ВетисПовтИсп.WSDLПолучить(пИмяСервиса, Истина).Составные;
	
	_Соединение = ПолучитьСоединение(_составные.Сервер, _составные.Порт, _настройки.Логин, _настройки.Пароль, _составные.ЗащищенноеСоединение);
	
	_Фабрика = ВетисПовтИсп.ФабрикаWS(пИмяСервиса);
	
	_Envelope = ВетисSoapEnvelope.Envelope(пRequest, _Фабрика);
	
	_ТекстЗапроса = ВетисОбщегоНазначения.Сериализовать(_Envelope, _Фабрика);
	
	Если _ЖурналОпераций Тогда
		ЖурналОпераций_Добавить(_ТекстЗапроса, _ИмяОперации);
	КонецЕсли;
	
	_Запрос = ПолучитьЗапрос(_составные.Ресурс, _ТекстЗапроса);
	
	_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
	
	Если НЕ _Ответ.КодСостояния = 200 Тогда
		пОтказ = Истина;
		пОшибка = _Ответ.ПолучитьТелоКакСтроку("UTF-8");
		Если НЕ _ЖурналОпераций Тогда
			ЖурналОпераций_Добавить(_ТекстЗапроса, _ИмяОперации);
		КонецЕсли;
		ЖурналОпераций_Добавить("Ошибка при отправке запроса", _ИмяОперации);
		ЖурналОпераций_Добавить(пОшибка, _ИмяОперации);
		Возврат Неопределено;
	КонецЕсли;
	
	Если _ЖурналОпераций Тогда
		ЖурналОпераций_Добавить(_Ответ.ПолучитьТелоКакСтроку("UTF-8"), _ИмяОперации);
	КонецЕсли;
	
	_Envelope = ВетисОбщегоНазначения.Десериализовать(_Ответ.ПолучитьТелоКакСтроку("UTF-8"), _Envelope.Тип(), _Фабрика);
	
	_Response = ВетисSoapEnvelope.Извлечь(_Envelope);
	
	Возврат _Response;
	
КонецФункции

Функция ОтправитьДляОбработки(пТекстЗапроса, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "")
	
	_настройки = ВетисПовтИсп.ПолучитьНастройкиПодключения(issuerId);
	
	_составные = ВетисПовтИсп.WSDLПолучить(Перечисления.ВетисСервис.amsMercuryService).Составные;
	
	_Запрос = ПолучитьЗапрос(_составные.Ресурс, пТекстЗапроса);
	
	Попытка
		
		_Соединение = ПолучитьСоединение(_составные.Сервер, _составные.Порт, _настройки.Логин, _настройки.Пароль, _составные.ЗащищенноеСоединение);
		
		_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
		
		пОтказ = НЕ _Ответ.КодСостояния = 200;
		
		Возврат _Ответ.ПолучитьТелоКакСтроку("UTF-8");
		
	Исключение
		
		пОтказ = Истина;
		
		пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСоединение(пСервер, пПорт, пЛогин, пПароль, пЗащищенноеСоединение = Неопределено, пПрокси = Неопределено)
	
	_Логин = пЛогин;
	
	_Пароль = пПароль;
	
	Если пЗащищенноеСоединение = Неопределено Тогда
		Возврат Новый HTTPСоединение(пСервер, пПорт, _Логин, _Пароль, , Истина);
	Иначе
		Возврат Новый HTTPСоединение(пСервер, пПорт, _Логин, _Пароль, , Настройки_ВремяОжиданияОтвета(), пЗащищенноеСоединение);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗапрос(пАдресРесурса, пТекстЗапроса)
	
	_Запрос = Новый HTTPЗапрос(пАдресРесурса);
	
	_Запрос.Заголовки.Вставить("Content-Type", "text/xml;charset=utf-8");
	
	_Запрос.УстановитьТелоИзСтроки(пТекстЗапроса);
	
	Возврат _Запрос;
	
КонецФункции

Функция ПолучитьТекстОшибки(errors)
	
	Если ТипЗнч(errors.error) = Тип("ОбъектXDTO") Тогда
		Возврат errors.error.code + " - " + errors.error.Последовательность().ПолучитьТекст(0);
	Иначе
		_Ошибка = "";
		Для каждого _error Из errors.error Цикл
			_Ошибка = _Ошибка + Символы.ПС + _error.code + " - " + _error.Последовательность().ПолучитьТекст(0);
		КонецЦикла;
		Возврат Сред(_Ошибка, 2);;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ДлительныеОперации

#КонецОбласти

#Область Время
// http://vetrf.ru/vetrf-forum/posts/list/390/6855.page#39813
// Во времени оформления ветеринарных сертификатов всегда указывается московское время

Функция ВремяСервиса(пДата = Неопределено, пПодстановка = Неопределено) Экспорт
	
	//Возврат УниверсальноеВремя(?(пДата = Неопределено, ТекущаяДата(), пДата));
	//Возврат УниверсальноеВремя(?(пДата = Неопределено, ТекущаяДата(), пДата) - 3*60*60);
	Возврат ?(пДата = Неопределено, ТекущаяДата(), пДата);
	
	_Дата = ?(пДата = Неопределено, ТекущаяДата(), пДата);
	
	_Дата = МестноеВремя(УниверсальноеВремя(_Дата), "GMT+3");
	
	Возврат _Дата;
	
КонецФункции

Функция ВремяМестное(пДата = Неопределено) Экспорт
	
	Возврат ?(пДата = Неопределено, ТекущаяДата(), пДата);
	
КонецФункции

#КонецОбласти

#Область Подписки

Процедура ВетисПриУстановкеНовогоКода(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	Префикс = Настройки_Префикс() + Префикс;
	
КонецПроцедуры

Процедура ВетисПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	ВетисОбщегоНазначения.ДобавитьПрефиксОрганизации(Источник, Префикс);
	
	Префикс = Настройки_Префикс() + Префикс;
	
КонецПроцедуры

#КонецОбласти

#Область ВыборкаСписка

Функция ВыборкаСпискаСледующий(Item, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Перем ListResponse;
	
	Если НЕ пПараметры.Свойство("ListResponse") Тогда
		//
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListOptions.offset + пПараметры.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListOptions.offset = пПараметры.ListOptions.offset + пПараметры.ListOptions.count;
				пПараметры.Индекс = 0;
			КонецЕсли;
		Иначе
			Item = Вычислить(пПараметры.ЭлементКоллекции);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ListResponse = Вычислить(пПараметры.СтрокаВызова);
	Исключение
		пОтказ = Истина;
		пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), пПараметры.ИмяОперации);
		Если НЕ пПараметры.Свойство("ВызыватьИсключение") ИЛИ пПараметры.ВызыватьИсключение = Истина Тогда
			ВызватьИсключение;
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	пПараметры.Вставить("ListResponse", ListResponse);
	
	Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
		Возврат Ложь;
	Иначе
		Item = Вычислить(пПараметры.ЭлементКоллекции);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ВыборкаСпискаИнициализация(пИмяСервиса, пИмяОперации, пИмяКоллекции, пИмяСвойства = "", пПараметры,
		пПарам0 = Неопределено, пПарам1 = Неопределено, пПарам2 = Неопределено, пПарам3 = Неопределено, пПарам4 = Неопределено,
		пПарам5 = Неопределено, пПарам6 = Неопределено, пПарам7 = Неопределено, пПарам8 = Неопределено, пПарам9 = Неопределено) Экспорт
	
	Если НЕ ВыборкаСпискаЭтоНачало(пПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
	
	_СтрокаПараметров = "пПараметры.ListOptions";
	
	_ПараметрыПрокси = Новый Массив;
	Для _индекс = 0 По 9 Цикл
		_парам = Вычислить("пПарам"+_индекс);
		Если _парам = Неопределено Тогда
			Прервать;
		Иначе
			_ПараметрыПрокси.Добавить(_парам);
			_СтрокаПараметров = _СтрокаПараметров + ", пПараметры.ПараметрыПрокси["+_индекс+"]";
		КонецЕсли;
	КонецЦикла;
	
	пПараметры.Вставить("ListOptions", ВетисBase_2_0.ListOptions(?(пПараметры.Свойство("count"), пПараметры.count, Неопределено)));
	пПараметры.Вставить("Индекс", 0);
	пПараметры.Вставить("ИмяСервиса", пИмяСервиса);
	пПараметры.Вставить("ИмяОперации", пИмяОперации);
	пПараметры.Вставить("ПараметрыПрокси", _ПараметрыПрокси);
	пПараметры.Вставить("ЭлементКоллекции", "пПараметры.ListResponse."+пИмяКоллекции+"[пПараметры.Индекс]"+?(пИмяСвойства = "", "", "."+пИмяСвойства));
	пПараметры.Вставить("СтрокаВызова", "ВетисПовтИсп.Прокси(пПараметры.ИмяСервиса)."+пИмяОперации+"("+_СтрокаПараметров+")");
		
КонецПроцедуры

Функция ВыборкаСпискаЭтоНачало(пПараметры) Экспорт
	
	Возврат пПараметры = Неопределено ИЛИ НЕ пПараметры.Свойство("Индекс");
	
КонецФункции

#КонецОбласти
