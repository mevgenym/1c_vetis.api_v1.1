
//вызывается из МодульУправляемогоПриложения.ПередНачаломРаботыСистемы или МодульОбычногоПриложения.ПередНачаломРаботыСистемы
Процедура Инициализировать() Экспорт
	
	#Если НЕ МобильноеПриложениеСервер Тогда
		Если НЕ РольДоступна("ВетисПользователь") Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	ИнициализироватьНастройкиПодключения();
	
	ВетисСинхронизация.ПервыйЗапуск();
	
КонецПроцедуры

Процедура ИнициализироватьНастройкиПодключения() Экспорт
	
	//вызывать:
	// после изменения тестовый - рабочий
	// после изменения версии
	// после изменения сервиса
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры


#Область Соответствие

Функция Соответствие_ПолучитьСсылку(пЗначение, пТаблица, ПоУмолчанию = Неопределено, пОбновить = Ложь, пСоздавать = Ложь) Экспорт
	
	Если ТипЗнч(пЗначение) = Тип("Строка") Тогда
		_УникальныйИдентификатор = Новый УникальныйИдентификатор(пЗначение);
	ИначеЕсли ТипЗнч(пЗначение) = Тип("ОбъектXDTO") Тогда
		Если НЕ пЗначение.Свойства().Получить("guid") = Неопределено И ЗначениеЗаполнено(пЗначение.guid) Тогда
			_УникальныйИдентификатор = Новый УникальныйИдентификатор(пЗначение.guid);
		ИначеЕсли НЕ пЗначение.Свойства().Получить("uuid") = Неопределено И ЗначениеЗаполнено(пЗначение.uuid) Тогда
			_УникальныйИдентификатор = Новый УникальныйИдентификатор(пЗначение.uuid);
		Иначе
			Возврат ПоУмолчанию;
		КонецЕсли;
	ИначеЕсли ТипЗнч(пЗначение) = Тип("Структура") Тогда
		Если пЗначение.Свойство("guid") И ЗначениеЗаполнено(пЗначение.guid) Тогда
			_УникальныйИдентификатор = Новый УникальныйИдентификатор(пЗначение.guid);
		ИначеЕсли пЗначение.Свойство("uuid") И ЗначениеЗаполнено(пЗначение.uuid) Тогда
			_УникальныйИдентификатор = Новый УникальныйИдентификатор(пЗначение.uuid);
		Иначе
			Возврат ПоУмолчанию;
		КонецЕсли;
	ИначеЕсли ТипЗнч(пЗначение) = Тип("УникальныйИдентификатор") Тогда
		_УникальныйИдентификатор = пЗначение;
	Иначе
		Возврат ПоУмолчанию;
	КонецЕсли;
	
	_Метаданные = Метаданные.НайтиПоПолномуИмени(пТаблица);
	
	Если _Метаданные = Неопределено Тогда
		Возврат ПоУмолчанию;
	ИначеЕсли Метаданные.Справочники.Содержит(_Метаданные) Тогда
		_менеджер = Справочники[_Метаданные.Имя];
		_ссылка = _менеджер.ПолучитьСсылку(_УникальныйИдентификатор);
		_Объект = _ссылка.ПолучитьОбъект();
		Если _Объект = Неопределено И пСоздавать = Истина ИЛИ НЕ _Объект = Неопределено И пОбновить = Истина Тогда
			Если ТипЗнч(пЗначение) = Тип("ОбъектXDTO") Тогда
				Если _Объект = Неопределено Тогда
					_Объект = _менеджер.СоздатьЭлемент();
					_Объект.УстановитьСсылкуНового(_ссылка);
				КонецЕсли;
				_Объект.Заполнить(пЗначение);
				Попытка
					_Объект.Записать();
				Исключение
					ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке());
					ВызватьИсключение;
				КонецПопытки;
				Возврат _Ссылка;
			Иначе
				Возврат ПоУмолчанию;
			КонецЕсли;
		ИначеЕсли _Объект = Неопределено Тогда
			Возврат ПоУмолчанию;
		Иначе
			Возврат _ссылка;
		КонецЕсли;
		
	ИначеЕсли Метаданные.Документы.Содержит(_Метаданные) Тогда
		_менеджер = Документы[_Метаданные.Имя];
		_ссылка = _менеджер.ПолучитьСсылку(_УникальныйИдентификатор);
		_Объект = _ссылка.ПолучитьОбъект();
		Если _Объект = Неопределено И пСоздавать = Истина ИЛИ НЕ _Объект = Неопределено И пОбновить = Истина Тогда
			Если ТипЗнч(пЗначение) = Тип("ОбъектXDTO") Тогда
				Если _Объект = Неопределено Тогда
					_Объект = _менеджер.СоздатьДокумент();
					_Объект.УстановитьСсылкуНового(_ссылка);
				КонецЕсли;
				_Объект.Дата = ТекущаяДатаСеанса();
				_Объект.Заполнить(пЗначение);
				Попытка
					_Объект.Записать();
				Исключение
					ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке());
					ВызватьИсключение;
				КонецПопытки;
				Возврат _Ссылка;
			Иначе
				Возврат ПоУмолчанию;
			КонецЕсли;
		ИначеЕсли _Объект = Неопределено Тогда
			Возврат ПоУмолчанию;
		Иначе
			Возврат _ссылка;
		КонецЕсли;
		
	Иначе
		Возврат ПоУмолчанию;
	КонецЕсли;
	
КонецФункции

Функция Соответствие_ПолучитьGuid(пСсылка, ПоУмолчанию = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(пСсылка) Тогда
		Возврат Строка(пСсылка.УникальныйИдентификатор());
	Иначе
		Возврат ПоУмолчанию;
	КонецЕсли;
	
КонецФункции

Функция Соответствие_Конвертировать(value, пТидМетаданных, пТаблица, пИмяМодуля, пИмяОперации, пИмяОперацииВерсии, ПоУмолчанию = Неопределено, пПараметры = Неопределено) Экспорт
	
	Если value = Неопределено Тогда
		Возврат ПоУмолчанию;
	ИначеЕсли ТипЗнч(value) = Тип(пТидМетаданных+"Ссылка."+пТаблица) Тогда
		Возврат Соответствие_ПолучитьGuid(value, ПоУмолчанию);
	Иначе
		Если ТипЗнч(value) = Тип("ОбъектXDTO") Тогда
			Если НЕ value.Свойства().Получить("guid") = Неопределено И ЗначениеЗаполнено(value.guid) Тогда
				_guid = value.guid;
			ИначеЕсли НЕ value.Свойства().Получить("uuid") = Неопределено И ЗначениеЗаполнено(value.uuid) Тогда
				_параметры = ""; Если НЕ пПараметры = Неопределено Тогда Для каждого _Параметр Из пПараметры Цикл _параметры = _параметры + ",пПараметры." + _Параметр.Ключ; КонецЦикла; КонецЕсли;
				_объект = Вычислить(пИмяМодуля+"."+пИмяОперацииВерсии+"(value.uuid"+_параметры+")");
				_Значение = Соответствие_ПолучитьСсылку(_объект, пТидМетаданных+"."+пТаблица, Неопределено, Истина, Истина);
				Возврат _Значение;
			Иначе
				Возврат ПоУмолчанию;
			КонецЕсли;
		ИначеЕсли ТипЗнч(value) = Тип("Структура") Тогда
			Если value.Свойство("guid") И ЗначениеЗаполнено(value.guid) Тогда
				_guid = value.guid;
			ИначеЕсли value.Свойство("uuid") И ЗначениеЗаполнено(value.uuid) Тогда
				_параметры = ""; Если НЕ пПараметры = Неопределено Тогда Для каждого _Параметр Из пПараметры Цикл _параметры = _параметры + ",пПараметры." + _Параметр.Ключ; КонецЦикла; КонецЕсли;
				_объект = Вычислить(пИмяМодуля+"."+пИмяОперацииВерсии+"(value.uuid"+_параметры+")");
				_Значение = Соответствие_ПолучитьСсылку(_объект, пТидМетаданных+"."+пТаблица, Неопределено, Истина, Истина);
				Возврат _Значение;
			Иначе
				Возврат ПоУмолчанию;
			КонецЕсли;
		Иначе
			_guid = value;
		КонецЕсли;
		Если ПустаяСтрока(_guid) Тогда
			Возврат ПоУмолчанию;
		КонецЕсли;
		_Значение = Соответствие_ПолучитьСсылку(_guid, пТидМетаданных+"."+пТаблица, Неопределено);
		Если _Значение = Неопределено Тогда
			_параметры = ""; Если НЕ пПараметры = Неопределено Тогда Для каждого _Параметр Из пПараметры Цикл _параметры = _параметры + ",пПараметры." + _Параметр.Ключ; КонецЦикла; КонецЕсли;
			_объект = Вычислить(пИмяМодуля+"."+пИмяОперации+"(_guid"+_параметры+")");
			_Значение = Соответствие_ПолучитьСсылку(_объект, пТидМетаданных+"."+пТаблица, Неопределено, Истина, Истина);
			Если _Значение = Неопределено Тогда
				Возврат ПоУмолчанию;
			Иначе
				Возврат _Значение;
			КонецЕсли;
		Иначе
			Возврат _Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Журнал

Процедура Журнал_Добавить(пТекст, пКонтекст = "") Экспорт
	
	РегистрыСведений.ВетисЖурнал.Добавить(пТекст, пКонтекст);
	
КонецПроцедуры

Процедура Журнал_ДобавитьИнформациюОбОшибке(пИнформацияОбОшибке, пКонтекст = "") Экспорт
	
	Журнал_Добавить(ПодробноеПредставлениеОшибки(пИнформацияОбОшибке), пКонтекст);
	
КонецПроцедуры

Процедура Журнал_Очистить() Экспорт
	
	РегистрыСведений.ВетисЖурнал.Очистить();
	
КонецПроцедуры


Процедура ЖурналОпераций_Добавить(пТекст, пОперация, пНаправление = Неопределено, пEnterprise = Неопределено, пBusinessEntity = Неопределено, пОбъект = Неопределено, пДлительность = Неопределено, applicationId = Неопределено) Экспорт
	
	РегистрыСведений.ВетисЖурналОпераций.Добавить(пТекст, пОперация, пНаправление, пEnterprise, пBusinessEntity, пОбъект, пДлительность, applicationId);
	
КонецПроцедуры

Процедура ЖурналОпераций_Очистить() Экспорт
	
	РегистрыСведений.ВетисЖурналОпераций.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область Переменные

Процедура ИнициализироватьПеременные() Экспорт
	
	ПараметрыСеанса.ВетисПеременные = ПоместитьВоВременноеХранилище(Новый Структура, Новый УникальныйИдентификатор);
	
КонецПроцедуры

Функция Переменные_Получить(ИмяПараметра, ПоУмолчанию = Неопределено) Экспорт
	
	Кэш = ПолучитьИзВременногоХранилища(ПараметрыСеанса.ВетисПеременные);
	
	НайденноеЗначение = Неопределено;
	Если Кэш.Свойство(ИмяПараметра, НайденноеЗначение) Тогда
		Возврат НайденноеЗначение;
	КонецЕсли;
	
	Кэш.Вставить(ИмяПараметра, ПоУмолчанию);
	
	Возврат ПоУмолчанию;
	
КонецФункции

Процедура Переменные_Установить(ИмяПараметра, Значение) Экспорт
	
	Кэш = ПолучитьИзВременногоХранилища(ПараметрыСеанса.ВетисПеременные);
	
	НайденноеЗначение = Неопределено;
	Если Кэш.Свойство(ИмяПараметра, НайденноеЗначение) Тогда
		Если НайденноеЗначение = Значение Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Кэш.Вставить(ИмяПараметра, Значение);
	
КонецПроцедуры

#КонецОбласти

#Область Настройки

Функция Настройки_Получить(пИмя, ПоУмолчанию = Неопределено) Экспорт
	
	_Значение = Переменные_Получить(пИмя, Неопределено);
	
	Если _Значение = Неопределено Тогда
		
		_Настройки = Константы.ВетисНастройки.Получить().Получить();
		
		Если _Настройки = Неопределено Тогда
			_Настройки = Новый Структура();
		КонецЕсли;
		
		Если НЕ _Настройки.Свойство(пИмя, _Значение) Тогда
			_Значение = ПоУмолчанию;
		КонецЕсли;
		
		Переменные_Установить(пИмя, _Значение);
		
	КонецЕсли;
	
	Возврат _Значение;
	
КонецФункции

Процедура Настройки_Установить(пИмя, пЗначение) Экспорт
	
	_Настройки = Константы.ВетисНастройки.Получить().Получить();
	
	Если _Настройки = Неопределено Тогда
		_Настройки = Новый Структура();
	КонецЕсли;
	
	Если пИмя = "Корень" Тогда
		Для каждого _Значение Из пЗначение Цикл
			_Настройки.Вставить(_Значение.Ключ, _Значение.Значение);
		КонецЦикла;
	Иначе
		_Настройки.Вставить(пИмя, пЗначение);
	КонецЕсли;
	
	Константы.ВетисНастройки.Установить(Новый ХранилищеЗначения(_Настройки));
	
	Переменные_Установить(пИмя, пЗначение);
	
КонецПроцедуры


Функция Настройки_Тестовый(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Константы.ВетисТестовый.Получить();
	Иначе
		Константы.ВетисТестовый.Установить(пЗначение);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНастройкиПодключения(пСсылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	_Таблица.Ссылка.Логин,
	|	_Таблица.Ссылка.Пароль,
	|	_Таблица.Ссылка.КлючАПИ,
	|//1	_Таблица.issuerID КАК issuerId
	|//3	_Таблица.issuerID КАК issuerId
	|//2	&issuerId КАК issuerId
	|ИЗ
	|	Справочник.ВетисНастройкиПодключения.ИдентификаторыХС КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|//1	И _Таблица.Ссылка = &Ссылка
	|//2	И _Таблица.issuerID = &issuerId
	|//3	И _Таблица.BusinessEntity = &BusinessEntity
	|	И ИСТИНА");
	
	Запрос.УстановитьПараметр("Ссылка", пСсылка);
	
	Если ТипЗнч(пСсылка) = Тип("СправочникСсылка.ВетисНастройкиПодключения") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//1", "");
	ИначеЕсли ТипЗнч(пСсылка) = Тип("Строка") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//2", "");
		Запрос.УстановитьПараметр("issuerId", пСсылка);
	ИначеЕсли ТипЗнч(пСсылка) = Тип("СправочникСсылка.ВетисBusinessEntity") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//3", "");
		Запрос.УстановитьПараметр("BusinessEntity", пСсылка);
	ИначеЕсли ЗначениеЗаполнено(ВетисПовтИсп.ТекущийПользователь_Настройка()) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//1", "");
		Запрос.УстановитьПараметр("Ссылка", ВетисПовтИсп.ТекущийПользователь_Настройка());
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//1", "");
		Запрос.УстановитьПараметр("Ссылка", ВетисПовтИсп.Настройки_ОсновнаяНастройка());
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		_Настройки = Новый Структура;
		_Настройки.Вставить("КлючАПИ",  Выборка.КлючАПИ);
		_Настройки.Вставить("Логин",    Выборка.Логин);
		_Настройки.Вставить("Пароль",   Выборка.Пароль);
		_Настройки.Вставить("issuerId",   Выборка.issuerId);
		
	КонецЕсли;
	
	Возврат _Настройки;
	
КонецФункции

Функция Настройки_ОсновнаяНастройка(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Константы.ВетисОсновнаяНастройка.Получить();
	Иначе
		Константы.ВетисОсновнаяНастройка.Установить(пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ОсновнойПользователь(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Константы.ВетисОсновнойПользователь.Получить();
	Иначе
		Константы.ВетисОсновнойПользователь.Установить(пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ЖурналОпераций(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ЖурналОпераций", Ложь);
	Иначе
		Настройки_Установить("ЖурналОпераций", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_РегламентныеЗадания(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("РегламентныеЗадания", Ложь);
	Иначе
		Настройки_Установить("РегламентныеЗадания", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_Интеграция(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("Интеграция", Ложь);
	Иначе
		Настройки_Установить("Интеграция", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_Префикс(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("Префикс", "");
	Иначе
		Настройки_Установить("Префикс", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ОберткаHttp(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ОберткаHttp", Ложь);
	Иначе
		Настройки_Установить("ОберткаHttp", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВремяОжиданияОтвета(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ВремяОжиданияОтвета", 60);
	Иначе
		Настройки_Установить("ВремяОжиданияОтвета", ?(пЗначение < 0, 0, пЗначение));
	КонецЕсли;
	
КонецФункции

Функция РазрешенаОтладка(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("РазрешенаОтладка", Ложь) = Истина;
	Иначе
		Настройки_Установить("РазрешенаОтладка", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_КоличествоОбъектовВСписке(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("КоличествоОбъектовВСписке", 500);
	Иначе
		Настройки_Установить("КоличествоОбъектовВСписке", ?(пЗначение < 0, 0, ?(пЗначение > 1000, 1000, пЗначение)));
	КонецЕсли;
	
КонецФункции

Функция Настройки_ГраницыЗапросов(пОперация, пГраница = Неопределено, пСмещение = Неопределено) Экспорт
	
	Возврат Настройки_ГраницыЗапросовПоПредприятию(пОперация, Справочники.ВетисEnterprise.ПустаяСсылка(), Справочники.ВетисBusinessEntity.ПустаяСсылка(), пГраница, пСмещение);
	
КонецФункции

Функция Настройки_ГраницыЗапросовПоПредприятию(пОперация, Enterprise, BusinessEntity, пГраница = Неопределено, пСмещение = Неопределено) Экспорт
	
	_Операция = ОперацияПоИмени(пОперация);
	
	Если пГраница = Неопределено И пСмещение = Неопределено Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ _Таблица.Граница, _Таблица.Смещение ИЗ РегистрСведений.ВетисГраницыЗапросов КАК _Таблица ГДЕ _Таблица.Операция = &Операция И _Таблица.Enterprise = &Enterprise И _Таблица.BusinessEntity = &BusinessEntity");
		Запрос.УстановитьПараметр("Операция", _Операция);
		Запрос.УстановитьПараметр("Enterprise", Enterprise);
		Запрос.УстановитьПараметр("BusinessEntity", BusinessEntity);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Неопределено;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			пГраница = Выборка.Граница;
			пСмещение = Выборка.Смещение;
			Возврат Выборка.Граница;
		КонецЕсли;
	Иначе
		_Границы = РегистрыСведений.ВетисГраницыЗапросов.СоздатьМенеджерЗаписи();
		_Границы.Операция = _Операция;
		_Границы.Enterprise = Enterprise;
		_Границы.BusinessEntity = BusinessEntity;
		_Границы.Прочитать();
		_Границы.Операция = _Операция;
		_Границы.Enterprise = Enterprise;
		_Границы.BusinessEntity = BusinessEntity;
		_Границы.Граница = ?(пГраница = Неопределено, _Границы.Граница, пГраница);
		_Границы.Смещение = ?(пСмещение = Неопределено, _Границы.Смещение, пСмещение);
		_Границы.Записать();
	КонецЕсли;
	
КонецФункции


Функция Настройки_УровеньУпаковки(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("УровеньУпаковки", Перечисления.ВетисPackageLevelType.Транспортный);
	Иначе
		Настройки_Установить("УровеньУпаковки", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_КлассМаркировки(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("КлассМаркировки", Перечисления.ВетисProductMarkingClass.UNDEFINED);
	Иначе
		Настройки_Установить("КлассМаркировки", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_Мероприятия(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("Мероприятия", Ложь) = Истина;
	Иначе
		Настройки_Установить("Мероприятия", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_УсловияПеремещения(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ВСД_Видимость_УсловияПеремещения", Ложь) = Истина;
	Иначе
		Настройки_Установить("ВСД_Видимость_УсловияПеремещения", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ЛабораторныеИсследования(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ЛабораторныеИсследования", Ложь) = Истина;
	Иначе
		Настройки_Установить("ЛабораторныеИсследования", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_МультимодальныеПеревозки(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("МультимодальныеПеревозки", Ложь) = Истина;
	Иначе
		Настройки_Установить("МультимодальныеПеревозки", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВСД_БлагополучиеМестности(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("БлагополучиеМестности", "Местность благополучна по заразным болезням животных");
	Иначе
		Настройки_Установить("БлагополучиеМестности", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВСД_НазначениеГруза(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ВСД_НазначениеГруза", Справочники.ВетисPurpose.ПустаяСсылка());
	Иначе
		Настройки_Установить("ВСД_НазначениеГруза", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВСД_НазначениеГрузаНаВозврат(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ВСД_НазначениеГрузаНаВозврат", Справочники.ВетисPurpose.ПустаяСсылка());
	Иначе
		Настройки_Установить("ВСД_НазначениеГрузаНаВозврат", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВСД_ВСЭ(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ВСД_ВСЭ", ПредопределенноеЗначение("Перечисление.ВетисResearchResult.UNKNOWN"));
	Иначе
		Настройки_Установить("ВСД_ВСЭ", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВСД_ОсобыеОтметки(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ВСД_ОсобыеОтметки", "");
	Иначе
		Настройки_Установить("ВСД_ОсобыеОтметки", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ВСД_КонтрольГосВетврачем(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ВСД_КонтрольГосВетврачем", Ложь) = Истина;
	Иначе
		Настройки_Установить("ВСД_КонтрольГосВетврачем", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ТТН_Тип(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ТТН_Тип", ПредопределенноеЗначение("Перечисление.ВетисDocumentType.ТовароТранспортнаяНакладная"));
	Иначе
		Настройки_Установить("ТТН_Тип", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ТТН_СпособХранения(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ТТН_СпособХранения", ПредопределенноеЗначение("Перечисление.ВетисTransportStorageType.Замороженные"));
	Иначе
		Настройки_Установить("ТТН_СпособХранения", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ТТН_Посредник(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ТТН_Посредник");
	Иначе
		Настройки_Установить("ТТН_Посредник", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_ТТН_Транспорт(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("ТТН_Транспорт");
	Иначе
		Настройки_Установить("ТТН_Транспорт", пЗначение);
	КонецЕсли;
	
КонецФункции

Функция Настройки_РегистрНакопленияStockEntry(пЗначение = Неопределено) Экспорт
	
	Если пЗначение = Неопределено Тогда
		Возврат Настройки_Получить("РегистрНакопленияStockEntry", Ложь) = Истина;
	Иначе
		Настройки_Установить("РегистрНакопленияStockEntry", пЗначение = Истина);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПараметрыСеанса

Процедура УстановкаПараметровСеанса() Экспорт
	
	Ветис.ИнициализироватьПеременные();
	
	ПараметрыСеанса.ТекущийПользователь = ОпределитьТекущегоПользователя();
	
КонецПроцедуры

Функция ОпределитьТекущегоПользователя()
	
	_ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если ЗначениеЗаполнено(_ПользовательИБ.Имя) Тогда
		_ТекущийПользователь = Справочники.ВетисПользователи.НайтиПоРеквизиту("Идентификатор", _ПользовательИБ.УникальныйИдентификатор);
		Если НЕ ЗначениеЗаполнено(_ТекущийПользователь) Тогда
			_ТекущийПользователь = Справочники.ВетисПользователи.НайтиПоКоду(_ПользовательИБ.Имя);
			Если ЗначениеЗаполнено(_ТекущийПользователь) Тогда
				_ТекущийПользовательОбъект = _ТекущийПользователь.ПолучитьОбъект();
			Иначе
				_ТекущийПользовательОбъект = Справочники.ВетисПользователи.СоздатьЭлемент();
			КонецЕсли;
			_ТекущийПользовательОбъект.Код = _ПользовательИБ.Имя;
			_ТекущийПользовательОбъект.Наименование = _ПользовательИБ.ПолноеИмя;
			_ТекущийПользовательОбъект.Идентификатор = _ПользовательИБ.УникальныйИдентификатор;
			_ТекущийПользовательОбъект.Записать();
			_ТекущийПользователь = _ТекущийПользовательОбъект.Ссылка;
		КонецЕсли;
	Иначе
		_ТекущийПользователь = Ветис.Настройки_ОсновнойПользователь();
	КонецЕсли;
	
	Возврат _ТекущийПользователь;
	
КонецФункции

Функция ТекущийХС(пЗначение = Неопределено) Экспорт
	Если пЗначение = Неопределено Тогда
		Возврат  Переменные_Получить("ТекущийХС", Справочники.ВетисBusinessEntity.ПустаяСсылка());
	Иначе
		Переменные_Установить("ТекущийХС", пЗначение);
	КонецЕсли;
КонецФункции

Функция ТекущееПредприятие(пЗначение = Неопределено) Экспорт
	Если пЗначение = Неопределено Тогда
		Возврат Переменные_Получить("ТекущееПредприятие", Справочники.ВетисEnterprise.ПустаяСсылка());
	Иначе
		Переменные_Установить("ТекущееПредприятие", пЗначение);
	КонецЕсли;
КонецФункции

Функция ТекущийПользователь() Экспорт
	
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции

Функция serviceId() Экспорт
	
	Возврат Строка(ВетисПовтИсп.Настройки_ЦелевойСервис()) + ВерсияПредставление(":");
	
КонецФункции

#КонецОбласти

#Область Версия

Функция Версия() Экспорт
	
	Возврат ВетисПовтИсп.Версия();
	
КонецФункции

Функция ВерсияПредставление(пПрефикс = Неопределено, пСуффикс = Неопределено) Экспорт
	
	_версия = Версия();
	
	_версия = ?(_версия = Перечисления.ВетисВерсияAPI.v1_4, "", ?(пПрефикс = Неопределено, "", пПрефикс) + _версия + ?(пСуффикс = Неопределено, "", пСуффикс));
	
	Возврат _версия;
	
КонецФункции

Функция ВерсияРавно(пЗначение) Экспорт
	
	_версия = Версия();
	
	Если ТипЗнч(пЗначение) = Тип("Строка") Тогда
		Возврат Строка(_версия) = пЗначение;
	Иначе
		Возврат _версия = пЗначение;
	КонецЕсли;
	
КонецФункции

Функция Версия_1_4(пВерсия = Неопределено) Экспорт
	
	Возврат ?(пВерсия = Неопределено, Версия(), пВерсия) = ПредопределенноеЗначение("Перечисление.ВетисВерсияAPI.v1_4");
	
КонецФункции

Функция Версия_2_0(пВерсия = Неопределено) Экспорт
	
	Возврат ?(пВерсия = Неопределено, Версия(), пВерсия) = ПредопределенноеЗначение("Перечисление.ВетисВерсияAPI.v2_0");
	
КонецФункции

Функция Версия_2_1(пВерсия = Неопределено) Экспорт
	
	Возврат ?(пВерсия = Неопределено, Версия(), пВерсия) = ПредопределенноеЗначение("Перечисление.ВетисВерсияAPI.v2_1");
	
КонецФункции

Функция ВерсияТекстОшибки() Экспорт
	
	Возврат "Не поддерживается текущей верисей АПИ";
	//Возврат "Не установлена версия АПИ";
	
КонецФункции

#КонецОбласти

#Область ДлительностьОпераций

Функция ОперацияПоИмени(пИмя, ПоУмолчанию = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(пИмя) Тогда
		Возврат ПоУмолчанию;
	КонецЕсли;
	
	_Операция = Справочники.ВетисОперации.НайтиПоНаименованию(пИмя);
	
	Если НЕ ЗначениеЗаполнено(_Операция) Тогда
		_Операция = Справочники.ВетисОперации.СоздатьЭлемент();
		_Операция.Наименование = пИмя;
		_Операция.Записать();
		_Операция = _Операция.Ссылка;
	КонецЕсли;
	
	Возврат _Операция;
	
КонецФункции

#КонецОбласти

#Область ОбменДанными

Функция ВыполнитьЗапрос(пОбъектЗапроса, пПараметры) Экспорт
	
	_Ответ = Новый Структура("ИмяОперации, Result, Отказ", пПараметры.ИмяОперации, Неопределено, Ложь);
	_Ответ.Вставить("Ошибки", Новый Массив);
	_Ответ.Вставить("Длительность", 0);
	_Ответ.Вставить("ТекстОшибки", "");
	_Ответ.Вставить("ТекстЗапроса", "");
	_Ответ.Вставить("ТекстОтвета", "");
	_Ответ.Вставить("ТекстЗапросаЗаявки", "");
	_Ответ.Вставить("ТекстОтветаЗаявки", "");
	//_Ответ.Вставить("ТекстОтветаОбъект", "");
	_Ответ.Вставить("applicationId", ВетисОбщегоНазначения.ПустойУникальныйИдентификатор());
	
	_ВремяНачалаОбщее = ТекущаяДата();
	
	_настройки = ВетисПовтИсп.ПолучитьНастройкиПодключения(пПараметры.Настройка);
	
	Если _настройки = Неопределено Тогда
		_Ответ.Отказ = Истина;
		_Ответ.ТекстОшибки = "Не найдена настройка подключения для текущего ХС";
		Возврат _Ответ;
	КонецЕсли;
	
	_составные = ВетисПовтИсп.WSDLПолучить(ПредопределенноеЗначение("Перечисление.ВетисСервис.amsMercuryService")).Составные;
	
	_Соединение = ПолучитьСоединение(_составные.Сервер, _составные.Порт, _настройки.Логин, _настройки.Пароль, _составные.ЗащищенноеСоединение);
	
	_Фабрика = пПараметры.Фабрика;
	
	_ИмяОперации = пПараметры.ИмяОперации;
	
	//запрос на создание заявки
	
	_Application = ВетисApplication.Application(пОбъектЗапроса, _ИмяОперации, _настройки.issuerId);
	
		_SubmitRequest = ВетисApplication.submitApplicationRequest(_Application, _настройки.КлючАПИ);
		
			_Envelope = ВетисSoapEnvelope.Envelope(_SubmitRequest, _Фабрика);
			
				_ТекстЗапроса = ВетисОбщегоНазначения.Сериализовать(_Envelope, _Фабрика);
				
				_Ответ.ТекстЗапроса = _ТекстЗапроса;
				
				_Запрос = ПолучитьЗапрос(_составные.Ресурс, _ТекстЗапроса);
				
				_ОтветСервиса = _Соединение.ОтправитьДляОбработки(_Запрос);
				
				_ТекстОтвета = _ОтветСервиса.ПолучитьТелоКакСтроку("UTF-8");
				
				Если НЕ _ОтветСервиса.КодСостояния = 200 Тогда
					_Ответ.Отказ = Истина;
					_Ответ.ТекстОшибки = _ТекстОтвета;
					_Ответ.Длительность = ТекущаяДата() - _ВремяНачалаОбщее;
					Возврат _Ответ;
				КонецЕсли;
				
			_Envelope = ВетисОбщегоНазначения.Десериализовать(_ТекстОтвета, _Envelope.Тип(), _Фабрика);
		
		_SubmitResponse = ВетисSoapEnvelope.Извлечь(_Envelope).submitApplicationResponse;
	
	Если НЕ (_SubmitResponse.Application.status = ВетисКонстанты.Status_ACCEPTED()) Тогда
		_Ответ.Отказ = Истина;
		_Ответ.ТекстОшибки = "Запрос вернулся со статусом " + _SubmitResponse.Application.status;
		_Ответ.Длительность = ТекущаяДата() - _ВремяНачалаОбщее;
		Возврат _Ответ;
	КонецЕсли;
	
	_Ответ.ТекстОтветаЗаявки = _ТекстОтвета;
	
	_Ответ.applicationId = _SubmitResponse.Application.applicationId;
	
	//запрос на получение результатов обработки заявки
	
	_receiveRequest = ВетисApplication.receiveApplicationResultRequest(_SubmitResponse.Application.applicationId, _настройки.issuerId, _настройки.КлючАПИ);
	
	_Envelope = ВетисSoapEnvelope.Envelope(_receiveRequest, _Фабрика, "receiveApplicationResultRequest");
	
	_ТекстЗапроса = ВетисОбщегоНазначения.Сериализовать(_Envelope, _Фабрика);
	
	//_Ответ.ТекстЗапросаРезультата = _ТекстЗапроса;
	_Ответ.ТекстЗапросаЗаявки = _ТекстЗапроса;
	
	_Запрос = ПолучитьЗапрос(_составные.Ресурс, _ТекстЗапроса);
	
	//пауза перед первым запросом
	ВетисОбщегоНазначения.Пауза(7);
	
	//время ожидания считаем после первой паузы
	_Ожидание = Настройки_ВремяОжиданияОтвета();
	
	_ВремяНачала = ТекущаяДата();
	
	Пока Истина Цикл
		
		_ОтветСервиса = _Соединение.ОтправитьДляОбработки(_Запрос);
		
		_ТекстОтвета = _ОтветСервиса.ПолучитьТелоКакСтроку("UTF-8");
		
		Если НЕ _ОтветСервиса.КодСостояния = 200 Тогда
			_Ответ.Отказ = Истина;
			_Ответ.ТекстОшибки = _ТекстОтвета;
			_Ответ.Длительность = ТекущаяДата() - _ВремяНачалаОбщее;
			Возврат _Ответ;
		КонецЕсли;
		
		_Envelope = ВетисОбщегоНазначения.Десериализовать(_ТекстОтвета, _Envelope.Тип(), _Фабрика);
		
		_receiveResponse = ВетисSoapEnvelope.Извлечь(_Envelope).receiveApplicationResultResponse;
		
		Если _receiveResponse.Application.Status = ВетисКонстанты.Status_IN_PROCESS() Тогда
			Если ТекущаяДата() > _ВремяНачала + _Ожидание Тогда
				_Ответ.Отказ = Истина;
				_Ответ.ТекстОшибки = "Превышено время ожидания";
				_Ответ.Длительность = ТекущаяДата() - _ВремяНачалаОбщее;
				Возврат _Ответ;
			Иначе
				ВетисОбщегоНазначения.Пауза(10);//рекомендванные 2 секунды перед повторным запросом
			КонецЕсли;
		Иначе
			Если НЕ _receiveResponse.Application.status = ВетисКонстанты.Status_COMPLETED() Тогда
				_Ответ.Отказ = Истина;
				_Ответ.Ошибки = ПолучитьСтруктуруОшибки(_receiveResponse.Application.errors);
				_Ответ.ТекстОшибки = ПолучитьТекстОшибки(_receiveResponse.Application.errors);
				_Ответ.Длительность = ТекущаяДата() - _ВремяНачалаОбщее;
				Возврат _Ответ;
			Иначе
				//_Ответ.ТекстОтвета = _ТекстОтвета;
				_Ответ.ТекстОтвета = ВетисОбщегоНазначения.Сериализовать(_receiveResponse.Application, _Фабрика);
				_Ответ.Result = ВетисApplication.ApplicationResult(_receiveResponse.Application);
				_Ответ.Длительность = ТекущаяДата() - _ВремяНачалаОбщее;
				Возврат _Ответ;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ВыполнитьТекстЗапроса(пТекстЗапроса, пНастройка) Экспорт
	
	_Ответ = Новый Структура("Отказ", Ложь);
	_Ответ.Вставить("Ошибки", Новый Массив);
	_Ответ.Вставить("Длительность", 0);
	_Ответ.Вставить("ТекстОшибки", "");
	_Ответ.Вставить("ТекстЗапроса", "");
	_Ответ.Вставить("ТекстОтвета", "");
	_Ответ.Вставить("ТекстЗапросаЗаявки", "");
	_Ответ.Вставить("ТекстОтветаЗаявки", "");
	//_Ответ.Вставить("ТекстОтветаОбъект", "");
	_Ответ.Вставить("applicationId", ВетисОбщегоНазначения.ПустойУникальныйИдентификатор());
	
	_ВремяНачалаОбщее = ТекущаяДата();
	
	_настройки = ВетисПовтИсп.ПолучитьНастройкиПодключения(пНастройка);
	
	Если _настройки = Неопределено Тогда
		_Ответ.Отказ = Истина;
		_Ответ.ТекстОшибки = "Не найдена настройка подключения для текущего ХС";
		Возврат _Ответ;
	КонецЕсли;
	
	_составные = ВетисПовтИсп.WSDLПолучить(ПредопределенноеЗначение("Перечисление.ВетисСервис.amsMercuryService")).Составные;
	
	_Соединение = ПолучитьСоединение(_составные.Сервер, _составные.Порт, _настройки.Логин, _настройки.Пароль, _составные.ЗащищенноеСоединение);
	
	//запрос на создание заявки
	
	_Ответ.ТекстЗапроса = пТекстЗапроса;
	
	_Запрос = ПолучитьЗапрос(_составные.Ресурс, пТекстЗапроса);
	
	_ОтветСервиса = _Соединение.ОтправитьДляОбработки(_Запрос);
	
	_ТекстОтвета = _ОтветСервиса.ПолучитьТелоКакСтроку("UTF-8");
	
	Если НЕ _ОтветСервиса.КодСостояния = 200 Тогда
		_Ответ.Отказ = Истина;
		_Ответ.ТекстОшибки = _ТекстОтвета;
		_Ответ.Длительность = ТекущаяДата() - _ВремяНачалаОбщее;
		Возврат _Ответ;
	КонецЕсли;
	
	_Фабрика = ВетисПовтИсп.ФабрикаBaseApplication();
	
	_Envelope = ВетисОбщегоНазначения.Десериализовать(_ТекстОтвета, ,_Фабрика);
	
	_SubmitResponse = ВетисSoapEnvelope.Извлечь(_Envelope).submitApplicationResponse;
	
	Если НЕ (_SubmitResponse.Application.status = ВетисКонстанты.Status_ACCEPTED()) Тогда
		_Ответ.Отказ = Истина;
		_Ответ.ТекстОшибки = "Запрос вернулся со статусом " + _SubmitResponse.Application.status;
		_Ответ.Длительность = ТекущаяДата() - _ВремяНачалаОбщее;
		Возврат _Ответ;
	КонецЕсли;
	
	_Ответ.ТекстОтветаЗаявки = _ТекстОтвета;
	
	//запрос на получение результатов обработки заявки
	
	_receiveRequest = ВетисApplication.receiveApplicationResultRequest(_SubmitResponse.Application.applicationId, _настройки.issuerId, _настройки.КлючАПИ);
	
	_Envelope = ВетисSoapEnvelope.Envelope(_receiveRequest, _Фабрика, "receiveApplicationResultRequest");
	
	_ТекстЗапроса = ВетисОбщегоНазначения.Сериализовать(_Envelope, _Фабрика);
	
	//_Ответ.ТекстЗапросаРезультата = _ТекстЗапроса;
	_Ответ.ТекстЗапросаЗаявки = _ТекстЗапроса;
	
	_Запрос = ПолучитьЗапрос(_составные.Ресурс, _ТекстЗапроса);
	
	//пауза перед первым запросом
	ВетисОбщегоНазначения.Пауза(7);
	
	//время ожидания считаем после первой паузы
	_Ожидание = Настройки_ВремяОжиданияОтвета();
	
	_ВремяНачала = ТекущаяДата();
	
	Пока Истина Цикл
		
		_ОтветСервиса = _Соединение.ОтправитьДляОбработки(_Запрос);
		
		_ТекстОтвета = _ОтветСервиса.ПолучитьТелоКакСтроку("UTF-8");
		
		Если НЕ _ОтветСервиса.КодСостояния = 200 Тогда
			_Ответ.Отказ = Истина;
			_Ответ.ТекстОшибки = _ТекстОтвета;
			_Ответ.Длительность = ТекущаяДата() - _ВремяНачалаОбщее;
			Возврат _Ответ;
		КонецЕсли;
		
		_Envelope = ВетисОбщегоНазначения.Десериализовать(_ТекстОтвета, _Envelope.Тип(), _Фабрика);
		
		_receiveResponse = ВетисSoapEnvelope.Извлечь(_Envelope).receiveApplicationResultResponse;
		
		Если _receiveResponse.Application.Status = ВетисКонстанты.Status_IN_PROCESS() Тогда
			Если ТекущаяДата() > _ВремяНачала + _Ожидание Тогда
				_Ответ.Отказ = Истина;
				_Ответ.ТекстОшибки = "Превышено время ожидания";
				_Ответ.Длительность = ТекущаяДата() - _ВремяНачалаОбщее;
				Возврат _Ответ;
			Иначе
				ВетисОбщегоНазначения.Пауза(10);//рекомендванные 2 секунды перед повторным запросом
			КонецЕсли;
		Иначе
			Если НЕ _receiveResponse.Application.status = ВетисКонстанты.Status_COMPLETED() Тогда
				_Ответ.Отказ = Истина;
				_Ответ.Ошибки = ПолучитьСтруктуруОшибки(_receiveResponse.Application.errors);
				_Ответ.ТекстОшибки = ПолучитьТекстОшибки(_receiveResponse.Application.errors);
				_Ответ.Длительность = ТекущаяДата() - _ВремяНачалаОбщее;
				Возврат _Ответ;
			Иначе
				_Ответ.ТекстОтвета = ВетисОбщегоНазначения.Сериализовать(_receiveResponse.Application, _Фабрика);
				//_Ответ.Result = ВетисApplication.ApplicationResult(_receiveResponse.Application);
				_Ответ.Длительность = ТекущаяДата() - _ВремяНачалаОбщее;
				Возврат _Ответ;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ОтправитьЗапрос(пТекстЗапроса, issuerId) Экспорт
	
	_Результат = Новый Структура("Отказ, ТекстОтвета, ТекстОшибки", Ложь, "", "");
	
	_настройки = ВетисПовтИсп.ПолучитьНастройкиПодключения(issuerId);
	
	Если _настройки = Неопределено Тогда
		_Результат.Отказ = Истина;
		_Результат.ТекстОшибки = "Не найдена настройка подключения для текущего ХС";
		Возврат _Результат;
	КонецЕсли;
	
	_ТекстЗапроса = пТекстЗапроса;
	
	_составные = ВетисПовтИсп.WSDLПолучить(Перечисления.ВетисСервис.amsMercuryService).Составные;
	
	_Соединение = ПолучитьСоединение(_составные.Сервер, _составные.Порт, _настройки.Логин, _настройки.Пароль, _составные.ЗащищенноеСоединение);
	
	_Запрос = ПолучитьЗапрос(_составные.Ресурс, _ТекстЗапроса);
	
	_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
	
	Если _Ответ.КодСостояния = 200 Тогда
		_Результат.ТекстОтвета = _Ответ.ПолучитьТелоКакСтроку("UTF-8");
	Иначе
		_Результат.Отказ = Истина;
		_Результат.ТекстОшибки = _Ответ.ПолучитьТелоКакСтроку("UTF-8");
	КонецЕсли;
	
	Возврат _Результат;
	
КонецФункции

Функция ПолучитьОтвет(applicationId, issuerId = Неопределено, пОтказ = Ложь) Экспорт
	//запрос на получение результатов обработки заявки
	
	_Результат = Новый Структура("Отказ, ТекстОтвета, ТекстОшибки", Ложь, "", "");
	
	_настройки = ВетисПовтИсп.ПолучитьНастройкиПодключения(issuerId);
	
	Если _настройки = Неопределено Тогда
		_Результат.Отказ = Истина;
		_Результат.ТекстОшибки = "Не найдена настройка подключения для текущего ХС";
		Возврат _Результат;
	КонецЕсли;
	
	_составные = ВетисПовтИсп.WSDLПолучить(Перечисления.ВетисСервис.amsMercuryService).Составные;
	
	_Соединение = ПолучитьСоединение(_составные.Сервер, _составные.Порт, _настройки.Логин, _настройки.Пароль, _составные.ЗащищенноеСоединение);
	
	_Фабрика = ВетисПовтИсп.ФабрикаОбщая();
	
	_receiveRequest = ВетисApplication.receiveApplicationResultRequest(applicationId, _настройки.issuerId);
	
	_Envelope = ВетисSoapEnvelope.Envelope(_receiveRequest, _Фабрика);
	
	_ТекстЗапроса = ВетисОбщегоНазначения.Сериализовать(_Envelope, _Фабрика);
	
	_Запрос = ПолучитьЗапрос(_составные.Ресурс, _ТекстЗапроса);
	
	_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
	
	Если НЕ _Ответ.КодСостояния = 200 Тогда
		_Результат.Отказ = Истина;
		//_Результат.ТекстОшибки = _Ответ.ПолучитьТелоКакСтроку("UTF-8");
		//Возврат _Результат;
	КонецЕсли;
	
	_Результат.ТекстОтвета = _Ответ.ПолучитьТелоКакСтроку("UTF-8");
	
	Возврат _Результат;
	
КонецФункции

Функция ПроксиHttp(пИмяСервиса, пRequest, пОтказ = Ложь, пОшибка = "") Экспорт
	
	//_Отладка = РазрешенаОтладка();
	
	_ЖурналОпераций = Настройки_ЖурналОпераций();
	
	_ИмяОперации = пRequest.Тип().Имя;//должно совпадать с именем объекта
	
	_настройки = ВетисПовтИсп.ПолучитьНастройкиПодключения();
	
	_составные = ВетисПовтИсп.WSDLПолучить(пИмяСервиса, Истина).Составные;
	
	_Соединение = ПолучитьСоединение(_составные.Сервер, _составные.Порт, _настройки.Логин, _настройки.Пароль, _составные.ЗащищенноеСоединение);
	
	_Фабрика = ВетисПовтИсп.ФабрикаWS(пИмяСервиса);
	
	_Envelope = ВетисSoapEnvelope.Envelope(пRequest, _Фабрика);
	
	_ТекстЗапроса = ВетисОбщегоНазначения.Сериализовать(_Envelope, _Фабрика);
	
	_Запрос = ПолучитьЗапрос(_составные.Ресурс, _ТекстЗапроса);
	
	_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
	
	Если НЕ _Ответ.КодСостояния = 200 Тогда
		пОтказ = Истина;
		пОшибка = _Ответ.ПолучитьТелоКакСтроку("UTF-8");
		Возврат Неопределено;
	КонецЕсли;
	
	_Envelope = ВетисОбщегоНазначения.Десериализовать(_Ответ.ПолучитьТелоКакСтроку("UTF-8"), _Envelope.Тип(), _Фабрика);
	
	_Response = ВетисSoapEnvelope.Извлечь(_Envelope);
	
	Возврат _Response;
	
КонецФункции

Функция ОтправитьДляОбработки(пТекстЗапроса, issuerId = Неопределено, пОтказ = Ложь, пОшибка = "")
	
	_настройки = ВетисПовтИсп.ПолучитьНастройкиПодключения(issuerId);
	
	_составные = ВетисПовтИсп.WSDLПолучить(Перечисления.ВетисСервис.amsMercuryService).Составные;
	
	_Запрос = ПолучитьЗапрос(_составные.Ресурс, пТекстЗапроса);
	
	Попытка
		
		_Соединение = ПолучитьСоединение(_составные.Сервер, _составные.Порт, _настройки.Логин, _настройки.Пароль, _составные.ЗащищенноеСоединение);
		
		_Ответ = _Соединение.ОтправитьДляОбработки(_Запрос);
		
		пОтказ = НЕ _Ответ.КодСостояния = 200;
		
		Возврат _Ответ.ПолучитьТелоКакСтроку("UTF-8");
		
	Исключение
		
		пОтказ = Истина;
		
		пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСоединение(пСервер, пПорт, пЛогин, пПароль, пЗащищенноеСоединение = Неопределено, пПрокси = Неопределено)
	
	_Логин = пЛогин;
	
	_Пароль = пПароль;
	
	Если пЗащищенноеСоединение = Неопределено Тогда
		Возврат Новый HTTPСоединение(пСервер, пПорт, _Логин, _Пароль, , Истина);
	Иначе
		Возврат Новый HTTPСоединение(пСервер, пПорт, _Логин, _Пароль, , Настройки_ВремяОжиданияОтвета(), пЗащищенноеСоединение);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗапрос(пАдресРесурса, пТекстЗапроса)
	
	_Запрос = Новый HTTPЗапрос(пАдресРесурса);
	
	_Запрос.Заголовки.Вставить("Content-Type", "text/xml;charset=utf-8");
	
	_Запрос.УстановитьТелоИзСтроки(пТекстЗапроса);
	
	Возврат _Запрос;
	
КонецФункции

Функция ПолучитьТекстОшибки(errors)
	
	Если ТипЗнч(errors.error) = Тип("ОбъектXDTO") Тогда
		Возврат errors.error.code + " - " + errors.error.Последовательность().ПолучитьТекст(0);
	Иначе
		_Ошибка = "";
		Для каждого _error Из errors.error Цикл
			_Ошибка = _Ошибка + Символы.ПС + _error.code + " - " + _error.Последовательность().ПолучитьТекст(0);
		КонецЦикла;
		Возврат Сред(_Ошибка, 2);;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруОшибки(errors)
	
	_список = Новый Массив;
	
	Если ТипЗнч(errors.error) = Тип("ОбъектXDTO") Тогда
		_errors = Новый Массив;
		_errors.Добавить(errors.error);
	Иначе
		_errors = errors.error;
	КонецЕсли;
	
	_Ошибка = "";
	Для каждого _error Из _errors Цикл
		_список.Добавить(Новый Структура("code,text", _error.code, _error.Последовательность().ПолучитьТекст(0)));
	КонецЦикла;
	
	Возврат _список;
	
КонецФункции

#КонецОбласти

#Область Время
// http://vetrf.ru/vetrf-forum/posts/list/390/6855.page#39813
// Во времени оформления ветеринарных сертификатов всегда указывается московское время

Функция ВремяСервиса(пДата = Неопределено, пПодстановка = Неопределено) Экспорт
	
	Возврат ?(пДата = Неопределено, ТекущаяДатаСеанса(), пДата);
	
КонецФункции

Функция ВремяМестное(пДата = Неопределено) Экспорт
	
	Возврат ?(пДата = Неопределено, ТекущаяДатаСеанса(), пДата);
	
КонецФункции

#КонецОбласти

#Область Подписки

Процедура ВетисПриУстановкеНовогоКода(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	Префикс = Настройки_Префикс() + Префикс;
	
КонецПроцедуры

Процедура ВетисПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	ВетисОбщегоНазначения.ДобавитьПрефиксОрганизации(Источник, Префикс);
	
	Префикс = Настройки_Префикс() + Префикс;
	
КонецПроцедуры

#КонецОбласти

#Область ВыборкаСписка

Функция GetRefListNext(Item, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Перем ListResponse;
	
	Если НЕ пПараметры.Свойство("ListResponse") Тогда
		//
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListOptions.offset + пПараметры.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListOptions.offset = пПараметры.ListOptions.offset + пПараметры.ListOptions.count;
				пПараметры.Индекс = 0;
				пПараметры.Вставить("offset", пПараметры.ListOptions.offset);
			КонецЕсли;
		Иначе
			Item = Вычислить(пПараметры.ЭлементКоллекции);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ListResponse = Вычислить(пПараметры.СтрокаВызова);
	Исключение
		пОтказ = Истина;
		пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), пПараметры.ИмяОперации);
		Если НЕ пПараметры.Свойство("ВызыватьИсключение") ИЛИ пПараметры.ВызыватьИсключение = Истина Тогда
			ВызватьИсключение;
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	пПараметры.Вставить("ListResponse", ListResponse);
	
	Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
		Возврат Ложь;
	Иначе
		Item = Вычислить(пПараметры.ЭлементКоллекции);
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура GetRefListInit(пИмяСервиса, пИмяОперации, пИмяКоллекции, пИмяСвойства = "", пПараметры,
		пПарам0 = null, пПарам1 = null, пПарам2 = null, пПарам3 = null, пПарам4 = null,
		пПарам5 = null, пПарам6 = null, пПарам7 = null, пПарам8 = null, пПарам9 = null) Экспорт
	
	Если НЕ GetListItFirst(пПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
	
	_СтрокаПараметров = "пПараметры.ListOptions";
	
	_ПараметрыПрокси = Новый Массив;
	Для _индекс = 0 По 9 Цикл
		_парам = Вычислить("пПарам"+_индекс);
		Если _парам = null Тогда
			Прервать;
		ИначеЕсли _парам = Неопределено Тогда
			_ПараметрыПрокси.Добавить(_парам);
			_СтрокаПараметров = _СтрокаПараметров + ", ";
		Иначе
			_ПараметрыПрокси.Добавить(_парам);
			_СтрокаПараметров = _СтрокаПараметров + ", пПараметры.ПараметрыПрокси["+_индекс+"]";
		КонецЕсли;
	КонецЦикла;
	
	пПараметры.Вставить("ListOptions", ВетисBase.ListOptions(?(пПараметры.Свойство("count"), пПараметры.count, Неопределено), ?(пПараметры.Свойство("offset"), пПараметры.offset, Неопределено)));
	пПараметры.Вставить("Индекс", 0);
	пПараметры.Вставить("ИмяСервиса", пИмяСервиса);
	пПараметры.Вставить("ИмяОперации", пИмяОперации);
	пПараметры.Вставить("ПараметрыПрокси", _ПараметрыПрокси);
	пПараметры.Вставить("ЭлементКоллекции", "пПараметры.ListResponse."+пИмяКоллекции+"[пПараметры.Индекс]"+?(пИмяСвойства = "", "", "."+пИмяСвойства));
	пПараметры.Вставить("СтрокаВызова", "ВетисПовтИсп.Прокси(пПараметры.ИмяСервиса)."+пИмяОперации+"("+_СтрокаПараметров+")");
		
КонецПроцедуры

Функция GetListItFirst(пПараметры) Экспорт
	
	Возврат пПараметры = Неопределено ИЛИ НЕ пПараметры.Свойство("Индекс");
	
КонецФункции

Функция GetListNext(пItem, пПараметры, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если НЕ пПараметры.Свойство("ListResponse") Тогда
		//
	Иначе
		пПараметры.Индекс = пПараметры.Индекс + 1;
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Если пПараметры.ListRequest.ListOptions.offset + пПараметры.ListRequest.ListOptions.count >= Число(пПараметры.ListResponse.Total) Тогда
				Возврат Ложь;
			Иначе
				пПараметры.ListRequest.ListOptions.offset = пПараметры.ListRequest.ListOptions.offset + пПараметры.ListRequest.ListOptions.count;
				пПараметры.Индекс = 0;
				пПараметры.Вставить("offset", пПараметры.ListRequest.ListOptions.offset);
			КонецЕсли;
		Иначе
			пItem = Вычислить(пПараметры.СтрокаПолученияЭлементаКоллекции);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	_Параметры = Новый Структура;
	_Параметры.Вставить("Сервис", ПредопределенноеЗначение("Перечисление.ВетисСервис.amsMercuryService"));
	_Параметры.Вставить("ИмяОперации", пПараметры.ИмяОперации);
	_Параметры.Вставить("Фабрика", пПараметры.Фабрика);
	_Параметры.Вставить("Настройка", пПараметры.issuerId);
	
	_Response = ВыполнитьЗапрос(пПараметры.ListRequest, _Параметры);
	
	пПараметры.Вставить("applicationId", _Response.applicationId);
	пПараметры.Вставить("ТекстЗапроса", _Response.ТекстЗапроса);
	пПараметры.Вставить("ТекстЗапросаЗаявки", _Response.ТекстЗапросаЗаявки);
	пПараметры.Вставить("ТекстОшибки", _Response.ТекстОшибки);
	пПараметры.Вставить("ТекстОтвета", _Response.ТекстОтвета);
	пПараметры.Вставить("Ошибки", _Response.Ошибки);
	пПараметры.Вставить("Длительность", _Response.Длительность);
	
	Если _Response.Отказ = Истина Тогда
		пОтказ = Истина;
		пОшибка = _Response.ТекстОшибки;
		Возврат Ложь;
	Иначе
		
		_Объект = _Response.Result[пПараметры.ИмяОбъекта];
		
		_Объект = ВетисОбщегоНазначения.ПривестиКТипу(_Объект, пПараметры.ИмяОбъекта, пПараметры.URI);
		
		пПараметры.Вставить("ListResponse", _Объект[пПараметры.ИмяСписка]);
		
		Если пПараметры.Индекс >= пПараметры.ListResponse.count Тогда
			Возврат Ложь;
		Иначе
			пItem = Вычислить(пПараметры.СтрокаПолученияЭлементаКоллекции);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция GetListInit(пОбъектЗапроса, пИмяОперации, пИмяОбъекта, пИмяСписка, пИмяКоллекции, пИмяСвойства = "", пПараметры = Неопределено) Экспорт
	
	пПараметры = ?(пПараметры = Неопределено, Новый Структура, пПараметры);
	пПараметры.Вставить("Индекс", 0);
	пПараметры.Вставить("ListRequest",  пОбъектЗапроса);
	//пПараметры.Вставить("URI",          пПараметры.URI);
	//пПараметры.Вставить("Фабрика",      пПараметры.Фабрика);
	//пПараметры.Вставить("issuerId",     пПараметры.issuerId);
	пПараметры.Вставить("ИмяОперации",  пИмяОперации);
	пПараметры.Вставить("ИмяОбъекта",   пИмяОбъекта);
	пПараметры.Вставить("ИмяСписка",    пИмяСписка);
	пПараметры.Вставить("ИмяКоллекции", пИмяКоллекции);
	пПараметры.Вставить("ИмяСвойства",  пИмяСвойства);
	пПараметры.Вставить("СтрокаПолученияЭлементаКоллекции", "пПараметры.ListResponse."+пИмяКоллекции+"[пПараметры.Индекс]"+?(пИмяСвойства = "", "", "."+пИмяСвойства))
		
КонецФункции

#КонецОбласти

#Область Прочее

Функция СписокОбъединенных(пСсылка) Экспорт
	
	_список = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(пСсылка) Тогда
		Возврат _список;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Ссылка
	|ИЗ
	|	Справочник.ВетисEnterprise КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.Ссылка = &Ссылка
	|	И _Таблица.next В(&Ссылка)
	|	И ИСТИНА");
	
	Запрос.УстановитьПараметр("Ссылка", пСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_список = Новый Массив;
	_список.Добавить(пСсылка);
	
	Пока Выборка.Следующий() Цикл
		_список.Добавить(Выборка.Ссылка);
		Для каждого _Элемент Из СписокОбъединенных(Выборка.Ссылка) Цикл
			Если _список.Найти(_Элемент) = Неопределено Тогда
				_список.Добавить(_Элемент);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат _список;
	
КонецФункции

#КонецОбласти
