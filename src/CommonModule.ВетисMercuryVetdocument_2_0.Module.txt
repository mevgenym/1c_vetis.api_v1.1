
//Тип, описывающий сведения о проведенной обработке/иммунизации животных.
//Параметры:
// disease - Заболевание. dt:AnimalDisease
// medicinalDrug - Препарат/вакцина. dt:MedicinalDrug
// effectiveBeforeDate - Срок действия препарата/вакцины. Указывается дата и время окончания срока действия. xs:dateTime
Функция AnimalMedicationEvent(disease = Неопределено, medicinalDrug = Неопределено, effectiveBeforeDate = Неопределено) Экспорт
	
	_Объект = Создать("AnimalMedicationEvent");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, disease, "disease");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, medicinalDrug, "medicinalDrug");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, effectiveBeforeDate, "effectiveBeforeDate");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий партию груза.
Функция Batch(value = Неопределено) Экспорт
	
	_Объект = Создать("Batch");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, value);
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий cведения о происхождении партии продукции.
//Параметры:
// productItem - dt:ProductItem - Оригинальное наименование продукции (данное производителем)
// country - 	dt:Country - Страна происхождения продукции
// producer - dt:Producer - Сведения о производителях продукции
Функция BatchOrigin(productItem, country, producer) Экспорт
	
	_Объект = Создать("BatchOrigin");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, productItem, "productItem");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, country, "country");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, producer, "producer");
	
	Возврат _Объект;
	
КонецФункции

//Операция изменения связи между хозяйствующим субъектом и предприятиями. 
//Параметры:
// type - Тип операции (CREATE, DELETE) bs:RegisterModificationType 1
// businessEntityGuid - Хозяйствующий субъект, к которому прикрепляется предприятие (поднадзорный объект) Строка 1
// enterpriseGuid - Строка 1..*
Функция BusinessEntityActivityLocationsModificationOperation(type, businessEntityGuid, enterpriseGuid) Экспорт
	
	_Объект = Создать("BEActivityLocationsModificationOperation");
	
	_activityLocation = Создать(_Объект.Тип().Свойства.Получить("activityLocation").Тип);
	
	ВетисОбщегоНазначения.УстановитьЗначение(_activityLocation, ВетисDictionary_2_0.Enterprise(enterpriseGuid), "enterprise");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, type, "type");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, ВетисDictionary_2_0.BusinessEntity(businessEntityGuid), "businessEntity");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, _activityLocation, "activityLocation");
	
	Возврат _Объект;
	
КонецФункции

//Операция внесения изменений в реестр ХС
//Параметры:
// type - Тип операции (CREATE, FIND_OR_CREATE, UPDATE) bs:RegisterModificationType
// affectedList - Входящий список ХС dt:BusinessEntity
// resultingList - Список, который содержит сведения о добавляемых хозяйствующих субъектах.
//                 На данный момент поддерживается добавление только одного субъекта в рамках одной заявки. dt:BusinessEntity
// reason - Основание добавления записи в реестр xs:String
Функция BusinessEntityModificationOperation(registerModificationType, affectedList = Неопределено, resultingList = Неопределено, reason = Неопределено) Экспорт
	
	_Объект = Создать("BEModificationOperation");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, registerModificationType, "type");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, affectedList, "affectedList");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, resultingList, "resultingList");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, reason, "reason");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий cертифицированную производственную партию продукции.
//Параметры:
// producer - dt:BusinessMember - Сведения о производителе продукции. Заполняется только для производственного вет.сертификата.
// batch - vd:Batch - Сведения о партии продукции.
Функция CertifiedBatch(batch, producer = Неопределено) Экспорт
	
	_Объект = Создать("CertifiedBatch");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, batch, "batch");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, producer, "producer");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий сертифицированную транспортную партию.
//Параметры:
// consignor - dt:BusinessMember - Сведения об отправителе (владельце). Заполняется только для транспортного вет.сертификата.
// consignee - dt:BusinessMember - Сведения о получателе груза. Заполняется только для транспортного вет.сертификата.
// batch - vd:Batch - Сведения о партии продукции.
// broker - dt:BusinessEntity - Сведения о фирме-посреднике (перевозчике).
// transportInfo - vd:TransportInfo - Сведения о транспорте.
// transportStorageType - dt:TransportationStorageType - Способ хранения при перевозке.
// shipmentRoute - vd:ShipmentRoute - Сведения о маршруте следования (пунктах перегрузки).
Функция CertifiedConsignment(consignor, consignee, batch, broker, transportInfo, transportStorageType, shipmentRoute = Неопределено) Экспорт
	
	_Объект = Создать("CertifiedConsignment");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, consignor, "consignor");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, consignee, "consignee");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, batch, "batch");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, broker, "broker");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, transportInfo, "transportInfo");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, transportStorageType, "transportStorageType");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, shipmentRoute, "shipmentRoute");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий транспортную партию груза.
Функция Consignment(value = Неопределено) Экспорт
	
	_Объект = Создать("Consignment");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, value);
	
	//_Объект.id = "";// Идентификатор, определяющий consignment в запросе. Должен быть указан, если запрос содержит несколько элементов consignment.
	
	//_Объект.partOf = "";// Ссылка на consignment в разделе delivery запроса. Должен быть указан, если запрос содержит несколько элементов consignment.
	
	// http://vetrf.ru/vetrf-forum/posts/list/315/6855.page#39747
	// Этот атрибут был заявлен на перспективу.
	// В дальнейшем планируется добавить возможность гашения нескольких партий товара.
	// На данный момент использование или неиспользование этого атрибута ошибочным не является.
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий контроль поставки (документарный, ветеринарный).
//Параметры:
// waybill - vd:Waybill - Сведения о товарно-транспортной накладной
// vetCertificate - vd:VetDocument - Ветеринарно-сопроводительный документ
// relatedDocument - vd:Document - Связанные документы
Функция ConsignmentDocumentList(waybill, VetDocument, relatedDocument = Неопределено) Экспорт
	
	_Объект = Создать("ConsignmentDocumentList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, waybill, "waybill");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, VetDocument, "vetCertificate");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, relatedDocument, "relatedDocument");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий поставку.
//Параметры:
// consignor - dt:BusinessMember - Сведения об отправителе.
// consignee - dt:BusinessMember - Сведения о получателе.
// consignment - vd:Consignment - Фактические сведения о входящей партии или группе животных.
// accompanyingForms - vd:ConsignmentDocumentList - Сопроводительные документы.
// broker - dt:BusinessEntity - Сведения о фирме-посреднике.
// transportInfo - vd:TransportInfo - Сведения о транспорте.
// transportStorageType - dt:TransportationStorageType - Способ хранения при перевозке.
// shipmentRoute - vd:ShipmentRoute - Сведения о маршруте следования (пунктах перегрузки).
Функция Delivery(consignor, consignee, consignment, accompanyingForms, broker, transportInfo, transportStorageType, shipmentRoute = Неопределено) Экспорт
	
	_Объект = Создать("Delivery");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Ветис.ВремяСервиса(), "deliveryDate");// xs:dateTime
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, consignor, "consignor");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, consignee, "consignee");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, accompanyingForms, "accompanyingForms");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, broker, "broker");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, transportInfo, "transportInfo");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, transportStorageType, "transportStorageType");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, shipmentRoute, "shipmentRoute");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, consignment, "consignment");

	Возврат _Объект;
	
	// http://vetrf.ru/vetrf-forum/posts/list/825/6855.page#41188
	// В случае если вы передаете в запросе несколько объектов consignment ("..Request/delivery/consignment")
	// и несколько объектов vetCertificate ("..Request/delivery/accompanyingForms/vetCertificate")
	// то связь между ними должна быть установлена путем указания атрибутов "id" - у элемента consignment
	// и "for" - для элемента vetCertificate.
	// 
	// В случае если вы передаете в запросе несколько объектов consignment и один объект vetCertificate,
	// то атрибуты id и for могут быть не указаны,
	// но в этом случае информация из единственного элемента vetCertificate будет распространяться на все ВСД,
	// оформляемые в этом запросе.
	//
	// http://vetrf.ru/vetrf-forum/posts/list/825/6855.page#41192
	// Возможно, что неверно указали значения для атрибутов id и for.
	// Их типы ID и IDREF, соответственно, и должны начинаться с "_" или буквенного символа.
	
КонецФункции

//Обобщенные сведения о результате приема партии продукции.
//Параметры:
// presence - vd:DocumentNature - Природа ВСД (электронный или бумажный)
// docInspection - vd:DeliveryInspection - Соответствуют ли сведения о партии, указанной в ВСД, фактическим
// vetInspection - vd:DeliveryInspection - Осуществлен ли контроль груза гос.ветврачом на соответствие требованиям.
// decision - vd:DeliveryDecision - Принятое решение о приёме входной партии.
Функция DeliveryFactList(presence, docInspection, vetInspection, decision) Экспорт
	
	_Объект = Создать("DeliveryFactList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, presence, "vetCertificatePresence");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, docInspection, "docInspection");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, vetInspection, "vetInspection");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, decision, "decision");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий контроль поставки (документарный, ветеринарный).
//Параметры:
// result - vd:DeliveryInspectionResult - Результат контроля.
// responsible - vd:User - Ответственный за контроль.
Функция DeliveryInspection(result, responsible = Неопределено) Экспорт
	
	_Объект = Создать("DeliveryInspection");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, result, "result");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, responsible, "responsible", , ВетисMercuryVetdocument_2_0.User(ВетисПовтИсп.ТекущийПользователь_Логин()));
	
	Возврат _Объект;
	
КонецФункции

Функция DiscrepancyReason(name) Экспорт
	
	_Объект = Создать("DiscrepancyReason");
	
	_Объект.name = name;
	
	Возврат _Объект;
	
КонецФункции

Функция DiscrepancyReport(issueSeries = Неопределено, issueNumber = Неопределено, issueDate = Неопределено, reason = Неопределено, description = Неопределено) Экспорт
	
	_Объект = Создать("DiscrepancyReport");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, issueSeries, "issueSeries");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, issueNumber, "issueNumber");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, issueDate, "issueDate");//xs:date
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, DiscrepancyReason(reason), "reason");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, description, "description");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий документ
//Параметры:
// issueSeries - Серия документа. bs:String255 0..1
// issueNumber - Номер документа. bs:String255 0..1
// issueDate - Дата документа. xs:date 0..1
// type - Тип документа. dt:DocumentType
Функция Document(issueSeries = Неопределено, issueNumber = Неопределено, issueDate = Неопределено, type = Неопределено, issuer = Неопределено) Экспорт
	
	_Объект = Создать("Document");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, issueSeries, "issueSeries");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, issueNumber, "issueNumber");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, issueDate, "issueDate");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, type, "type");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, issuer, "issuer");
	
	Возврат _Объект;
	
КонецФункции

//Операция внесения изменений в реестр ХС
//Параметры:
// type - bs:RegisterModificationType - Тип операции (CREATE, UPDATE)
// enterprise - dt:Enterprise - сведения о добавляемых поднадзорных объектах.
//                 На данный момент поддерживается добавление только одной площадки в рамках одной заявки.
// reason - xs:String - Основание добавления записи в реестр
Функция EnterpriseModificationOperation(type, enterprise = Неопределено, reason = Неопределено) Экспорт
	
	_Объект = Создать("ENTModificationOperation");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, type, "type");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, ВетисDictionary_2_0.EnterpriseList(enterprise), "resultingList");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, reason, "reason");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий дату производства, либо дату окончания срока годности продукции.
//Может указываться единичной датой, интервалом, либо строкой.
Функция GoodsDate(firstDate, secondDate = Неопределено, пДень = Ложь, пЧас = Ложь, пМинута = Ложь) Экспорт
	
	_Объект = Создать("GoodsDate");
	
	Если ТипЗнч(firstDate) = Тип("Дата") Тогда
		_Объект.firstDate = ВетисDictionary_2_0.ComplexDate(firstDate, пДень, пЧас, пМинута);
		
		Если НЕ secondDate = Неопределено И ЗначениеЗаполнено(secondDate) Тогда
			_фс = "ДФ=ММ.гггг" + ?(пДень, ".дд", "") + ?(пЧас, ".чч", "") + ?(пМинута, ".мм", "");
			Если НЕ Формат(secondDate, _фс) = Формат(firstDate, _фс) Тогда
				_Объект.secondDate = ВетисDictionary_2_0.ComplexDate(secondDate, пДень, пЧас, пМинута);
			КонецЕсли;
		КонецЕсли;
	Иначе
		_Объект.informalDate = firstDate;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Создает объект, который содержит сведения об объединяемых складских записях журнала продукции
//Параметры:
// sourceStockEntry - Массив - vd:StockEntry - Позиции в складском журнале системы Меркурий, не менее двух.
//                    Указанные позиции будут объединены в одну. Представляют собой идентификатор версии записи (uuid) в ИС Меркурий.
//	Указанная версия записи складского журнала продукции в ИС Меркурий должна быть актуальной, неаннулированной и неудалённой.
//	Объединяемые записи журнала должны быть в статусе "создана" или "отправлена".
//	Объединяемые записи журнала должны быть в журнале входной продукции, для вырабатываемой продукции функция объединения отсутствует.
//	Хозяйствующий субъект - владелец продукции в объединяемых записях должен совпадать.
//	Объединяемые записи журнала продукции должны относится к одному типу продукции (первый уровень справочника продукции).
//	Объединяемые записи журнала продукции должны относится к одной продукции (второй уровень справочника продукции).
//	В объединяемых записях журнала продукции указанная ед. измерения должна относится к одной группе единиц измерения.
//	Объединяемые записи журнала продукции должны относится к одной стране происхождения.
//	Запрещено объединение записи журнала входной и вырабатываемой продукции.
//	Запрещено объединение записей журнала относящихся к скоропортящейся и не скоропортящейся продукции.
//	Запрещено объединение записей журнала относящихся к качественной и некачественной продукции;
//
Функция MergeStockEntriesOperation(sourceStockEntry) Экспорт
	
	_Объект = Создать("MergeStockEntriesOperation");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, sourceStockEntry, "sourceStockEntry", "ВетисMercuryVetdocument.StockEntry");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий лабораторное исследование. Исследование выполняется на конкретный показатель/заболевание в лаборатории.
//Параметры:
// batchID - bs:Identifier - Уникальный идентификатор производственной партии продукции, для которой проводились лабораторные исследования.
// expertiseID - bs:String255 - Номер экспертизы.
// indicator - dt:Indicator - Показатель безопасности.
// disease - dt:AnimalDisease - Заболевание.
// method - dt:ResearchMethod - Метод исследования.
// result - dt:ResearchResult - Результат исследования.
// conclusion - 	bs:Text - Заключение.
Функция LaboratoryResearchEvent(batchID, expertiseID, indicator, disease, method, result, conclusion) Экспорт
	
	_Объект = Создать("LaboratoryResearchEvent");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, batchID, "batchID");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, expertiseID, "expertiseID");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, indicator, "indicator");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, disease, "disease");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, method, "method");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, result, "result");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, conclusion, "conclusion");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий операцию внесения изменений в реестр наименований продукции
//Параметры:
// type - bs:RegisterModificationType - Тип операции (CREATE, UPDATE, DELETE)
// productItemList - Массив
Функция PSLModificationOperation(type, productItemList = Неопределено) Экспорт
	
	_Объект = Создать("PSLModificationOperation");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, type, "type");
	
	Если type = ВетисКонстанты.RegisterModificationType_DELETE() Тогда
		ВетисОбщегоНазначения.УстановитьЗначение(_Объект, ВетисDictionary_2_0.ProductItemList(productItemList), "affectedList");
	Иначе
		ВетисОбщегоНазначения.УстановитьЗначение(_Объект, ВетисDictionary_2_0.ProductItemList(productItemList), "resultingList");
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий cведения о связанном документе
//Параметры:
// relationshipType - Тип отношения между документами. ReferenceType 1..1
// issueSeries - Серия документа. bs:String255 0..1
// issueNumber - Номер документа. bs:String255 0..1
// issueDate - Дата документа. xs:date 0..1
// type - Тип документа. dt:DocumentType
Функция ReferencedDocument(relationshipType = Неопределено, issueSeries = Неопределено, issueNumber = Неопределено, issueDate = Неопределено, type = Неопределено) Экспорт
	
	_Объект = Создать("ReferencedDocument");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, relationshipType, "relationshipType");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, issueSeries, "issueSeries");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, issueNumber, "issueNumber");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, issueDate, "issueDate");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, type, "type");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий подтверждение соблюдения условия перемещения продукции.
//Параметры:
// condition - dt:RegionalizationCondition - Cоблюдаемое условие перемещения партии.
// text - bs:Text - Текст (точная формулировка) соблюдаемого условия перемещения партии.
Функция RegionalizationClause(condition = Неопределено, text = Неопределено) Экспорт
	
	_Объект = Создать("RegionalizationClause");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, condition, "condition");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, text, "text");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий cведения о записи журнала продукции.
Функция StockEntry(guid = Неопределено) Экспорт
	
	_Объект = Создать("StockEntry");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция StockEntryList(stockEntry = Неопределено) Экспорт
	
	_Объект = Создать("StockEntryList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, stockEntry, "stockEntry");
	
	_Объект.count = _Объект.stockEntry.Количество();
	_Объект.offset = 0;
	_Объект.total = 0;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий список пунктов в маршруте следования груза (в т.ч. точек перегрузки).
//Параметры:
// routePoint - Пункт перегрузки. vd:ShipmentRoutePoint 0..*
Функция ShipmentRoute(routePoint = Неопределено) Экспорт
	
	_Объект = Создать("ShipmentRoute");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, routePoint, "routePoint");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий cведения о точке маршрута следования.
//Наследуется от типа bs:GenericEntity.
//Параметры:
// sqnId - Порядовый номер точки маршрута. bs:SequenceNumber 0..1
// location - Сведения о пункте перегрузки. dt:Location 0..1
// enterprise - Сведения о пункте перегрузки. dt:Enterprise 0..1
// transshipment - Признак того, осуществляется ли в данной точке перегрузка. xs:boolean 0..1
// nextTransport - Сведения о дальнейшем транспорте. vd:TransportInfo 0..1
Функция ShipmentRoutePoint(sqnId = Неопределено, location = Неопределено, enterprise = Неопределено, transshipment = Неопределено, nextTransport = Неопределено) Экспорт
	
	_Объект = Создать("ShipmentRoutePoint");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, sqnId, "sqnId");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, location, "location");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, enterprise, "enterprise");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, transshipment, "transshipment");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, nextTransport, "nextTransport");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий операцию оформления результатов инвентаризации
//Параметры:
// affectedList - Входящие записи для операции. vd:StockEntryList 0..1
// resultingList - Получаемые в результате операции записи. vd:StockEntryList 0..1
// reason - Причина несоответствия. xs:string 0..1
Функция StockDiscrepancy(stockEntry = Неопределено) Экспорт
	
	_Объект = Создать("StockDiscrepancy");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, StockEntryList(stockEntry), "resultingList");
	
	Возврат _Объект;
	
КонецФункции

//
//Параметры:
// blankFilter - Фильтр по объёму записи складского журнала. vd:StockEntryBlankFilter
Функция StockEntrySearchPattern(blankFilter) Экспорт
	
	_Объект = Создать("StockEntrySearchPattern");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, blankFilter, "blankFilter");
	
	Возврат _Объект;
	
КонецФункции

Функция TransportInfo(transportType, transportNumber) Экспорт
	
	_Объект = Создать("TransportInfo");
	
	_Объект.transportType   = transportType;
	_Объект.transportNumber = transportNumber;
	
	Возврат _Объект;
	
КонецФункции

Функция TransportNumber() Экспорт
	
	_Объект = Создать("TransportNumber");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий пользователя. Наследуется от типа bs:GenericEntity.
Функция User(login = Неопределено, fio = Неопределено, post = Неопределено) Экспорт
	
	_Объект = Создать("User");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, login, "login");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, fio, "fio");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, post, "post");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий результаты осмотра/исследований партии. Заключение ветеринарного врача/специалиста.
//Параметры:
// purpose - dt:Purpose - Цель. Назначение груза.
// cargoInspected - xs:boolean - Осуществлен контроль гос.ветврачом на соответствие требованиям.
// cargoExpertized - dt:ResearchResult - Проводилась ли ветсанэкспертиза.
// locationProsperity - bs:String255 - Благополучие местности.
// specialMarks - bs:Text - Особые отметки.
// r13nClause - vd:RegionalizationClause - Подтверждение соблюдаемых условий перемещения продукции.
//              Если в соответствии с правилами регионализации перемещение продукции разрешено при выполнении определенных условий,
//              то условия, которые обязуется выполнить перевозчик передаются в данном поле.
// laboratoryResearch - vd:LaboratoryResearchEvent - Сведения о проведенных лабораторных исследованиях.
Функция VeterinaryAuthentication(purpose = Неопределено,
	cargoInspected = Неопределено,
	cargoExpertized = Неопределено,
	locationProsperity = Неопределено,
	specialMarks = Неопределено,
	r13nClause = Неопределено,
	laboratoryResearch = Неопределено) Экспорт
	
	_Объект = Создать("VeterinaryAuthentication");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, purpose, "purpose");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, cargoInspected, "cargoInspected");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, cargoExpertized, "cargoExpertized");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, locationProsperity, "locationProsperity");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, specialMarks, "specialMarks");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, r13nClause, "r13nClause");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, laboratoryResearch, "laboratoryResearch");
	
	//_Объект.animalSpentPeriod
	//_Объект.monthsSpent
	//_Объект.quarantine
	//_Объект.immunization
	//_Объект.veterinaryEvent
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий некое событие или мероприятие, ассоциированное с партией продукции (или живым животным).
//Например, лабораторное исследование, ВСЭ, произведенная обработка или иммунизация животного и т.д.
//Параметры:
// ID - Идентификатор события в разрезе записи складского журнала или вет.сертификата. Не задаётся пользователем в запросах (кроме запросов на редактирование), формируется системой автоматически. bs:Identifier
// name - Наименование мероприятия. bs:String255
// type - Тип мероприятия. vd:VeterinaryEventType
// actualDateTime - Дата события. xs:dateTime
// location - Место проведения мероприятия. Указывается, если место проведения - это не предприятие зарегистрированное в справочнике Меркурия. dt:Location
// enterprise - Место проведения мероприятия в случае, если это зарегистрированное предприятие. dt:Enterprise
// operator - Организация-оператор, осуществляющий мероприятие. Например, лаборатория (в случае лаб.исследований) или СББЖ. dt:Organization
// referencedDocument - Связанный документ. Например, акт отбора пробы для лаб.исследования. vd:Document
// notes - Дополнительные сведения. bs:Text
Функция VeterinaryEvent(value = Неопределено) Экспорт
	
	_Объект = Создать("VeterinaryEvent");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, value);
	
	//_Объект.ID = ID;
	//_Объект.name = name;
	//_Объект.type = type;
	//_Объект.actualDateTime = actualDateTime;
	//_Объект.location = location;
	//_Объект.enterprise = enterprise;
	//_Объект.operator = operator;
	//_Объект.referencedDocument = referencedDocument;
	//_Объект.notes = notes;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий ветеринарно-сопроводительный документ (ВСД).
//Параметры:
// uuid - Идентификатор ВСД
Функция VetDocument(uuid = Неопределено) Экспорт
	
	_Объект = Создать("VetDocument");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, uuid, "uuid");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий cведения об изменении статуса ветеринарного документа.
//Параметры;
// status - vd:VetDocumentStatus - установленный статус документа
// user - dt:User - пользователь, изменивший статус
// date - xs:dateTime - дата и время изменения статуса
// reason - vd:VetDocumentStatusChangeReason - основание
Функция VetDocumentStatusChange(status = Неопределено, user = Неопределено, date = Неопределено, reason = Неопределено) Экспорт
	
	_Объект = Создать("VetDocumentStatusChange");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, status, "status", , ВетисКонстанты.VetDocumentStatus_CONFIRMED());
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, user, "specifiedPerson", , ВетисMercuryVetdocument_2_0.User(ВетисПовтИсп.ТекущийПользователь_Логин()));
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, date, "actualDateTime", , Ветис.ВремяСервиса());// xs:dateTime
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, reason, "reason", "ВетисMercuryVetdocument_2_0.VetDocumentStatusChangeReason");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий товарно-транспортную накладную.
//Параметры;
// consignor - Сведения об отправителе (владельце). dt:BusinessMember 0..1
// consignee - Сведения о получателе груза. dt:BusinessMember 0..1
// broker - Сведения о фирме-посреднике (перевозчике). dt:BusinessEntity 0..1
// transportInfo - Сведения о транспорте. vd:TransportInfo 0..1
// transportStorageType - Способ хранения при перевозке. dt:TransportationStorageType 0..1
// shipmentRoute - Сведения о маршруте следования (пунктах перегрузки). vd:ShipmentRoute 0..1
Функция Waybill(issueSeries = Неопределено, issueNumber = Неопределено, issueDate = Неопределено, type = Неопределено, broker = Неопределено, transportInfo = Неопределено, transportStorageType = Неопределено) Экспорт
	
	_Объект = Создать("Waybill");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, issueSeries, "issueSeries");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, issueNumber, "issueNumber");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, issueDate, "issueDate");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, type, "type");
	//ВетисОбщегоНазначения.УстановитьЗначение(_Объект, consignor, "consignor");
	//ВетисОбщегоНазначения.УстановитьЗначение(_Объект, consignee, "consignee");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, broker, "broker");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, transportInfo, "transportInfo");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, transportStorageType, "transportStorageType");
	
	Возврат _Объект;
	
КонецФункции


//Тип, описывающий cколько времени животные находились на территории ТС.
Функция AnimalSpentPeriod(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_FROM_BIRTH();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_NOT_LESS_SIX_MONTHS();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_IN_MONTHS();
	ИначеЕсли value = 4 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_ZERO();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Тип, описывающий контроль поставки (документарный, ветеринарный).
Функция DeliveryDecision(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.DeliveryDecision_ACCEPT_ALL();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.DeliveryDecision_PARTIALLY();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.DeliveryDecision_RETURN_ALL();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Тип, описывающий результат контроля поставки.
Функция DeliveryInspectionResult(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.DeliveryInspectionResult_CORRESPONDS();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.DeliveryInspectionResult_MISMATCH();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.DeliveryInspectionResult_UNSUPERVISED();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Тип, описывающий форму ветеринарно-сопроводительного докумнета (ВСД).
Функция VetDocumentForm(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERTCU1();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_LIC1();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERTCU2();
	ИначеЕсли value = 4 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_LIC2();
	ИначеЕсли value = 5 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERTCU3();
	ИначеЕсли value = 6 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_LIC3();
	ИначеЕсли value = 7 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_NOTE4();
	ИначеЕсли value = 8 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT5I();
	ИначеЕсли value = 9 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT61();
	ИначеЕсли value = 10 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT62();
	ИначеЕсли value = 11 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT63();
	ИначеЕсли value = 12 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_PRODUCTIVE();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Тип, описывающий статус ветеринарно-сопроводительного докумнета (ВСД).
Функция VetDocumentStatus(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.VetDocumentStatus_CONFIRMED();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.VetDocumentStatus_WITHDRAWN();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.VetDocumentStatus_UTILIZED();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Причина аннулирования ветеринарного сертификата. 
Функция VetDocumentStatusChangeReason(пЗначение) Экспорт
	
	Возврат Строка(пЗначение);
	
КонецФункции

//Тип, описывающий тип ветеринарно-сопроводительного документа (ВСД).
//Типы сертификатов в документации перечислены как для запросов, так и для ответов сервиса.
//В запросе на список ветеринарных сертификатов можно указать только входящие или исходящие.
//В ответе сервиса придут транспортные и возвратные сертификаты.
//То есть в запросе можно указать направление отправки сертификата (от предприятия или на предприятие),
//а в ответе придет информация о том какие из них были транспортными, а какие были оформлены как возвратными.
Функция VetDocumentType(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.VetDocumentType_INCOMING();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.VetDocumentType_OUTGOING();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.VetDocumentType_PRODUCTIVE();
	ИначеЕсли value = 4 Тогда
		Возврат ВетисКонстанты.VetDocumentType_RETURNABLE();
	ИначеЕсли value = 5 Тогда
		Возврат ВетисКонстанты.VetDocumentType_TRANSPORT();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


Функция Создать(пИмя, пФабрика = Неопределено) Экспорт
	
	Возврат ВетисОбщегоНазначения.Создать(пИмя, URI(), пФабрика);
	
КонецФункции

Функция URI() Экспорт
	
	Возврат "http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2";
	
КонецФункции

