
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	shipmentRouteList.ЗагрузитьЗначения(Параметры.shipmentRoute);
	
	SubProductList.ЗагрузитьЗначения(Параметры.SubProduct);
	
	BusinessEntity = Параметры.BusinessEntity;
	
	КомандаЗаполнитьНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ЗначениеВыбора = Новый Соответствие;
	
	Для каждого _Уровень1 Из Список.ПолучитьЭлементы() Цикл
		Для каждого _Уровень2 Из _Уровень1.ПолучитьЭлементы() Цикл
			Для каждого _Уровень3 Из _Уровень2.ПолучитьЭлементы() Цикл
				Для каждого _Уровень4 Из _Уровень3.ПолучитьЭлементы() Цикл
					Если _Уровень4.Использование Тогда
						Для каждого _SubProduct Из _Уровень2.Значение Цикл
							_Список = ЗначениеВыбора.Получить(_SubProduct.Значение);
							Если _Список = Неопределено Тогда
								_Список = Новый Массив;
								ЗначениеВыбора.Вставить(_SubProduct.Значение, _Список);
							КонецЕсли;
							Для каждого _Условие Из _Уровень4.Значение Цикл
								Если _Список.Найти(_Условие.Значение) = Неопределено Тогда
									_Список.Добавить(_Условие.Значение);
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Закрыть(ЗначениеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	Перем _Отказ, _Ошибка;
	
	КомандаЗаполнитьНаСервере(_Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомандаЗаполнитьНаСервере(пОтказ = Ложь, пОшибка = "")
	
	_Ответ = ВетисMercuryApplicationsСлой1с.CheckShipmentRegionalization(SubProductList.ВыгрузитьЗначения(), shipmentRouteList.ВыгрузитьЗначения(), BusinessEntity, пОтказ, пОшибка);
	
	Если пОтказ = Ложь Тогда
		_дерево = РеквизитФормыВЗначение("Список");
		_дерево.Строки.Очистить();
		
		_Уровень1 = _дерево.Строки.Добавить();
		_Уровень1.Уровень = 1;
		_Уровень1.Имя = "Корень";
		_Уровень1.ПредставлениеЗначения = "Все условия";
		_Уровень1.ЭтоГруппа = Истина;
		Для каждого _r13nRouteSection Из _Ответ Цикл
			Для каждого _appliedR13nRule Из _r13nRouteSection.appliedR13nRule Цикл
				Если _appliedR13nRule.decision = ВетисКонстанты.RegionalizationDecision_РазрешеноУсловно() Тогда
					_Уровень2 = _Уровень1.Строки.Добавить();
					_Уровень2.Уровень = 2;
					_Уровень2.Имя = "Вид продукции";
					_Уровень2.Значение = Новый СписокЗначений;
					_Уровень2.ЭтоГруппа = Истина;
					_Индекс = 0;
					Для каждого _cargoType Из _appliedR13nRule.cargoType Цикл
						_SubProduct = ВетисDictionaryСлой1с.SubProduct(_cargoType);
						_Уровень2.Значение.Добавить(_SubProduct, "" + _SubProduct + " (" + СокрП(_SubProduct.Код) + ")");
						_Уровень2.ПредставлениеЗначения = _Уровень2.ПредставлениеЗначения + ?(_Уровень2.ПредставлениеЗначения="","", "; ") + _Уровень2.Значение[_Индекс];
						_Индекс = _Индекс + 1;
					КонецЦикла;
					Для каждого _requirement Из _appliedR13nRule.requirement Цикл
						_Уровень3 = _Уровень2.Строки.Добавить();
						_Уровень3.Уровень = 3;
						_Уровень3.Имя = "Группы";
						_Уровень3.Значение = Новый Структура;
						_Уровень3.Значение.Вставить("relatedDisease", ВетисDictionaryСлой1с.AnimalDisease(_requirement.relatedDisease));
						//_Уровень3.Значение.Вставить("type", ВетисDictionaryСлой1с.RegionalizationDecision(_requirement.type));
						_Уровень3.ПредставлениеЗначения = "" + _Уровень3.Значение.relatedDisease;
						_Уровень3.ЭтоГруппа = Истина;
						Для каждого _conditionGroup Из _requirement.conditionGroup Цикл
							_Уровень4 = _Уровень3.Строки.Добавить();
							_Уровень4.Уровень = 4;
							_Уровень4.Имя = "Условия";
							_Уровень4.Значение = Новый СписокЗначений;
							_Индекс = 0;
							Для каждого _condition Из _conditionGroup.condition Цикл
								_Условие = ВетисDictionaryСлой1с.RegionalizationCondition(_condition);
								_Уровень4.Значение.Добавить(_Условие, _Условие.text);
								_Уровень4.ПредставлениеЗначения = _Уровень4.ПредставлениеЗначения + ?(_Уровень4.ПредставлениеЗначения="","", "; ") + (_Индекс+1) + ") " + _Уровень4.Значение[_Индекс];
								_Индекс = _Индекс + 1;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		_дерево.Строки.Сортировать("ПредставлениеЗначения", Истина);
		
		ЗначениеВРеквизитФормы(_дерево, "Список");
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СписокИспользованиеПриИзменении(Элемент)
	
	_ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ВсеРодительские(_ТекущиеДанные, _ТекущиеДанные.Использование);
	
	ВсеДочерние(_ТекущиеДанные, _ТекущиеДанные.Использование);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеРодительские(пТекущиеДанные, пЗначение)
	
	_ТекущийРодитель = пТекущиеДанные.ПолучитьРодителя();
	Если НЕ _ТекущийРодитель = Неопределено Тогда
		
		Если пЗначение = Ложь Тогда
			_ЕстьИстина = Ложь;
			Для каждого _Элемент Из _ТекущийРодитель.ПолучитьЭлементы() Цикл
				Если _Элемент.Использование Тогда
					_ЕстьИстина = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если _ЕстьИстина = Истина Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		_ТекущийРодитель.Использование = пЗначение;
		
		ВсеРодительские(_ТекущийРодитель, пЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеДочерние(пТекущиеДанные, пЗначение)
	
	_ЭтоПервый = Истина;
	Для каждого _Элемент Из пТекущиеДанные.ПолучитьЭлементы() Цикл
		_Элемент.Использование = (НЕ _Элемент.Уровень = 4 ИЛИ _ЭтоПервый) И пЗначение;
		ВсеДочерние(_Элемент, пЗначение);
		_ЭтоПервый = Ложь;
	КонецЦикла;
	
КонецПроцедуры

//http://vetrf.ru/vetrf-forum/posts/list/645/8354.page#68610
//там написано, что сертифицирующий офишиал (это все наши три группы) производят сертификацию на основе чувства обоснованной уверенности
//в безопасности и соответствии сертифицируемого, основывающейся на том, что он лично знает или на данных из официальных источников.
//Таким образом, если вы оптовики, то вы имеете входящие сертификаты, т.е. документы с этими самыми официальными данными.
//К ним вы добавляете свое знание о товаре (хранился правильно, не загрязнен, не контаминирован), происходит от животных из такой-то местности
//(эти данные есть в цепочке сертификатов), вы, если сомневаетесь, проверяете статус своего региона и региона назначения в нашем сервисе.
//Если вы собрали достаточно данных об исполнении условий и имеете чувство обоснованной уверенности - сертифицируете.
//Если не имеете такого чувства, то не сертифицируете.
