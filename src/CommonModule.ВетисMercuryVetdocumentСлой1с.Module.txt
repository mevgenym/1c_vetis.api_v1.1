
Функция VetDocumentForm(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисVetDocumentForm") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU1") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERTCU1();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.LIC1") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_LIC1();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU2") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERTCU2();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.LIC2") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_LIC2();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU3") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERTCU3();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.LIC3") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_LIC3();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.NOTE4") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_NOTE4();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU5I") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERT5I();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU61") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERT61();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU62") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERT62();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU63") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_CERT63();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.PRODUCTIVE") Тогда
			Возврат ВетисКонстанты.VetDocumentForm_PRODUCTIVE();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.VetDocumentForm_CERTCU1() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU1");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_LIC1() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.LIC1");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERTCU2() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU2");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_LIC2() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.LIC2");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERTCU3() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU3");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_LIC3() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.LIC3");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_NOTE4() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.NOTE4");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERT5I() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU5I");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERT61() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU61");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERT62() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU62");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_CERT63() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.CERTCU63");
		ИначеЕсли value = ВетисКонстанты.VetDocumentForm_PRODUCTIVE() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentForm.PRODUCTIVE");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция VetDocumentStatus(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисVetDocumentStatus") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен") Тогда
			Возврат ВетисКонстанты.VetDocumentStatus_CONFIRMED();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Аннулирован") Тогда
			Возврат ВетисКонстанты.VetDocumentStatus_WITHDRAWN();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Погашен") Тогда
			Возврат ВетисКонстанты.VetDocumentStatus_UTILIZED();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.VetDocumentStatus_CONFIRMED() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен");
		ИначеЕсли value = ВетисКонстанты.VetDocumentStatus_WITHDRAWN() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Аннулирован");
		ИначеЕсли value = ВетисКонстанты.VetDocumentStatus_UTILIZED() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Погашен");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция VetDocumentType(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисVetDocumentType") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Входящий") Тогда
			Возврат ВетисКонстанты.VetDocumentType_INCOMING();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Исходящий") Тогда
			Возврат ВетисКонстанты.VetDocumentType_OUTGOING();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Производственный") Тогда
			Возврат ВетисКонстанты.VetDocumentType_PRODUCTIVE();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Возвратный") Тогда
			Возврат ВетисКонстанты.VetDocumentType_RETURNABLE();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Транспортный") Тогда
			Возврат ВетисКонстанты.VetDocumentType_TRANSPORT();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.VetDocumentType_INCOMING() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Входящий");
		ИначеЕсли value = ВетисКонстанты.VetDocumentType_OUTGOING() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Исходящий");
		ИначеЕсли value = ВетисКонстанты.VetDocumentType_PRODUCTIVE() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Производственный");
		ИначеЕсли value = ВетисКонстанты.VetDocumentType_RETURNABLE() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Возвратный");
		ИначеЕсли value = ВетисКонстанты.VetDocumentType_TRANSPORT() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Транспортный");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция VeterinaryEventType(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисVeterinaryEventType") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисVeterinaryEventType.НеОпределен") Тогда
			Возврат ВетисКонстанты.VeterinaryEventType_UND();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVeterinaryEventType.ЛабораторныеИсследования") Тогда
			Возврат ВетисКонстанты.VeterinaryEventType_LBR();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVeterinaryEventType.ВетеринарноСанитарнаяЭкспертиза") Тогда
			Возврат ВетисКонстанты.VeterinaryEventType_VSE();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVeterinaryEventType.ИммунизацияЖивогоЖивотного") Тогда
			Возврат ВетисКонстанты.VeterinaryEventType_IMM();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVeterinaryEventType.ОбработкаЖивогоЖивотного") Тогда
			Возврат ВетисКонстанты.VeterinaryEventType_MED();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисVeterinaryEventType.Карантин") Тогда
			Возврат ВетисКонстанты.VeterinaryEventType_QRT();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.VeterinaryEventType_UND() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVeterinaryEventType.НеОпределен");
		ИначеЕсли value = ВетисКонстанты.VeterinaryEventType_LBR() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVeterinaryEventType.ЛабораторныеИсследования");
		ИначеЕсли value = ВетисКонстанты.VeterinaryEventType_VSE() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVeterinaryEventType.ВетеринарноСанитарнаяЭкспертиза");
		ИначеЕсли value = ВетисКонстанты.VeterinaryEventType_IMM() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVeterinaryEventType.ИммунизацияЖивогоЖивотного");
		ИначеЕсли value = ВетисКонстанты.VeterinaryEventType_MED() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVeterinaryEventType.ОбработкаЖивогоЖивотного");
		ИначеЕсли value = ВетисКонстанты.VeterinaryEventType_QRT() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисVeterinaryEventType.Карантин");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция DeliveryInspectionResult(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисDeliveryInspectionResult") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисDeliveryInspectionResult.CORRESPONDS") Тогда
			Возврат ВетисКонстанты.DeliveryInspectionResult_CORRESPONDS();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDeliveryInspectionResult.MISMATCH") Тогда
			Возврат ВетисКонстанты.DeliveryInspectionResult_MISMATCH();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDeliveryInspectionResult.UNSUPERVISED") Тогда
			Возврат ВетисКонстанты.DeliveryInspectionResult_UNSUPERVISED();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.DeliveryInspectionResult_CORRESPONDS() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDeliveryInspectionResult.CORRESPONDS");
		ИначеЕсли value = ВетисКонстанты.DeliveryInspectionResult_MISMATCH() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDeliveryInspectionResult.MISMATCH");
		ИначеЕсли value = ВетисКонстанты.DeliveryInspectionResult_UNSUPERVISED() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDeliveryInspectionResult.UNSUPERVISED");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция DeliveryDecision(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисDeliveryDecision") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисDeliveryDecision.ACCEPT_ALL") Тогда
			Возврат ВетисКонстанты.DeliveryDecision_ACCEPT_ALL();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDeliveryDecision.PARTIALLY") Тогда
			Возврат ВетисКонстанты.DeliveryDecision_PARTIALLY();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисDeliveryDecision.RETURN_ALL") Тогда
			Возврат ВетисКонстанты.DeliveryDecision_RETURN_ALL();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.DeliveryDecision_ACCEPT_ALL() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDeliveryDecision.ACCEPT_ALL");
		ИначеЕсли value = ВетисКонстанты.DeliveryDecision_PARTIALLY() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDeliveryDecision.PARTIALLY");
		ИначеЕсли value = ВетисКонстанты.DeliveryDecision_RETURN_ALL() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисDeliveryDecision.RETURN_ALL");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция User(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ОбъектXDTO") Тогда
		_user = UserСтруктура(value);
		
		Если НЕ ЗначениеЗаполнено(_user.firstName) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	_Таблица.Ссылка
		|ИЗ
		|	Справочник.ВетисUser КАК _Таблица
		|ГДЕ
		|	ИСТИНА
		|	И _Таблица.firstName = &firstName
		|//m	И _Таблица.middleName = &middleName
		|//l	И _Таблица.lastName = &lastName");
		
		Запрос.УстановитьПараметр("firstName", _user.firstName);
		Запрос.УстановитьПараметр("middleName", _user.middleName);
		Запрос.УстановитьПараметр("lastName", _user.lastName);
		
		Если ЗначениеЗаполнено(_user.middleName) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//m", "");
			Если ЗначениеЗаполнено(_user.lastName) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "//l", "");
			КонецЕсли;
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			_ВетисUser = Справочники.ВетисUser.СоздатьЭлемент();
			_ВетисUser.Заполнить(value);
			Попытка
				_ВетисUser.Записать();
				Возврат _ВетисUser.Ссылка;
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке());
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция UserСтруктура(value) Экспорт
	
	_ответ = Новый Структура;
	
	Попытка
		_fio = СокрЛП(value.fio);
		_pos = Найти(_fio, " ");
		_ответ.Вставить("firstName", Лев(_fio, _pos-1));
		_fio = СокрЛ(Сред(_fio, _pos+1));
		_pos = Найти(_fio, " ");
		_ответ.Вставить("middleName", Лев(_fio, _pos-1));
		_ответ.Вставить("lastName", Сред(_fio, _pos+1));
	Исключение
		_ответ.Вставить("firstName", value.firstName);
		_ответ.Вставить("middleName", value.middleName);
		_ответ.Вставить("lastName", value.lastName);
	КонецПопытки;
	
	_ответ.Вставить("phone", value.phone);
	_ответ.Вставить("post", value.post);
	_ответ.Вставить("email", value.email);
	_ответ.Вставить("login", value.login);
	
	Возврат _ответ;
	
КонецФункции

Функция UserAuthority(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисUserAuthority") Тогда
		Если      value = ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_ACCESS_WEB_READ") Тогда
			Возврат ВетисКонстанты.UserAuthority_MERCURY_ACCESS_WEB_READ();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_ACCESS_WEB_WRITE") Тогда
			Возврат ВетисКонстанты.UserAuthority_MERCURY_ACCESS_WEB_WRITE();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.ARGUS_HS_AUTHORIZED_APPLICANT") Тогда
			Возврат ВетисКонстанты.UserAuthority_ARGUS_HS_AUTHORIZED_APPLICANT();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_ACCESS_API_READ") Тогда
			Возврат ВетисКонстанты.UserAuthority_MERCURY_ACCESS_API_READ();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_CONTROL_WORKING_AREA") Тогда
			Возврат ВетисКонстанты.UserAuthority_MERCURY_CONTROL_WORKING_AREA();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_ACCESS_API_WRITE") Тогда
			Возврат ВетисКонстанты.UserAuthority_MERCURY_ACCESS_API_WRITE();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_CERTIFICATE_ACCEPTANCE") Тогда
			Возврат ВетисКонстанты.UserAuthority_MERCURY_CERTIFICATE_ACCEPTANCE();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_AUTHORIZED_CERTIFICATE_ACCEPTANCE") Тогда
			Возврат ВетисКонстанты.UserAuthority_MERCURY_AUTHORIZED_CERTIFICATE_ACCEPTANCE();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_AUTHORIZED_RETURNED_CERTIFICATE_CREATION") Тогда
			Возврат ВетисКонстанты.UserAuthority_MERCURY_AUTHORIZED_RETURNED_CERTIFICATE_CREATION();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_HS_FISH_CERTIFICATE") Тогда
			Возврат ВетисКонстанты.UserAuthority_MERCURY_HS_FISH_CERTIFICATE();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_PRODUCTION_BATCH_CERTIFICATE") Тогда
			Возврат ВетисКонстанты.UserAuthority_MERCURY_PRODUCTION_BATCH_CERTIFICATE();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_HS_FRESH_MILK_CERTIFICATE") Тогда
			Возврат ВетисКонстанты.UserAuthority_MERCURY_HS_FRESH_MILK_CERTIFICATE();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_HS_AUTHORIZED_APPLICANT") Тогда
			Возврат ВетисКонстанты.UserAuthority_MERCURY_HS_AUTHORIZED_APPLICANT();
		ИначеЕсли value = ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_RETURNED_CERTIFICATE_CREATION") Тогда
			Возврат ВетисКонстанты.UserAuthority_MERCURY_RETURNED_CERTIFICATE_CREATION();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если      value = ВетисКонстанты.UserAuthority_MERCURY_ACCESS_WEB_READ() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_ACCESS_WEB_READ");
		ИначеЕсли value = ВетисКонстанты.UserAuthority_MERCURY_ACCESS_WEB_WRITE() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_ACCESS_WEB_WRITE");
		ИначеЕсли value = ВетисКонстанты.UserAuthority_ARGUS_HS_AUTHORIZED_APPLICANT() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.ARGUS_HS_AUTHORIZED_APPLICANT");
		ИначеЕсли value = ВетисКонстанты.UserAuthority_MERCURY_ACCESS_API_READ() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_ACCESS_API_READ");
		ИначеЕсли value = ВетисКонстанты.UserAuthority_MERCURY_CONTROL_WORKING_AREA() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_CONTROL_WORKING_AREA");
		ИначеЕсли value = ВетисКонстанты.UserAuthority_MERCURY_ACCESS_API_WRITE() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_ACCESS_API_WRITE");
		ИначеЕсли value = ВетисКонстанты.UserAuthority_MERCURY_CERTIFICATE_ACCEPTANCE() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_CERTIFICATE_ACCEPTANCE");
		ИначеЕсли value = ВетисКонстанты.UserAuthority_MERCURY_AUTHORIZED_CERTIFICATE_ACCEPTANCE() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_AUTHORIZED_CERTIFICATE_ACCEPTANCE");
		ИначеЕсли value = ВетисКонстанты.UserAuthority_MERCURY_AUTHORIZED_RETURNED_CERTIFICATE_CREATION() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_AUTHORIZED_RETURNED_CERTIFICATE_CREATION");
		ИначеЕсли value = ВетисКонстанты.UserAuthority_MERCURY_HS_FISH_CERTIFICATE() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_HS_FISH_CERTIFICATE");
		ИначеЕсли value = ВетисКонстанты.UserAuthority_MERCURY_PRODUCTION_BATCH_CERTIFICATE() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_PRODUCTION_BATCH_CERTIFICATE");
		ИначеЕсли value = ВетисКонстанты.UserAuthority_MERCURY_HS_FRESH_MILK_CERTIFICATE() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_HS_FRESH_MILK_CERTIFICATE");
		ИначеЕсли value = ВетисКонстанты.UserAuthority_MERCURY_HS_AUTHORIZED_APPLICANT() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_HS_AUTHORIZED_APPLICANT");
		ИначеЕсли value = ВетисКонстанты.UserAuthority_MERCURY_RETURNED_CERTIFICATE_CREATION() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВетисUserAuthority.MERCURY_RETURNED_CERTIFICATE_CREATION");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


Функция TransportInfo(пТипТранспорта, пНомер = Неопределено, пНомерПрицепа = Неопределено, пНомерКонтейнера = Неопределено) Экспорт
	
	Возврат ВетисMercuryVetdocument_2_0.TransportInfo(
				ВетисDictionaryСлой1с.TransportType(пТипТранспорта),
				TransportNumber(пТипТранспорта, пНомер, пНомерПрицепа, пНомерКонтейнера)
				);
	
КонецФункции

Функция TransportNumber(value, пНомер = Неопределено, пНомерПрицепа = Неопределено, пНомерКонтейнера = Неопределено, пТипТранспорта = Неопределено) Экспорт
	
	Если ТипЗнч(value) = Тип("ОбъектXDTO") Тогда
		
		_ТипТранспорта = ВетисDictionaryСлой1с.TransportType(value.transportType);
		
		Если НЕ value.transportNumber = Неопределено Тогда
			Если _ТипТранспорта = Перечисления.ВетисTransportType.Автомобильный Тогда
				пНомер = value.transportNumber.vehicleNumber;
				пНомерПрицепа = value.transportNumber.trailerNumber;
				пНомерКонтейнера = value.transportNumber.containerNumber;
			ИначеЕсли _ТипТранспорта = Перечисления.ВетисTransportType.Железнодорожный Тогда
				пНомер = value.transportNumber.wagonNumber;
			ИначеЕсли _ТипТранспорта = Перечисления.ВетисTransportType.Авиатранспорт Тогда
				пНомер = value.transportNumber.flightNumber;
			ИначеЕсли _ТипТранспорта = Перечисления.ВетисTransportType.МорскойКонтейнер Тогда
				пНомер = value.transportNumber.shipName;
			ИначеЕсли _ТипТранспорта = Перечисления.ВетисTransportType.МорскойТрюм Тогда
				пНомер = value.transportNumber.shipName;
			КонецЕсли;
		КонецЕсли;
		
		пТипТранспорта = _ТипТранспорта;
		
		Возврат пНомер;//возвращаем и в параметрах и в значении
		
	ИначеЕсли ТипЗнч(value) = Тип("ПеречислениеСсылка.ВетисTransportType") Тогда
		
		_Объект = ВетисMercuryVetdocument_2_0.TransportNumber();
		
		Если value = Перечисления.ВетисTransportType.Автомобильный Тогда
			ВетисОбщегоНазначения.УстановитьЗначение(_Объект, пНомер, "vehicleNumber");
			ВетисОбщегоНазначения.УстановитьЗначение(_Объект, пНомерПрицепа, "trailerNumber");
			ВетисОбщегоНазначения.УстановитьЗначение(_Объект, пНомерКонтейнера, "containerNumber");
		ИначеЕсли value = Перечисления.ВетисTransportType.Железнодорожный Тогда
			ВетисОбщегоНазначения.УстановитьЗначение(_Объект, пНомер, "wagonNumber");
		ИначеЕсли value = Перечисления.ВетисTransportType.Авиатранспорт Тогда
			ВетисОбщегоНазначения.УстановитьЗначение(_Объект, пНомер, "flightNumber");
		ИначеЕсли value = Перечисления.ВетисTransportType.МорскойКонтейнер Тогда
			ВетисОбщегоНазначения.УстановитьЗначение(_Объект, пНомер, "shipName");
		ИначеЕсли value = Перечисления.ВетисTransportType.МорскойТрюм Тогда
			ВетисОбщегоНазначения.УстановитьЗначение(_Объект, пНомер, "shipName");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция VetDocument(value) Экспорт
	
	Если ТипЗнч(value) = Тип("ДокументСсылка.ВетисВетеринарноСопроводительныйДокумент") Тогда
		Возврат value.uuid;
	Иначе
		Возврат Ветис.Соответствие_ПолучитьСсылку(value, "Документ.ВетисВетеринарноСопроводительныйДокумент");
	КонецЕсли;
	
КонецФункции

Функция VetDocumentКонвертировать(value1, value2) Экспорт
	
	Если ТипЗнч(value1) = Тип("ДокументОбъект.ВетисВетеринарноСопроводительныйДокумент")
		ИЛИ ТипЗнч(value1) = Тип("ДанныеФормыСтруктура")
		ИЛИ ТипЗнч(value1) = Тип("Структура") Тогда
		
		_док = value1;
		_всд = value2;
		
		_док.ПометкаУдаления = Ложь;
		
		_док.uuid = _всд.uuid;
		
		_док.СерияВСД = _всд.issueSeries;
		_док.НомерВСД = _всд.issueNumber;
		_док.ДатаВСД  = _всд.issueDate;
		_док.ТипВСД   = VetDocumentType(_всд.type);
		_док.Статус   = VetDocumentStatus(_всд.status);
		_док.Форма    = VetDocumentForm(_всд.form);
		
		//_док.ДатаВСД  = ?(_док.Статус = Перечисления.ВетисVetDocumentStatus.Оформлен, _всд.lastUpdateDate, _всд.issueDate);
		
		Если НЕ _всд.consignor = Неопределено Тогда
			_док.Отправитель = ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.consignor.businessEntity);
			_док.ОтправительПредприятие = ВетисCerberusEnterpriseСлой1с.Enterprise(_всд.consignor.enterprise);
		КонецЕсли;
		
		Если НЕ _всд.consignee = Неопределено Тогда
			_док.Получатель  = ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.consignee.businessEntity);
			_док.ПолучательПредприятие  = ВетисCerberusEnterpriseСлой1с.Enterprise(_всд.consignee.enterprise);
		КонецЕсли;
		
		_строкаВСД = ?(_док.РезультатыОсмотра.Количество() = 0, _док.РезультатыОсмотра.Добавить(), _док.РезультатыОсмотра[0]);
		
		_строкаВСД.БлагополучиеМестности  = _всд.locationProsperity;
		_строкаВСД.Ветсанэкспертиза14     = _всд.cargoExpertized;
		//_строкаВСД.ГосударственныйВетврач = _всд.confirmedBy.fio;
		//_строкаВСД.ГосударственныйВетврачДата = ?(_всд.confirmedDate = Неопределено, _строкаВСД.ГосударственныйВетврачДата, Ветис.ВремяМестное(_всд.confirmedDate));// xs:dateTime
		_строкаВСД.Иммунизация14          = ?(_всд.immunizationInfo = Неопределено, _строкаВСД.Иммунизация14, _всд.immunizationInfo);
		//_строкаВСД.КарантированиеДней     = ?(_всд.quarantineDays = Неопределено, _строкаВСД.КарантированиеДней, _всд.quarantineDays);
		//_строкаВСД.КарантированиеМесто    = ?(_всд.quarantinePlace = Неопределено, _строкаВСД.КарантированиеДней, _всд.quarantinePlace);
		_строкаВСД.КонтрольГосВетврачем   = ?(_всд.cargoInspected = Неопределено, _строкаВСД.КонтрольГосВетврачем, _всд.cargoInspected);
		_строкаВСД.ЛабораторныеИсследования14 = _всд.expertiseInfo;
		_строкаВСД.НазначениеГруза        = ВетисArgusCommonСлой1с.Purpose(_всд.purpose);
		_строкаВСД.ОсобыеОтметки          = _всд.specialMarks;
		//_строкаВСД.ПредыдущиеВСД          = ?(_всд.precedingVetDocuments = Неопределено, _строкаВСД.ПредыдущиеВСД, _всд.precedingVetDocuments);
		
		_строкаТТН = ?(_док.ТТН.Количество() = 0, _док.ТТН.Добавить(), _док.ТТН[0]);
		
		_строкаТТН.Серия          = _всд.waybillSeries;
		_строкаТТН.Номер          = _всд.waybillNumber;
		_строкаТТН.Дата           = _всд.waybillDate;
		_строкаТТН.Тип            = ВетисArgusShipmentСлой1с.WaybillType(_всд.waybillType);
		_строкаТТН.Посредник      = ?(_всд.broker = Неопределено, _строкаТТН.Посредник, ВетисCerberusEnterpriseСлой1с.BusinessEntity(_всд.broker));
		_строкаТТН.СпособХранения = ВетисArgusShipmentСлой1с.TransportationStorageType(_всд.transportStorageType);
		_СтрокаТТН.НомерТранспорта = ВетисArgusShipmentСлой1с.TransportNumber(_всд.transportInfo, _СтрокаТТН.НомерТранспорта, _СтрокаТТН.НомерПрицепа, _СтрокаТТН.НомерКонтейнера, _СтрокаТТН.ТипТранспорта);
		
		_строкаСЖ = ?(_док.Товары.Количество() = 0, _док.Товары.Добавить(), _док.Товары[0]);
		
		_batch = BatchКонвертировать(_всд.batch);
		
		Для каждого _строка Из _batch.Товары Цикл
			ЗаполнитьЗначенияСвойств(_СтрокаСЖ, _строка);
		КонецЦикла;
		
		_док.Упаковка.Очистить();
		Для каждого _строка Из _batch.Упаковка Цикл
			ЗаполнитьЗначенияСвойств(_док.Упаковка.Добавить(), _строка);
		КонецЦикла;
		
		_док.Маркировка.Очистить();
		Для каждого _строка Из _batch.Маркировка Цикл
			ЗаполнитьЗначенияСвойств(_док.Маркировка.Добавить(), _строка);
		КонецЦикла;
		
		_док.Производители.Очистить();
		Для каждого _строка Из _batch.Производители Цикл
			ЗаполнитьЗначенияСвойств(_док.Производители.Добавить(), _строка);
		КонецЦикла;
		
		_док.ИДПартии.Очистить();
		Для каждого _строка Из _batch.ИДПартии Цикл
			ЗаполнитьЗначенияСвойств(_док.ИДПартии.Добавить(), _строка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(value2) = Тип("ДокументОбъект.ВетисВетеринарноСопроводительныйДокумент")
		ИЛИ ТипЗнч(value2) = Тип("ДанныеФормыСтруктура")
		ИЛИ ТипЗнч(value2) = Тип("Структура") Тогда
		
		_всд = value1;
		_док = value2;
		
		_СтрокаВСД = _док.РезультатыОсмотра[0];
		_СтрокаСЖ  = _док.Товары[0];
		_СтрокаТТН = _док.ТТН[0];
		
		_consignorBusinessEntity = ВетисCerberusEnterpriseСлой1с.BusinessEntity(_док.Отправитель);
		_consignorEnterprise     = ВетисCerberusEnterpriseСлой1с.Enterprise(_док.ОтправительПредприятие);
		
		_consigneeBusinessEntity = ВетисCerberusEnterpriseСлой1с.BusinessEntity(_док.Получатель);
		_consigneeEnterprise     = ВетисCerberusEnterpriseСлой1с.Enterprise(_док.ПолучательПредприятие);
		
		_всд.issueSeries        = _док.СерияВСД;
		_всд.issueNumber        = _док.НомерВСД;
		_всд.issueDate          = _док.ДатаВСД;
		
		_всд.form               = VetDocumentForm(_док.Форма);
		//_всд.type               = VetDocumentType(_док.Тип);
		_всд.consignor          = ВетисCerberusEnterprise.BusinessMember(_consignorBusinessEntity, _consignorEnterprise);
		_всд.consignee          = ВетисCerberusEnterprise.BusinessMember(_consigneeBusinessEntity, _consigneeEnterprise);
		_всд.broker             = ВетисCerberusEnterprise.BusinessEntity(ВетисCerberusEnterpriseСлой1с.BusinessEntity(_СтрокаТТН.Посредник));
		_всд.transportInfo      = ВетисArgusShipmentСлой1с.TransportInfo(_СтрокаТТН.ТипТранспорта, _СтрокаТТН.НомерТранспорта, _СтрокаТТН.НомерПрицепа, _СтрокаТТН.НомерКонтейнера);
		_всд.transportStorageType = ВетисArgusShipmentСлой1с.TransportationStorageType(_СтрокаТТН.СпособХранения);
		
		_всд.cargoInspected     = _СтрокаВСД.КонтрольГосВетврачем;
		_всд.cargoExpertized    = _СтрокаВСД.Ветсанэкспертиза14;
		_всд.expertiseInfo      = _СтрокаВСД.ЛабораторныеИсследования14;
		_всд.purpose            = ВетисArgusCommon.Purpose(ВетисArgusCommonСлой1с.Purpose(_СтрокаВСД.НазначениеГруза));
		//Указываются только для бумажных ветеринарных сертификатов.
		//_всд.confirmedBy        = Ветис.Врач();
		_всд.confirmedDate      = Ветис.ВремяСервиса(_док.ДатаВСД);// xs:dateTime
		_всд.locationProsperity = _СтрокаВСД.БлагополучиеМестности;
		//_всд.quarantinePlace    = _СтрокаВСД.КарантированиеМесто;
		//_всд.quarantineDays     = _СтрокаВСД.КарантированиеДней;
		_всд.immunizationInfo   = _СтрокаВСД.Иммунизация14;
		//_всд.precedingVetDocuments = _СтрокаВСД.ПредыдущиеВСД;
		//_всд.importPermit       = ВетисArgusCommon.Document(всдРазрешениеНаВвозНазвание, всдРазрешениеНаВвозСерия, всдРазрешениеНаВвозНомер, всдРазрешениеНаВвозДата);
		//_всд.transferPermit     = ВетисArgusCommon.Document(всдРазрешениеНаВывозНазвание, всдРазрешениеНаВывозСерия, всдРазрешениеНаВывозНомер, всдРазрешениеНаВывозДата);
		_всд.specialMarks       = _СтрокаВСД.ОсобыеОтметки;
		
		_пар = Новый Структура("Товары,Упаковка,Маркировка,Производители,ИДПартии",Новый Массив,Новый Массив,Новый Массив,_всд.Производители,_всд.ИДПартии);
		
		_пар.Товары.Добавить(_СтрокаСЖ);
		
		Для каждого _СтрокаУпаковка Из _док.Упаковка Цикл
			Если _СтрокаУпаковка.КлючСвязи = _СтрокаСЖ.КлючСтроки Тогда
				_пар.Упаковка.Добавить(_СтрокаУпаковка);
				Для каждого _СтрокаМаркировка Из _док.Маркировка Цикл
					Если _СтрокаМаркировка.КлючСвязи = _СтрокаУпаковка.КлючСтроки Тогда
						_пар.Маркировка.Добавить(_СтрокаМаркировка);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		_всд.batch = BatchКонвертировать(_пар);
		
	КонецЕсли;
	
КонецФункции

Функция VetDocumentКонвертировать_20(value1, value2) Экспорт
	
	Если ТипЗнч(value1) = Тип("ДокументОбъект.ВетисВетеринарноСопроводительныйДокумент")
		ИЛИ ТипЗнч(value1) = Тип("ДанныеФормыСтруктура")
		ИЛИ ТипЗнч(value1) = Тип("Структура") Тогда
		_док = value1;
		_всд = value2;
		
		_док.statusChange.Очистить();
		Если НЕ _всд.statusChange = Неопределено Тогда
			Для каждого _statusChange Из _всд.statusChange Цикл
				_строка = _док.statusChange.Добавить();
				_строка.status         = VetDocumentStatus(_statusChange.status);
				_строка.specifiedPerson = User(_statusChange.specifiedPerson);
				_строка.post           = ?(_statusChange.specifiedPerson = Неопределено, "", _statusChange.specifiedPerson.post);
				_строка.fio            = Строка(_строка.specifiedPerson);
				_строка.actualDateTime = Ветис.ВремяМестное(_statusChange.actualDateTime);
				_строка.reason         = _statusChange.reason;
				//_док.ОтветственныйВетис = _строка.specifiedPerson;
			КонецЦикла;
		КонецЕсли;
		
		_док.ПометкаУдаления = Ложь;
		
		_док.uuid = _всд.uuid;
		
		_док.СерияВСД = _всд.issueSeries;
		_док.НомерВСД = _всд.issueNumber;
		_док.ДатаВСД  = _всд.issueDate;
		_док.ТипВСД   = VetDocumentType(_всд.vetDType);
		_док.Статус   = VetDocumentStatus(_всд.vetDStatus);
		_док.Форма    = VetDocumentForm(_всд.vetDForm);
		
		_док.Дата     = ?(ЗначениеЗаполнено(_всд.issueDate), _всд.issueDate, _всд.lastUpdateDate);
		
		Если НЕ _всд.certifiedConsignment = Неопределено Тогда
			Если НЕ _всд.certifiedConsignment.consignor = Неопределено Тогда
				_док.Отправитель = ВетисDictionaryСлой1с.BusinessEntity(_всд.certifiedConsignment.consignor.businessEntity);
				_док.ОтправительПредприятие = ВетисDictionaryСлой1с.Enterprise(_всд.certifiedConsignment.consignor.enterprise);
			КонецЕсли;
			Если НЕ _всд.certifiedConsignment.consignee = Неопределено Тогда
				_док.Получатель = ВетисDictionaryСлой1с.BusinessEntity(_всд.certifiedConsignment.consignee.businessEntity);
				_док.ПолучательПредприятие = ВетисDictionaryСлой1с.Enterprise(_всд.certifiedConsignment.consignee.enterprise);
			КонецЕсли;
		КонецЕсли;
		
		_СтрокаВСД = ?(_док.РезультатыОсмотра.Количество() = 0, _док.РезультатыОсмотра.Добавить(), _док.РезультатыОсмотра[0]);
		_СтрокаВСД.НазначениеГруза        = ВетисDictionaryСлой1с.Purpose(_всд.authentication.purpose);
		_СтрокаВСД.КонтрольГосВетврачем   = _всд.authentication.cargoInspected;
		_СтрокаВСД.Ветсанэкспертиза       = ВетисDictionaryСлой1с.ResearchResult(_всд.authentication.cargoExpertized);
		_СтрокаВСД.БлагополучиеМестности  = _всд.authentication.locationProsperity;
		_СтрокаВСД.ОсобыеОтметки          = _всд.authentication.specialMarks;
		
		_док.Иммунизация.Очистить();
		Для каждого _immunization Из _всд.authentication.immunization Цикл
			_Строка = _док.Иммунизация.Добавить();
			//_Строка.Заболевание  = ВетисDictionaryСлой1с.AnimalDisease(_immunization.disease);
			_Строка.Заболевание  = ?(_immunization.disease = Неопределено, "", _immunization.disease.name);
			_Строка.Вакцина      = ?(ЗначениеЗаполнено(_immunization.medicinalDrug.ID), _immunization.medicinalDrug.ID, _immunization.medicinalDrug.name);
			_Строка.СрокДействия = _immunization.effectiveBeforeDate;
		КонецЦикла;
		
		_док.ЛабораторныеИсследования.Очистить();
		Для каждого _laboratoryResearch Из _всд.authentication.laboratoryResearch Цикл
			_ИДПартии = "";
			Для каждого _batchID Из _laboratoryResearch.batchID Цикл
				_ИДПартии = _ИДПартии + ?(_ИДПартии = "", "", "; ") + _batchID;
			КонецЦикла;
			_Строка = _док.ЛабораторныеИсследования.Добавить();
			_Строка.ИДПартии               = _ИДПартии;
			_Строка.НомерЭкспертизы        = _laboratoryResearch.expertiseID;
			_Строка.ПоказательБезопасности = ?(_laboratoryResearch.indicator = Неопределено, "", _laboratoryResearch.indicator.name);
			//_Строка.Заболевание            = ВетисDictionaryСлой1с.AnimalDisease(_laboratoryResearch.disease);
			_Строка.Заболевание            = ?(_laboratoryResearch.disease = Неопределено, "", _laboratoryResearch.disease.name);
			_Строка.МетодИсследования      = ?(_laboratoryResearch.method = Неопределено, "", _laboratoryResearch.method.name);
			_Строка.РезультатИсследования  = ВетисDictionaryСлой1с.ResearchResult(_laboratoryResearch.result);
			_Строка.Заключение             = _laboratoryResearch.conclusion;
		КонецЦикла;
		
		Если НЕ _всд.certifiedConsignment = Неопределено Тогда
			_СтрокаТТН = ?(_док.ТТН.Количество() = 0, _док.ТТН.Добавить(), _док.ТТН[0]);
			_СтрокаТТН.Посредник      = ВетисDictionaryСлой1с.BusinessEntity(_всд.certifiedConsignment.broker);
			_СтрокаТТН.СпособХранения = ВетисDictionaryСлой1с.TransportationStorageType(_всд.certifiedConsignment.transportStorageType);
			_СтрокаТТН.НомерТранспорта = TransportNumber(_всд.certifiedConsignment.transportInfo, , _СтрокаТТН.НомерПрицепа, _СтрокаТТН.НомерКонтейнера, _СтрокаТТН.ТипТранспорта);
		КонецЕсли;
		
		_док.МаршрутСледования.Очистить();
		Если НЕ _всд.certifiedConsignment = Неопределено Тогда
			Если НЕ _всд.certifiedConsignment.shipmentRoute = Неопределено Тогда
				Для каждого _point Из _всд.certifiedConsignment.shipmentRoute.routePoint Цикл
					_Строка = _док.МаршрутСледования.Добавить();
					_Строка.ПунктПерегрузки = ?(_point.location = Неопределено, "", _point.location.name);
					_Строка.Предприятие     = ВетисDictionaryСлой1с.Enterprise(_point.enterprise);
					_Строка.ЕстьПерегрузка  = _point.transshipment;
					_Строка.НомерТранспорта = TransportNumber(_point.nextTransport,, _Строка.НомерПрицепа, _СтрокаТТН.НомерКонтейнера, _Строка.ТипТранспорта);
					Если НЕ _point.location = Неопределено И НЕ _point.location.address = Неопределено Тогда
						_Строка.Адрес           = _point.location.address.addressView;
						_Строка.Страна          = ВетисDictionaryСлой1с.Country(_point.location.address.country);
						_Строка.Регион          = ВетисDictionaryСлой1с.Region(_point.location.address.region);
						_Строка.Район           = ВетисDictionaryСлой1с.Region(_point.location.address.district);
						_Строка.НаселенныйПункт = ВетисDictionaryСлой1с.Locality(_point.location.address.locality);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		_док.СвязанныеДокументы.Очистить();
		Если НЕ _всд.referencedDocument = Неопределено Тогда
			Для каждого _document Из _всд.referencedDocument Цикл
				_Строка = _док.СвязанныеДокументы.Добавить();
				_Строка.Серия = _document.issueSeries;
				_Строка.Номер = _document.issueNumber;
				_Строка.Дата = _document.issueDate;
				_Строка.Тип = ВетисDictionaryСлой1с.DocumentType(_document.type);
				_Строка.ТипОтношения = ВетисDictionaryСлой1с.ReferenceType(_document.relationshipType);
				
				Если _Строка.ТипОтношения = Перечисления.ВетисReferenceType.ComplementaryDocument 
					И (_Строка.Тип = Перечисления.ВетисDocumentType.ТовароТранспортнаяНакладная
					ИЛИ _Строка.Тип = Перечисления.ВетисDocumentType.ТранспортнаяНакладная) Тогда
					_СтрокаТТН.Серия = _Строка.Серия;
					_СтрокаТТН.Номер = _Строка.Номер;
					_СтрокаТТН.Дата = _Строка.Дата;
					_СтрокаТТН.Тип = _Строка.Тип;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ _всд.certifiedConsignment = Неопределено Тогда
			_СтрокаСЖ = ?(_док.Товары.Количество() = 0, _док.Товары.Добавить(), _док.Товары[0]);
			
			_batch = BatchКонвертировать_20(_всд.certifiedConsignment.batch);
			
			Для каждого _строка Из _batch.Товары Цикл
				ЗаполнитьЗначенияСвойств(_СтрокаСЖ, _строка);
			КонецЦикла;
			
			_док.Упаковка.Очистить();
			Для каждого _строка Из _batch.Упаковка Цикл
				ЗаполнитьЗначенияСвойств(_док.Упаковка.Добавить(), _строка);
			КонецЦикла;
			
			_док.Маркировка.Очистить();
			Для каждого _строка Из _batch.Маркировка Цикл
				ЗаполнитьЗначенияСвойств(_док.Маркировка.Добавить(), _строка);
			КонецЦикла;
			
			_док.Производители.Очистить();
			Для каждого _строка Из _batch.Производители Цикл
				ЗаполнитьЗначенияСвойств(_док.Производители.Добавить(), _строка);
			КонецЦикла;
			
			_док.ИДПартии.Очистить();
			Для каждого _строка Из _batch.ИДПартии Цикл
				ЗаполнитьЗначенияСвойств(_док.ИДПартии.Добавить(), _строка);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(value2) = Тип("ДокументОбъект.ВетисВетеринарноСопроводительныйДокумент")
		ИЛИ ТипЗнч(value2) = Тип("ДанныеФормыСтруктура")
		ИЛИ ТипЗнч(value2) = Тип("Структура") Тогда
		
		_всд = value1;
		_док = value2;
		
		_СтрокаВСД = _док.РезультатыОсмотра[0];
		_СтрокаСЖ  = _док.Товары[0];
		_СтрокаТТН = _док.ТТН[0];
		
		_consignorBusinessEntity = ВетисDictionaryСлой1с.BusinessEntity(_док.Отправитель);
		_consignorEnterprise     = ВетисDictionaryСлой1с.Enterprise(_док.ОтправительПредприятие);
		
		_consigneeBusinessEntity = ВетисDictionaryСлой1с.BusinessEntity(_док.Получатель);
		_consigneeEnterprise     = ВетисDictionaryСлой1с.Enterprise(_док.ПолучательПредприятие);
		
		_пар = Новый Структура("Товары,Упаковка,Маркировка,Производители,ИДПартии",Новый Массив,Новый Массив,Новый Массив,_док.Производители,_док.ИДПартии);
		
		_пар.Товары.Добавить(_СтрокаСЖ);
		
		Для каждого _СтрокаУпаковка Из _док.Упаковка Цикл
			Если _СтрокаУпаковка.КлючСвязи = _СтрокаСЖ.КлючСтроки Тогда
				_пар.Упаковка.Добавить(_СтрокаУпаковка);
				Для каждого _СтрокаМаркировка Из _док.Маркировка Цикл
					Если _СтрокаМаркировка.КлючСвязи = _СтрокаУпаковка.КлючСтроки Тогда
						_пар.Маркировка.Добавить(_СтрокаМаркировка);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		_batch = BatchКонвертировать_20(_пар);
		
		_всд.issueSeries          = _док.СерияВСД;
		_всд.issueNumber          = _док.НомерВСД;
		_всд.issueDate            = _док.ДатаВСД;
		_всд.vetDForm             = VetDocumentForm(_док.Форма);
		
		_ShipmentRoute = Неопределено;
		_brocker = Неопределено;
		_TransportInfo = Неопределено;
		_TransportationStorageType = Неопределено;
		Если НЕ _consignorEnterprise = _consigneeEnterprise Тогда
			_Номер = 0;
			_ShipmentRoute = Новый Массив;
			Для каждого _Строка Из _док.МаршрутСледования Цикл
				_Номер = _Номер + 1;
				_ShipmentRoute.Добавить(ВетисMercuryVetdocument_2_0.ShipmentRoutePoint(
					_Номер,
					ВетисDictionary_2_0.Location(_Строка.ПунктПерегрузки,
						ВетисDictionary_2_0.Address(_Строка.Адрес,
							ВетисDictionaryСлой1с.Country(_Строка.Страна),
							ВетисDictionaryСлой1с.Region(_Строка.Регион),
							ВетисDictionaryСлой1с.District(_Строка.Район),
							ВетисDictionaryСлой1с.Locality(_Строка.НаселенныйПункт))),
					ВетисDictionaryСлой1с.Enterprise(_Строка.Предприятие),
					_Строка.ЕстьПерегрузка,
					TransportInfo(_Строка.ТипТранспорта, _Строка.НомерТранспорта, _Строка.НомерПрицепа, _Строка.НомерКонтейнера)
				));
			КонецЦикла;
			_brocker = ВетисDictionary_2_0.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_СтрокаТТН.Посредник));
			_TransportInfo = TransportInfo(_СтрокаТТН.ТипТранспорта, _СтрокаТТН.НомерТранспорта, _СтрокаТТН.НомерПрицепа, _СтрокаТТН.НомерКонтейнера);
			_TransportationStorageType = ВетисDictionaryСлой1с.TransportationStorageType(_СтрокаТТН.СпособХранения);
		КонецЕсли;
		
		_всд.certifiedConsignment = ВетисMercuryVetdocument_2_0.CertifiedConsignment(
			ВетисDictionary_2_0.BusinessMember(_consignorBusinessEntity, _consignorEnterprise),
			ВетисDictionary_2_0.BusinessMember(_consigneeBusinessEntity, _consigneeEnterprise),
			_batch,
			_brocker,
			_TransportInfo,
			_TransportationStorageType,
			_ShipmentRoute
			);
		
		_всд.authentication = ВетисMercuryVetdocument_2_0.VeterinaryAuthentication(
			ВетисDictionary_2_0.Purpose(ВетисDictionaryСлой1с.Purpose(_СтрокаВСД.НазначениеГруза)),
			_СтрокаВСД.КонтрольГосВетврачем,
			ВетисDictionaryСлой1с.ResearchResult(_СтрокаВСД.Ветсанэкспертиза),
			_СтрокаВСД.БлагополучиеМестности,
			_СтрокаВСД.ОсобыеОтметки
			);
		
		Для каждого _Строка Из _док.statusChange Цикл
			_всд.statusChange.Добавить(ВетисMercuryVetdocument_2_0.VetDocumentStatusChange(
				ВетисMercuryVetdocumentСлой1с.VetDocumentStatus(_Строка.status),
				ВетисMercuryVetdocument_2_0.User(, _Строка.fio, _Строка.post),
				));
		КонецЦикла;
		
		//APLM0007 - Wrong application data format. Format validation failed due to XML Schema rules:  Элемент 'referencedDocument' не предусмотрен.
		Для каждого _Строка Из _док.СвязанныеДокументы Цикл
			_всд.referencedDocument.Добавить(ВетисMercuryVetdocument_2_0.ReferencedDocument(
				ВетисDictionaryСлой1с.ReferenceType(_Строка.ТипОтношения),
				_Строка.Серия, _Строка.Номер, _Строка.Дата,
				ВетисDictionaryСлой1с.DocumentType(_Строка.Тип)
				));
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция BatchКонвертировать(пЗначение, пОбъект = Неопределено) Экспорт
	
	Если ТипЗнч(пЗначение) = Тип("ОбъектXDTO") Тогда
		
		_batch = пЗначение;
		
		_строкаСЖКлючСтроки = 1;
		
		_строкаСЖ = Новый Структура;
		
		_строкаСЖ.Вставить("КлючСтроки", _строкаСЖКлючСтроки);
		
		_строкаСЖ.Вставить("ProductType", ВетисArgusProductionСлой1с.ProductType(_batch.productType));
		_строкаСЖ.Вставить("Product", ВетисArgusProductionСлой1с.Product(_batch.Product));
		_строкаСЖ.Вставить("SubProduct", ВетисArgusProductionСлой1с.SubProduct(_batch.subProduct));
		_строкаСЖ.Вставить("productItem", ВетисArgusProductionСлой1с.ProductItem(_batch.productItem));
		_строкаСЖ.Вставить("ProductItemName", _batch.productItem.name);
		
		_строкаСЖ.Вставить("Количество", _batch.volume);
		_строкаСЖ.Вставить("ЕдиницаИзмерения", ВетисArgusCommonСлой1с.Unit(_batch.unit));
		_строкаСЖ.Вставить("Скоропортящаяся", _batch.perishable);
		_строкаСЖ.Вставить("Собственник", ВетисCerberusEnterpriseСлой1с.BusinessEntity(_batch.owner));
		_строкаСЖ.Вставить("НекачественныйГруз", _batch.lowGradeCargo);
		
		Если НЕ _batch.dateOfProduction = Неопределено Тогда
			Если ПустаяСтрока(_batch.dateOfProduction.informalDate) Тогда
				_строкаСЖ.Вставить("ДатаВыработкиНачало", ВетисBase.ComplexDate(_batch.dateOfProduction.firstDate, Истина));
				_строкаСЖ.Вставить("ДатаВыработкиКонец", ВетисBase.ComplexDate(_batch.dateOfProduction.secondDate, Истина));
			Иначе
				_строкаСЖ.Вставить("ДатаВыработкиСтрокой", _batch.dateOfProduction.informalDate);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ _batch.expiryDate = Неопределено Тогда
			Если ПустаяСтрока(_batch.expiryDate.informalDate) Тогда
				_строкаСЖ.Вставить("СрокГодностиНачало", ВетисBase.ComplexDate(_batch.expiryDate.firstDate, Истина));
				_строкаСЖ.Вставить("СрокГодностиКонец", ВетисBase.ComplexDate(_batch.expiryDate.secondDate, Истина));
			Иначе
				_строкаСЖ.Вставить("СрокГодностиСтрокой", _batch.expiryDate.informalDate);
			КонецЕсли;
		КонецЕсли;
		
		_строкаСЖ.Вставить("СтранаПроисхождения", ВетисIkarСлой1с.Country(_batch.countryOfOrigin));
		_строкаСЖ.Вставить("УдалитьПроизводительПредприятие", ВетисCerberusEnterpriseСлой1с.Producer(_batch.producerList));
		_строкаСЖ.Вставить("ProductItem",         ВетисArgusProductionСлой1с.ProductItem(_batch.productItem));
		
		//с искажениями адаптировано под метаданные 2.0
		_Упаковка = Новый Массив;
		_Маркировка = Новый Массив;
		
		Если НЕ _batch.packingList = Неопределено Тогда
			_СтрокаУпаковкаКлючСтроки = 1;
			Для каждого _packingForm Из _batch.packingList.packingForm Цикл
				_СтрокаУпаковка = Новый Структура;
				_СтрокаУпаковка.Вставить("КлючСвязи", _строкаСЖ.КлючСтроки);
				_СтрокаУпаковка.Вставить("КлючСтроки", _СтрокаУпаковкаКлючСтроки);
				_СтрокаУпаковка.Вставить("Уровень", Перечисления.ВетисPackageLevelType.Транспортный);
				_СтрокаУпаковка.Вставить("Упаковка", ВетисArgusCommonСлой1с.PackingForm(_packingForm));
				_СтрокаУпаковка.Вставить("Количество", _batch.packingAmount);
				_Упаковка.Добавить(_СтрокаУпаковка);
				Если НЕ _batch.productMarkingList = Неопределено Тогда
					Для каждого _productMarks Из _batch.productMarkingList.productMarking Цикл
						_СтрокаМаркировка = Новый Структура;
						_СтрокаМаркировка.Вставить("КлючСвязи", _СтрокаУпаковка.КлючСтроки);
						_СтрокаМаркировка.Вставить("Маркировка", _productMarks.__content);
						_СтрокаМаркировка.Вставить("КлассМаркировки", ВетисDictionaryСлой1с.ProductMarkingClass(_productMarks.class));//здесь подойдет из 2.0
						_Маркировка.Добавить(_СтрокаМаркировка);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		_Производители = Новый Массив;
		Если НЕ _batch.producerList = Неопределено Тогда
			Для каждого _producer Из _batch.producerList.producer Цикл
				_ПроизводителиСтрока = Новый Структура;
				_ПроизводителиСтрока.Вставить("КлючСвязи", _строкаСЖ.КлючСтроки);
				_ПроизводителиСтрока.Вставить("Предприятие", ВетисCerberusEnterpriseСлой1с.Enterprise(_producer.enterprise));
				_ПроизводителиСтрока.Вставить("Роль", ВетисDictionaryСлой1с.EnterpriseRole(_producer.role));//здесь подойдет из 2.0
				_Производители.Добавить(_ПроизводителиСтрока);
			КонецЦикла;
		КонецЕсли;
		
		_Товары = Новый Массив;
		_Товары.Добавить(_строкаСЖ);
		
		_всд = Новый Структура;
		_всд.Вставить("Товары", _Товары);
		_всд.Вставить("Упаковка", _Упаковка);
		_всд.Вставить("Маркировка", _Маркировка);
		_всд.Вставить("Производители", _Производители);
		_всд.Вставить("ИДПартии", Новый Массив);
		
		Возврат _всд;
		
	Иначе
		
		Если пОбъект = Неопределено Тогда
			_batch = ВетисMercuryVetdocument.Batch();
		Иначе
			_batch = пОбъект;
		КонецЕсли;
		
		_СтрокаСЖ = пЗначение.Товары[0];
		
		_batch.productType = ВетисArgusProductionСлой1с.ProductType(_СтрокаСЖ.productType);
		_batch.product     = ВетисArgusProduction.Product(ВетисArgusProductionСлой1с.Product(_СтрокаСЖ.product));
		_batch.subProduct  = ВетисArgusProduction.SubProduct(ВетисArgusProductionСлой1с.SubProduct(_СтрокаСЖ.SubProduct));
		_batch.productItem = ВетисArgusProduction.ProductItem(ВетисArgusProductionСлой1с.ProductItem(_СтрокаСЖ.ProductItem), ?(_строкаСЖ.ProductItemName="", Неопределено, _строкаСЖ.ProductItemName));
		
		//Если ЗначениеЗаполнено(_productItem.guid) ИЛИ ЗначениеЗаполнено(_productItem.name) Тогда
		//	//MERC13098 - Наименование продукции в ветеринарно-сопроводительном документе обязательно для заполнения.
		//КонецЕсли;
		
		_batch.volume           = _СтрокаСЖ.Количество;
		_batch.unit             = ВетисArgusCommon.Unit(ВетисArgusCommonСлой1с.Unit(_СтрокаСЖ.ЕдиницаИзмерения));
		_batch.perishable       = _СтрокаСЖ.Скоропортящаяся;
		_batch.lowGradeCargo    = _СтрокаСЖ.НекачественныйГруз;
		_batch.owner            = ВетисCerberusEnterprise.BusinessEntity(ВетисCerberusEnterpriseСлой1с.BusinessEntity(_строкаСЖ.Собственник));
		
		_День = Макс(День(_СтрокаСЖ.СрокГодностиНачало), День(_СтрокаСЖ.СрокГодностиКонец), День(_СтрокаСЖ.ДатаВыработкиНачало), День(_СтрокаСЖ.ДатаВыработкиКонец));
		_Час = Макс(Час(_СтрокаСЖ.СрокГодностиНачало), Час(_СтрокаСЖ.СрокГодностиКонец), Час(_СтрокаСЖ.ДатаВыработкиНачало), Час(_СтрокаСЖ.ДатаВыработкиКонец));
		_Мин = Макс(Минута(_СтрокаСЖ.СрокГодностиНачало), Минута(_СтрокаСЖ.СрокГодностиКонец), Минута(_СтрокаСЖ.ДатаВыработкиНачало), Минута(_СтрокаСЖ.ДатаВыработкиКонец));
		
		//Для скоропортящейся продукции обязательны к указанию год/месяц/день и могут быть указаны час/минута.
		//Для не скоропортящейся продукции обязательны к указанию год/месяц и может быть указан день.
		//Для не скоропортящейся продукции дата выработки и дата окончания срока годности должны быть заданы в одном формате
		//(например, если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
		Если ЗначениеЗаполнено(_СтрокаСЖ.ДатаВыработкиСтрокой) Тогда
			_batch.dateOfProduction = ВетисMercuryVetdocument.GoodsDate(_СтрокаСЖ.ДатаВыработкиСтрокой);
		Иначе
			_batch.dateOfProduction = ВетисMercuryVetdocument.GoodsDate(_СтрокаСЖ.ДатаВыработкиНачало, _СтрокаСЖ.ДатаВыработкиКонец, _День > 1 ИЛИ _Час > 0 ИЛИ _Мин > 0, _День > 1 ИЛИ _Час > 1 ИЛИ _Мин > 0, _Мин > 0);
		КонецЕсли;
		
		//Не указывается для типа продукции "Живые животные"
		//Для скоропортящейся продукции обязательны к указанию год/месяц/день и могут быть указаны час/минута.
		//Для не скоропортящейся продукции обязательны к указанию год/месяц и может быть указан день.
		//Для не скоропортящейся продукции дата выработки и дата окончания срока годности должны быть заданы в одном формате
		//(например, если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
		Если ЗначениеЗаполнено(_СтрокаСЖ.СрокГодностиСтрокой) Тогда
			_batch.expiryDate = ВетисMercuryVetdocument.GoodsDate(_СтрокаСЖ.СрокГодностиСтрокой);
		Иначе
			_batch.expiryDate = ВетисMercuryVetdocument.GoodsDate(_СтрокаСЖ.СрокГодностиНачало, _СтрокаСЖ.СрокГодностиКонец, _День > 1 ИЛИ _Час > 0 ИЛИ _Мин > 0, _День > 1 ИЛИ _Час > 1 ИЛИ _Мин > 0, _Мин > 0);
		КонецЕсли;
		
		//_batch.productItem      = ВетисArgusProduction.ProductItem(_productItem.guid, _productItem.name);
		//_batch.packingList      = ВетисArgusCommon.PackingFormList(ВетисArgusCommonСлой1с.PackingForm(_СтрокаСЖ.Упаковка));
		//_batch.packingAmount    = _СтрокаСЖ.КоличествоМест;
		_batch.countryOfOrigin  = ВетисIkar.Country(ВетисIkarСлой1с.Country(_СтрокаСЖ.СтранаПроисхождения));
		//_batch.producerList     = ВетисCerberusEnterprise.ProducerList(ВетисCerberusEnterpriseСлой1с.Enterprise(_СтрокаСЖ.УдалитьПроизводительПредприятие));
		//_batch.productMarkingList = ВетисMercuryVetdocument.ProductMarkingList(_СтрокаСЖ.Маркировка);
		
		_packageList = Новый Массив;
		_СтрокиУпаковка = пЗначение.Упаковка;
		Для каждого _СтрокаУпаковка Из _СтрокиУпаковка Цикл
			_packageList.Добавить(ВетисArgusCommon.PackingForm(ВетисArgusCommonСлой1с.PackingForm(_СтрокаУпаковка.Упаковка)));
			_batch.packingAmount = _СтрокаУпаковка.Количество;
			Прервать;
		КонецЦикла;
		
		_batch.packingList = ВетисArgusCommon.PackingFormList(_packageList);
		
		//_productMarkingList = Новый Массив;
		//_СтрокиМаркировка = пЗначение.Маркировка;
		//Для каждого _СтрокаМаркировка Из _СтрокиМаркировка Цикл
		//	_productMarkingList.Добавить(_СтрокаМаркировка.Маркировка);
		//КонецЦикла;
		
		Для каждого _Строка Из пЗначение.Производители Цикл
			_batch.producerList = ВетисCerberusEnterprise.ProducerList(ВетисCerberusEnterpriseСлой1с.Enterprise(_Строка.Предприятие));
			Прервать;
		КонецЦикла;
		
		Возврат _batch;
		
	КонецЕсли;
	
КонецФункции

Функция BatchКонвертировать_20(пЗначение, пОбъект = Неопределено) Экспорт
	
	Если ТипЗнч(пЗначение) = Тип("ОбъектXDTO") Тогда
		
		_batch = пЗначение;
		
		_строкаСЖКлючСтроки = 1;
		
		_строкаСЖ = Новый Структура;
		
		_строкаСЖ.Вставить("КлючСтроки", _строкаСЖКлючСтроки);
		
		_строкаСЖ.Вставить("ProductType", ВетисDictionaryСлой1с.ProductType(_batch.productType));
		_строкаСЖ.Вставить("Product", ВетисDictionaryСлой1с.Product(_batch.Product));
		_строкаСЖ.Вставить("SubProduct", ВетисDictionaryСлой1с.SubProduct(_batch.subProduct));
		_строкаСЖ.Вставить("productItem", ВетисDictionaryСлой1с.ProductItem(_batch.productItem));
		_строкаСЖ.Вставить("ProductItemName", _batch.productItem.name);
		_строкаСЖ.Вставить("ProductItemUuid", _batch.productItem.uuid);
		
		_строкаСЖ.Вставить("Количество", _batch.volume);
		_строкаСЖ.Вставить("ЕдиницаИзмерения", ВетисDictionaryСлой1с.Unit(_batch.unit));
		_строкаСЖ.Вставить("Скоропортящаяся", _batch.perishable);
		_строкаСЖ.Вставить("Собственник", ВетисDictionaryСлой1с.BusinessEntity(_batch.owner));
		_строкаСЖ.Вставить("НекачественныйГруз", _batch.lowGradeCargo);
		
		Если НЕ _batch.dateOfProduction = Неопределено Тогда
			Если ПустаяСтрока(_batch.dateOfProduction.informalDate) Тогда
				_строкаСЖ.Вставить("ДатаВыработкиНачало", ВетисDictionary_2_0.ComplexDate(_batch.dateOfProduction.firstDate, Истина));
				_строкаСЖ.Вставить("ДатаВыработкиКонец", ВетисDictionary_2_0.ComplexDate(_batch.dateOfProduction.secondDate, Истина));
			Иначе
				_строкаСЖ.Вставить("ДатаВыработкиСтрокой", _batch.dateOfProduction.informalDate);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ _batch.expiryDate = Неопределено Тогда
			Если ПустаяСтрока(_batch.expiryDate.informalDate) Тогда
				_строкаСЖ.Вставить("СрокГодностиНачало", ВетисDictionary_2_0.ComplexDate(_batch.expiryDate.firstDate, Истина));
				_строкаСЖ.Вставить("СрокГодностиКонец", ВетисDictionary_2_0.ComplexDate(_batch.expiryDate.secondDate, Истина));
			Иначе
				_строкаСЖ.Вставить("СрокГодностиСтрокой", _batch.expiryDate.informalDate);
			КонецЕсли;
		КонецЕсли;
		
		_Упаковка = Новый Массив;
		_Маркировка = Новый Массив;
		
		Если НЕ _batch.packageList = Неопределено Тогда
			_СтрокаУпаковкаКлючСтроки = 1;
			Для каждого _package Из _batch.packageList.package Цикл
				_СтрокаУпаковка = Новый Структура;
				_СтрокаУпаковка.Вставить("КлючСвязи", _строкаСЖ.КлючСтроки);
				_СтрокаУпаковка.Вставить("КлючСтроки", _СтрокаУпаковкаКлючСтроки);
				_СтрокаУпаковка.Вставить("Уровень", ВетисDictionaryСлой1с.PackageLevelType(_package.level));
				_СтрокаУпаковка.Вставить("Упаковка", ВетисDictionaryСлой1с.PackingType(_package.packingType));
				_СтрокаУпаковка.Вставить("Количество", _package.quantity);
				_Упаковка.Добавить(_СтрокаУпаковка);
				Для каждого _productMarks Из _package.productMarks Цикл
					Если ЗначениеЗаполнено(_productMarks.__content) Тогда
						_СтрокаМаркировка = Новый Структура;
						_СтрокаМаркировка.Вставить("КлючСвязи", _СтрокаУпаковка.КлючСтроки);
						_СтрокаМаркировка.Вставить("Маркировка", _productMarks.__content);
						_СтрокаМаркировка.Вставить("КлассМаркировки", ВетисDictionaryСлой1с.ProductMarkingClass(_productMarks.class));
						_Маркировка.Добавить(_СтрокаМаркировка);
					КонецЕсли;
				КонецЦикла;
				_СтрокаУпаковкаКлючСтроки = _СтрокаУпаковкаКлючСтроки + 1;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ _batch.origin = Неопределено Тогда
			_строкаСЖ.Вставить("СтранаПроисхождения", ВетисDictionaryСлой1с.Country(_batch.origin.country));
			_Производители = Новый Массив;
			Для каждого _producer Из _batch.origin.producer Цикл
				_ПроизводителиСтрока = Новый Структура;
				_ПроизводителиСтрока.Вставить("КлючСвязи", _строкаСЖ.КлючСтроки);
				_ПроизводителиСтрока.Вставить("Предприятие", ВетисDictionaryСлой1с.Enterprise(_producer.enterprise));
				_ПроизводителиСтрока.Вставить("Наименование", _producer.enterprise.name);
				_ПроизводителиСтрока.Вставить("Роль", ВетисDictionaryСлой1с.EnterpriseRole(_producer.role));
				//Если ЗначениеЗаполнено(_ПроизводителиСтрока.Предприятие) Тогда
					_Производители.Добавить(_ПроизводителиСтрока);
				//КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		_ИДПартии = Новый Массив;
		Для каждого _batchID Из _batch.batchID Цикл
			_ИДПартии.Добавить(Новый Структура("КлючСвязи,batchID", _строкаСЖ.КлючСтроки, _batchID));
		КонецЦикла;
		
		_Товары = Новый Массив;
		_Товары.Добавить(_строкаСЖ);
		
		_всд = Новый Структура;
		_всд.Вставить("Товары", _Товары);
		_всд.Вставить("Упаковка", _Упаковка);
		_всд.Вставить("Маркировка", _Маркировка);
		_всд.Вставить("Производители", _Производители);
		_всд.Вставить("ИДПартии", _ИДПартии);
		
		Возврат _всд;
		
	Иначе
		
		Если пОбъект = Неопределено Тогда
			_batch = ВетисMercuryVetdocument_2_0.Batch();
		Иначе
			_batch = пОбъект;
		КонецЕсли;
		
		_СтрокаСЖ = пЗначение.Товары[0];
		
		_batch.productType = ВетисDictionaryСлой1с.ProductType(_СтрокаСЖ.productType);
		_batch.product     = ВетисDictionary_2_0.Product(ВетисDictionaryСлой1с.Product(_СтрокаСЖ.product));
		_batch.subProduct  = ВетисDictionary_2_0.SubProduct(ВетисDictionaryСлой1с.SubProduct(_СтрокаСЖ.SubProduct));
		//_batch.productItem = ВетисDictionary_2_0.ProductItem(ВетисDictionaryСлой1с.ProductItem(_СтрокаСЖ.ProductItem), ?(_строкаСЖ.ProductItemName="", Неопределено, _строкаСЖ.ProductItemName));
		Если НЕ ПустаяСтрока(_строкаСЖ.ProductItemUuid) Тогда
			_batch.productItem = ВетисDictionary_2_0.ProductItem();
			_batch.productItem.uuid = _строкаСЖ.ProductItemUuid;
		ИначеЕсли ЗначениеЗаполнено(_строкаСЖ.ProductItem) Тогда
			_batch.productItem = ВетисDictionary_2_0.ProductItem(ВетисDictionaryСлой1с.ProductItem(_СтрокаСЖ.ProductItem));
		ИначеЕсли НЕ ПустаяСтрока(_строкаСЖ.ProductItemName) Тогда
			_batch.productItem = ВетисDictionary_2_0.ProductItem(, _строкаСЖ.ProductItemName);
		Иначе
			//
		КонецЕсли;
		
		////если нет всего блока то:
		////MERC13139 - Наименование продукции в ветеринарно-сопроводительном документе обязательно для заполнения
		//Если ЗначениеЗаполнено(_productItem.guid) ИЛИ ЗначениеЗаполнено(_productItem.name) Тогда
		//	//MERC13098 - Наименование продукции в ветеринарно-сопроводительном документе обязательно для заполнения.
		//КонецЕсли;
		
		_batch.volume           = _СтрокаСЖ.Количество;
		
		_batch.unit = ВетисDictionary_2_0.Unit(ВетисDictionaryСлой1с.Unit(_СтрокаСЖ.ЕдиницаИзмерения));
		
		_День = Макс(День(_СтрокаСЖ.СрокГодностиНачало), День(_СтрокаСЖ.СрокГодностиКонец), День(_СтрокаСЖ.ДатаВыработкиНачало), День(_СтрокаСЖ.ДатаВыработкиКонец));
		_Час = Макс(Час(_СтрокаСЖ.СрокГодностиНачало), Час(_СтрокаСЖ.СрокГодностиКонец), Час(_СтрокаСЖ.ДатаВыработкиНачало), Час(_СтрокаСЖ.ДатаВыработкиКонец));
		_Мин = Макс(Минута(_СтрокаСЖ.СрокГодностиНачало), Минута(_СтрокаСЖ.СрокГодностиКонец), Минута(_СтрокаСЖ.ДатаВыработкиНачало), Минута(_СтрокаСЖ.ДатаВыработкиКонец));
		
		//Для скоропортящейся продукции обязательны к указанию год/месяц/день и могут быть указаны час/минута.
		//Для не скоропортящейся продукции обязательны к указанию год/месяц и может быть указан день.
		//Для не скоропортящейся продукции дата выработки и дата окончания срока годности должны быть заданы в одном формате
		//(например, если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
		Если ЗначениеЗаполнено(_СтрокаСЖ.ДатаВыработкиСтрокой) Тогда
			_batch.dateOfProduction = ВетисMercuryVetdocument_2_0.GoodsDate(_СтрокаСЖ.ДатаВыработкиСтрокой);
		Иначе
			_batch.dateOfProduction = ВетисMercuryVetdocument_2_0.GoodsDate(_СтрокаСЖ.ДатаВыработкиНачало, _СтрокаСЖ.ДатаВыработкиКонец, _День > 1 ИЛИ _Час > 0 ИЛИ _Мин > 0, _День > 1 ИЛИ _Час > 1 ИЛИ _Мин > 0, _Мин > 0);
		КонецЕсли;
		
		//Не указывается для типа продукции "Живые животные"
		//Для скоропортящейся продукции обязательны к указанию год/месяц/день и могут быть указаны час/минута.
		//Для не скоропортящейся продукции обязательны к указанию год/месяц и может быть указан день.
		//Для не скоропортящейся продукции дата выработки и дата окончания срока годности должны быть заданы в одном формате
		//(например, если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
		Если ЗначениеЗаполнено(_СтрокаСЖ.СрокГодностиСтрокой) Тогда
			_batch.expiryDate = ВетисMercuryVetdocument_2_0.GoodsDate(_СтрокаСЖ.СрокГодностиСтрокой);
		Иначе
			_batch.expiryDate = ВетисMercuryVetdocument_2_0.GoodsDate(_СтрокаСЖ.СрокГодностиНачало, _СтрокаСЖ.СрокГодностиКонец, _День > 1 ИЛИ _Час > 0 ИЛИ _Мин > 0, _День > 1 ИЛИ _Час > 1 ИЛИ _Мин > 0, _Мин > 0);
		КонецЕсли;
		
		_batch.perishable       = _СтрокаСЖ.Скоропортящаяся;
		_batch.lowGradeCargo    = _СтрокаСЖ.НекачественныйГруз;
		_batch.owner            = ВетисDictionary_2_0.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(_строкаСЖ.Собственник));
		
		_producerList = Новый Массив;
		Для каждого _Строка Из пЗначение.Производители Цикл
			Если ЗначениеЗаполнено(_Строка.Предприятие) Тогда
				_producer = ВетисDictionary_2_0.Producer(ВетисDictionaryСлой1с.Enterprise(_Строка.Предприятие), ВетисDictionaryСлой1с.EnterpriseRole(_Строка.Роль));
				_producerList.Добавить(_producer);
			ИначеЕсли ЗначениеЗаполнено(_Строка.Наименование) Тогда
				_producer = ВетисDictionary_2_0.Producer(, ВетисDictionaryСлой1с.EnterpriseRole(_Строка.Роль));
				_producer.enterprise.name = _Строка.Наименование;
				_producerList.Добавить(_producer);
			Иначе
				//_Enterprise = ВетисDictionaryСлой1с.Enterprise();
				//Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		//Если ЗначениеЗаполнено(_СтрокаСЖ.ProductItem) Тогда
		//	_productItem = ВетисDictionary_2_0.ProductItem(ВетисDictionaryСлой1с.ProductItem(_СтрокаСЖ.ProductItem));
		//Иначе
		//	_productItem = ВетисDictionary_2_0.ProductItem(, _строкаСЖ.ProductItemName);
		//КонецЕсли;
		Если _строкаСЖ.ProductItemName="" Тогда
			_productItem = ВетисDictionary_2_0.ProductItem(ВетисDictionaryСлой1с.ProductItem(_СтрокаСЖ.ProductItem));
		Иначе
			_productItem = ВетисDictionary_2_0.ProductItem(, _строкаСЖ.ProductItemName);
		КонецЕсли;
		
		//MERC13265 - В ветеринарно-сопроводительном документе должен быть указан хотя бы один производитель продукции.
		//MERC13219 - Страна происхождения продукции в ветеринарно-сопроводительном документе обязательна для заполнения.
		_batch.origin = ВетисMercuryVetdocument_2_0.BatchOrigin(
			_productItem,
			ВетисDictionary_2_0.Country(ВетисDictionaryСлой1с.Country(_СтрокаСЖ.СтранаПроисхождения)),
			_producerList
			);
		
		//MERC14245 - Так как маркировка в сведениях о принимаемой партии не совпадает с указанной в ветеринарно-сопроводительном документе, то необходимо указать причину в акте о несоответствии.
		_packageList = Новый Массив;
		Для каждого _СтрокаУпаковка Из пЗначение.Упаковка Цикл
			
			_productMarks = Новый Массив;
			Для каждого _СтрокаМаркировка Из пЗначение.Маркировка Цикл
				Если _СтрокаМаркировка.КлючСвязи = _СтрокаУпаковка.КлючСтроки Тогда
					_productMarks.Добавить(ВетисDictionary_2_0.ProductMarks(_СтрокаМаркировка.Маркировка, ВетисDictionaryСлой1с.ProductMarkingClass(_СтрокаМаркировка.КлассМаркировки)));
				КонецЕсли;
			КонецЦикла;
			
			_packageList.Добавить(ВетисDictionary_2_0.Package(
				ВетисDictionaryСлой1с.PackageLevelType(_СтрокаУпаковка.Уровень),
				ВетисDictionary_2_0.PackingType(ВетисDictionaryСлой1с.PackingType(_СтрокаУпаковка.Упаковка)),
				_СтрокаУпаковка.Количество,
				_productMarks
				));
			
		КонецЦикла;
		
		_batch.packageList = ВетисDictionary_2_0.PackageList(_packageList);
		
		Для каждого _Строка Из пЗначение.ИДПартии Цикл
			_batch.batchID.Добавить(_Строка.batchID);
		КонецЦикла;
		
		Возврат _batch;
	КонецЕсли;
	
КонецФункции
