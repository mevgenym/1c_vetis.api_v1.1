
//Тип, описывающий сведения о проведенной обработке/иммунизации животных.
//Параметры:
// disease - Заболевание. dt:AnimalDisease
// medicinalDrug - Препарат/вакцина. dt:MedicinalDrug
// effectiveBeforeDate - Срок действия препарата/вакцины. Указывается дата и время окончания срока действия. xs:dateTime
Функция AnimalMedicationEvent(disease = Неопределено, medicinalDrug = Неопределено, effectiveBeforeDate = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.AnimalMedicationEvent(disease, medicinalDrug, effectiveBeforeDate);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.AnimalMedicationEvent(disease, medicinalDrug, effectiveBeforeDate);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Тип, описывающий партию груза.
Функция Batch(value = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.Batch(value);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.Batch(value);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryVetdocument_1_4.Batch();
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Тип, описывающий cведения о происхождении партии продукции.
//Параметры:
// productItem - dt:ProductItem - Оригинальное наименование продукции (данное производителем)
// country - 	dt:Country - Страна происхождения продукции
// producer - dt:Producer - Сведения о производителях продукции
Функция BatchOrigin(productItem = Неопределено, country = Неопределено, producer = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.BatchOrigin(productItem, country, producer);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.BatchOrigin(productItem, country, producer);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Операция изменения связи между хозяйствующим субъектом и предприятиями. 
//Параметры:
// type - Тип операции (CREATE, DELETE) bs:RegisterModificationType 1
// businessEntityGuid - Хозяйствующий субъект, к которому прикрепляется предприятие (поднадзорный объект) Строка 1
// enterpriseGuid - Строка 1..*
Функция BusinessEntityActivityLocationsModificationOperation(type, businessEntityGuid, enterpriseGuid) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.BusinessEntityActivityLocationsModificationOperation(type, businessEntityGuid, enterpriseGuid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.BusinessEntityActivityLocationsModificationOperation(type, businessEntityGuid, enterpriseGuid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисCerberusEnterprise_1_4.BusinessEntityActivityLocationsModificationOperation(type, businessEntityGuid, enterpriseGuid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Операция внесения изменений в реестр ХС
//Параметры:
// type - Тип операции (CREATE, FIND_OR_CREATE, UPDATE) bs:RegisterModificationType
// affectedList - Входящий список ХС dt:BusinessEntity
// resultingList - Список, который содержит сведения о добавляемых хозяйствующих субъектах.
//                 На данный момент поддерживается добавление только одного субъекта в рамках одной заявки. dt:BusinessEntity
// reason - Основание добавления записи в реестр xs:String
Функция BusinessEntityModificationOperation(registerModificationType, affectedList = Неопределено, resultingList = Неопределено, reason = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.BusinessEntityModificationOperation(registerModificationType, affectedList, resultingList, reason);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.BusinessEntityModificationOperation(registerModificationType, affectedList, resultingList, reason);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисCerberusEnterprise_1_4.BusinessEntityModificationOperation(registerModificationType, affectedList, resultingList, reason);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Тип, описывающий cертифицированную производственную партию продукции.
//Параметры:
// producer - dt:BusinessMember - Сведения о производителе продукции. Заполняется только для производственного вет.сертификата.
// batch - vd:Batch - Сведения о партии продукции.
Функция CertifiedBatch(batch, producer = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.CertifiedBatch(batch, producer);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.CertifiedBatch(batch, producer);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Тип, описывающий сертифицированную транспортную партию.
//Параметры:
// consignor - dt:BusinessMember - Сведения об отправителе (владельце). Заполняется только для транспортного вет.сертификата.
// consignee - dt:BusinessMember - Сведения о получателе груза. Заполняется только для транспортного вет.сертификата.
// batch - vd:Batch - Сведения о партии продукции.
// broker - dt:BusinessEntity - Сведения о фирме-посреднике (перевозчике).
// transportInfo - vd:TransportInfo - Сведения о транспорте.
// transportStorageType - dt:TransportationStorageType - Способ хранения при перевозке.
// shipmentRoute - vd:ShipmentRoute - Сведения о маршруте следования (пунктах перегрузки).
Функция CertifiedConsignment(consignor, consignee, batch, broker, transportInfo, transportStorageType, shipmentRoute = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.CertifiedConsignment(consignor, consignee, batch, broker, transportInfo, transportStorageType, shipmentRoute);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.CertifiedConsignment(consignor, consignee, batch, broker, transportInfo, transportStorageType, shipmentRoute);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Тип, описывающий транспортную партию груза.
Функция Consignment(value = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.Consignment(value);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.Consignment(value);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryVetdocument_1_4.Consignment();
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Тип, описывающий контроль поставки (документарный, ветеринарный).
Функция ConsignmentDocumentList(waybill, VetDocument, relatedDocument = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.ConsignmentDocumentList(waybill, VetDocument, relatedDocument);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.ConsignmentDocumentList(waybill, VetDocument, relatedDocument);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryVetdocument_1_4.ConsignmentDocumentList(waybill, VetDocument);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Тип, описывающий поставку.
// Параметры:
//  consignor - ent:BusinessMember - Сведения об отправителе.
//  consignee - ent:BusinessMember - Сведения о получателе.
//  consignment - vetd:Consignment - Фактические сведения о входящей партии или группе животных.
//  accompanyingForms - vetd:ConsignmentDocumentList - Сопроводительные документы.
Функция Delivery(consignor, consignee, consignment, accompanyingForms, broker = Неопределено, transportInfo = Неопределено, transportStorageType = Неопределено, shipmentRoute = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.Delivery(consignor, consignee, consignment, accompanyingForms, broker, transportInfo, transportStorageType, shipmentRoute);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.Delivery(consignor, consignee, consignment, accompanyingForms, broker, transportInfo, transportStorageType, shipmentRoute);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryVetdocument_1_4.Delivery(consignor, consignee, consignment, accompanyingForms);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Обобщенные сведения о результате приема партии продукции.
// Параметры:
//  presence - argc:DocumentNature - Природа ВСД (электронный или бумажный)
//  docInspection - vetd:DeliveryInspection - Соответствуют ли сведения о партии, указанной в ВСД, фактическим
//  vetInspection - vetd:DeliveryInspection - Осуществлен ли контроль груза гос.ветврачом на соответствие требованиям.
//  decision - vetd:DeliveryDecision - Принятое решение о приёме входной партии.
Функция DeliveryFactList(presence, docInspection, vetInspection, decision) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.DeliveryFactList(presence, docInspection, vetInspection, decision);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.DeliveryFactList(presence, docInspection, vetInspection, decision);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryVetdocument_1_4.DeliveryFactList(presence, docInspection, vetInspection, decision);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Тип, описывающий контроль поставки (документарный, ветеринарный).
// Параметры:
// 	result - vetd:DeliveryInspectionResult - Результат контроля.
//  responsible - argc:User - Ответственный за контроль.
Функция DeliveryInspection(result, responsible = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.DeliveryInspection(result, responsible);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.DeliveryInspection(result, responsible);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryVetdocument_1_4.DeliveryInspection(result, responsible);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Тип, описывающий причину несоответствия в акте.
//Параметры:
// name - Название причины. - bs:String255
Функция DiscrepancyReason(name) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.DiscrepancyReason(name);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.DiscrepancyReason(name);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryVetdocument_1_4.DiscrepancyReason(name);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Тип, описывающий сведения об акте несоответствия.
//Параметры:
// issueSeries - Серия документа. bs:String255
// issueNumber - Номер документа. bs:String255
// issueDate - Дата документа. xs:date
// reason - Причина несоответствия. xs:string
// description - Детальное описание. xs:string
Функция DiscrepancyReport(issueSeries = Неопределено, issueNumber = Неопределено, issueDate = Неопределено, reason = Неопределено, description = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.DiscrepancyReport(issueSeries, issueNumber, issueDate, reason, description);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.DiscrepancyReport(issueSeries, issueNumber, issueDate, reason, description);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryVetdocument_1_4.DiscrepancyReport(issueSeries, issueNumber, issueDate, reason, description);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Тип, описывающий документ
//Параметры:
// issueSeries - Серия документа. bs:String255 0..1
// issueNumber - Номер документа. bs:String255 0..1
// issueDate - Дата документа. xs:date 0..1
// type - Тип документа. dt:DocumentType
Функция Document(issueSeries = Неопределено, issueNumber = Неопределено, issueDate = Неопределено, type = Неопределено, issuer = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.Document(issueSeries, issueNumber, issueDate, type, issuer);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.Document(issueSeries, issueNumber, issueDate, type, issuer);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Операция внесения изменений в реестр ХС
//Параметры:
// type - bs:RegisterModificationType - Тип операции (CREATE, UPDATE)
// enterprise - dt:Enterprise - сведения о добавляемых поднадзорных объектах.
//                 На данный момент поддерживается добавление только одной площадки в рамках одной заявки.
// reason - xs:String - Основание добавления записи в реестр
Функция EnterpriseModificationOperation(type, enterprise = Неопределено, reason = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.EnterpriseModificationOperation(type, enterprise, reason);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.EnterpriseModificationOperation(type, enterprise, reason);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Тип, описывающий дату производства, либо дату окончания срока годности продукции.
// Может указываться единичной датой, интервалом, либо строкой.
Функция GoodsDate(firstDate, secondDate = Неопределено, Day = Ложь, Hour = Ложь, Minute = Ложь) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.GoodsDate(firstDate, secondDate, Day, Hour, Minute);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.GoodsDate(firstDate, secondDate, Day, Hour, Minute);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryVetdocument_1_4.GoodsDate(firstDate, secondDate, Day);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Создает объект, который содержит сведения об объединяемых складских записях журнала продукции
//Параметры:
// sourceStockEntry - Массив - vetd:StockEntry - Позиции в складском журнале системы Меркурий, не менее двух.
//                    Указанные позиции будут объединены в одну. Представляют собой идентификатор версии записи (uuid) в ИС Меркурий.
//	Указанная версия записи складского журнала продукции в ИС Меркурий должна быть актуальной, неаннулированной и неудалённой.
//	Объединяемые записи журнала должны быть в статусе "создана" или "отправлена".
//	Объединяемые записи журнала должны быть в журнале входной продукции, для вырабатываемой продукции функция объединения отсутствует.
//	Хозяйствующий субъект - владелец продукции в объединяемых записях должен совпадать.
//	Объединяемые записи журнала продукции должны относится к одному типу продукции (первый уровень справочника продукции).
//	Объединяемые записи журнала продукции должны относится к одной продукции (второй уровень справочника продукции).
//	В объединяемых записях журнала продукции указанная ед. измерения должна относится к одной группе единиц измерения.
//	Объединяемые записи журнала продукции должны относится к одной стране происхождения.
//	Запрещено объединение записи журнала входной и вырабатываемой продукции.
//	Запрещено объединение записей журнала относящихся к скоропортящейся и не скоропортящейся продукции.
//	Запрещено объединение записей журнала относящихся к качественной и некачественной продукции;
//
Функция MergeStockEntriesOperation(sourceStockEntry) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.MergeStockEntriesOperation(sourceStockEntry);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.MergeStockEntriesOperation(sourceStockEntry);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryVetdocument_1_4.MergeStockEntriesOperation(sourceStockEntry);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Тип, описывающий лабораторное исследование. Исследование выполняется на конкретный показатель/заболевание в лаборатории.
//Параметры:
// batchID - bs:Identifier - Уникальный идентификатор производственной партии продукции, для которой проводились лабораторные исследования.
// expertiseID - bs:String255 - Номер экспертизы.
// indicator - dt:Indicator - Показатель безопасности.
// disease - dt:AnimalDisease - Заболевание.
// method - dt:ResearchMethod - Метод исследования.
// result - dt:ResearchResult - Результат исследования.
// conclusion - 	bs:Text - Заключение.
Функция LaboratoryResearchEvent(batchID, expertiseID, indicator, disease, method, result, conclusion) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.LaboratoryResearchEvent(batchID, expertiseID, indicator, disease, method, result, conclusion);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.LaboratoryResearchEvent(batchID, expertiseID, indicator, disease, method, result, conclusion);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Тип, описывающий операцию внесения изменений в реестр наименований продукции
//Параметры:
// type - bs:RegisterModificationType - Тип операции (CREATE, UPDATE, DELETE)
// productItemList - Массив
Функция PSLModificationOperation(type, productItemList = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.PSLModificationOperation(type, productItemList);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.PSLModificationOperation(type, productItemList);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Тип, описывающий cведения о связанном документе
//Параметры:
// relationshipType - Тип отношения между документами. ReferenceType 1..1
// issueSeries - Серия документа. bs:String255 0..1
// issueNumber - Номер документа. bs:String255 0..1
// issueDate - Дата документа. xs:date 0..1
// type - Тип документа. dt:DocumentType
Функция ReferencedDocument(relationshipType = Неопределено, issueSeries = Неопределено, issueNumber = Неопределено, issueDate = Неопределено, type = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.ReferencedDocument(relationshipType, issueSeries, issueNumber, issueDate, type);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.ReferencedDocument(relationshipType, issueSeries, issueNumber, issueDate, type);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Тип, описывающий подтверждение соблюдения условия перемещения продукции.
//Параметры:
// condition - dt:RegionalizationCondition - Cоблюдаемое условие перемещения партии.
// text - bs:Text - Текст (точная формулировка) соблюдаемого условия перемещения партии.
Функция RegionalizationClause(condition = Неопределено, text = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.RegionalizationClause(condition, text);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.RegionalizationClause(condition, text);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Тип, описывающий операцию оформления результатов инвентаризации.
//Параметры:
// resultingList - Одна или несколько записей складского журнала продукции, полученная, либо измененная в результате инвентаризации. vetd:StockEntryList 0..1
Функция StockDiscrepancy(stockEntry) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.StockDiscrepancy(stockEntry);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.StockDiscrepancy(stockEntry);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryVetdocument_1_4.StockDiscrepancy(stockEntry);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Тип, описывающий cведения о записи журнала продукции.
Функция StockEntry(guid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.StockEntry(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.StockEntry(guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryVetdocument_1_4.StockEntry(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

Функция StockEntryList(stockEntry = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.StockEntryList(stockEntry);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.StockEntryList(stockEntry);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryVetdocument_1_4.StockEntryList(stockEntry);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Тип, описывающий список пунктов в маршруте следования груза (в т.ч. точек перегрузки).
//Параметры:
// routePoint - Пункт перегрузки. vd:ShipmentRoutePoint 0..*
Функция ShipmentRoute(routePoint = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.ShipmentRoute(routePoint);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.ShipmentRoute(routePoint);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Тип, описывающий cведения о точке маршрута следования.
//Наследуется от типа bs:GenericEntity.
//Параметры:
// sqnId - Порядовый номер точки маршрута. bs:SequenceNumber 0..1
// location - Сведения о пункте перегрузки. dt:Location 0..1
// enterprise - Сведения о пункте перегрузки. dt:Enterprise 0..1
// transshipment - Признак того, осуществляется ли в данной точке перегрузка. xs:boolean 0..1
// nextTransport - Сведения о дальнейшем транспорте. vd:TransportInfo 0..1
Функция ShipmentRoutePoint(sqnId = Неопределено, location = Неопределено, enterprise = Неопределено, transshipment = Неопределено, nextTransport = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.ShipmentRoutePoint(sqnId, location, enterprise, transshipment, nextTransport);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.ShipmentRoutePoint(sqnId, location, enterprise, transshipment, nextTransport);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//
//Параметры:
// blankFilter - Фильтр по объёму записи складского журнала. vd:StockEntryBlankFilter
Функция StockEntrySearchPattern(blankFilter) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.StockEntrySearchPattern(blankFilter);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.StockEntrySearchPattern(blankFilter);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

Функция TransportInfo(transportType, transportNumber) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.TransportInfo(transportType, transportNumber);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.TransportInfo(transportType, transportNumber);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисArgusShipment_1_4.TransportInfo(transportType, transportNumber);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

Функция TransportNumber() Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.TransportNumber();
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.TransportNumber();
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Тип, описывающий пользователя. Наследуется от типа bs:GenericEntity.
Функция User(login = Неопределено, fio = Неопределено, post = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.User(login, fio, post);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.User(login, fio, post);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисArgusCommon_1_4.User(login, fio, post);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Тип, описывающий результаты осмотра/исследований партии. Заключение ветеринарного врача/специалиста.
//Параметры:
// purpose - dt:Purpose - Цель. Назначение груза.
// cargoInspected - xs:boolean - Осуществлен контроль гос.ветврачом на соответствие требованиям.
// cargoExpertized - dt:ResearchResult - Проводилась ли ветсанэкспертиза.
// locationProsperity - bs:String255 - Благополучие местности.
// specialMarks - bs:Text - Особые отметки.
// r13nClause - vd:RegionalizationClause - Подтверждение соблюдаемых условий перемещения продукции.
//              Если в соответствии с правилами регионализации перемещение продукции разрешено при выполнении определенных условий,
//              то условия, которые обязуется выполнить перевозчик передаются в данном поле.
// laboratoryResearch - vd:LaboratoryResearchEvent - Сведения о проведенных лабораторных исследованиях.
Функция VeterinaryAuthentication(purpose = Неопределено,
	cargoInspected = Неопределено,
	cargoExpertized = Неопределено,
	locationProsperity = Неопределено,
	specialMarks = Неопределено,
	r13nClause = Неопределено,
	laboratoryResearch = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.VeterinaryAuthentication(purpose, cargoInspected, cargoExpertized, locationProsperity, specialMarks, r13nClause, laboratoryResearch);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.VeterinaryAuthentication(purpose, cargoInspected, cargoExpertized, locationProsperity, specialMarks, r13nClause, laboratoryResearch);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Тип, описывающий некое событие или мероприятие, ассоциированное с партией продукции (или живым животным).
//Например, лабораторное исследование, ВСЭ, произведенная обработка или иммунизация животного и т.д.
//Параметры:
// ID - Идентификатор события в разрезе записи складского журнала или вет.сертификата. Не задаётся пользователем в запросах (кроме запросов на редактирование), формируется системой автоматически. bs:Identifier
// name - Наименование мероприятия. bs:String255
// type - Тип мероприятия. vd:VeterinaryEventType
// actualDateTime - Дата события. xs:dateTime
// location - Место проведения мероприятия. Указывается, если место проведения - это не предприятие зарегистрированное в справочнике Меркурия. dt:Location
// enterprise - Место проведения мероприятия в случае, если это зарегистрированное предприятие. dt:Enterprise
// operator - Организация-оператор, осуществляющий мероприятие. Например, лаборатория (в случае лаб.исследований) или СББЖ. dt:Organization
// referencedDocument - Связанный документ. Например, акт отбора пробы для лаб.исследования. vd:Document
// notes - Дополнительные сведения. bs:Text
Функция VeterinaryEvent(value = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.VeterinaryEvent(value);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.VeterinaryEvent(value);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

// Тип, описывающий ветеринарно-сопроводительный документ (ВСД).
// Параметры:
//  uuid - Идентификатор ВСД
Функция VetDocument(uuid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.VetDocument(uuid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.VetDocument(uuid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисMercuryVetdocument_1_4.VetDocument(uuid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Тип, описывающий cведения об изменении статуса ветеринарного документа.
//Параметры;
// status - vd:VetDocumentStatus - установленный статус документа
// user - dt:User - пользователь, изменивший статус
// date - xs:dateTime - дата и время изменения статуса
// reason - vd:VetDocumentStatusChangeReason - основание
Функция VetDocumentStatusChange(status = Неопределено, user = Неопределено, date = Неопределено, reason = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.VetDocumentStatusChange(status, user, date, reason);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.VetDocumentStatusChange(status, user, date, reason);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//API v2.x
Функция VetDocumentStatusChangeReason(пЗначение) Экспорт
	
	Возврат Строка(пЗначение);
	
КонецФункции

//Тип, описывающий товарно-транспортную накладную.
//Параметры;
// consignor - Сведения об отправителе (владельце). dt:BusinessMember 0..1
// consignee - Сведения о получателе груза. dt:BusinessMember 0..1
// broker - Сведения о фирме-посреднике (перевозчике). dt:BusinessEntity 0..1
// transportInfo - Сведения о транспорте. vd:TransportInfo 0..1
// transportStorageType - Способ хранения при перевозке. dt:TransportationStorageType 0..1
// shipmentRoute - Сведения о маршруте следования (пунктах перегрузки). vd:ShipmentRoute 0..1
Функция Waybill(issueSeries = Неопределено, issueNumber = Неопределено, issueDate = Неопределено, type = Неопределено, broker = Неопределено, transportInfo = Неопределено, transportStorageType = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ВетисMercuryVetdocument_2_0.Waybill(issueSeries, issueNumber, issueDate, type, broker, transportInfo, transportStorageType);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ВетисMercuryVetdocument_2_0.Waybill(issueSeries, issueNumber, issueDate, type, broker, transportInfo, transportStorageType);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ВетисArgusShipment_1_4.Waybill(issueSeries, issueNumber, issueDate, type, broker, transportInfo, transportStorageType);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции

//Причина аннулирования ветеринарного сертификата. 
//API v1.4
Функция WithdrawReason(пЗначение) Экспорт
	
	Возврат Строка(пЗначение);
	
КонецФункции


//Тип, описывающий cколько времени животные находились на территории ТС.
Функция AnimalSpentPeriod(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_FROM_BIRTH();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_NOT_LESS_SIX_MONTHS();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_IN_MONTHS();
	ИначеЕсли value = 4 Тогда
		Возврат ВетисКонстанты.AnimalSpentPeriod_ZERO();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Тип, описывающий контроль поставки (документарный, ветеринарный).
Функция DeliveryDecision(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.DeliveryDecision_ACCEPT_ALL();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.DeliveryDecision_PARTIALLY();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.DeliveryDecision_RETURN_ALL();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Тип, описывающий результат контроля поставки.
Функция DeliveryInspectionResult(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.DeliveryInspectionResult_CORRESPONDS();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.DeliveryInspectionResult_MISMATCH();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.DeliveryInspectionResult_UNSUPERVISED();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Тип, описывающий форму ветеринарно-сопроводительного докумнета (ВСД).
Функция VetDocumentForm(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERTCU1();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_LIC1();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERTCU2();
	ИначеЕсли value = 4 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_LIC2();
	ИначеЕсли value = 5 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERTCU3();
	ИначеЕсли value = 6 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_LIC3();
	ИначеЕсли value = 7 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_NOTE4();
	ИначеЕсли value = 8 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT5I();
	ИначеЕсли value = 9 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT61();
	ИначеЕсли value = 10 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT62();
	ИначеЕсли value = 11 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_CERT63();
	ИначеЕсли value = 12 Тогда
		Возврат ВетисКонстанты.VetDocumentForm_PRODUCTIVE();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Тип, описывающий статус ветеринарно-сопроводительного докумнета (ВСД).
Функция VetDocumentStatus(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.VetDocumentStatus_CONFIRMED();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.VetDocumentStatus_WITHDRAWN();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.VetDocumentStatus_UTILIZED();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Тип, описывающий тип ветеринарно-сопроводительного документа (ВСД).
// Типы сертификатов в документации перечислены как для запросов, так и для ответов сервиса.
// В запросе на список ветеринарных сертификатов можно указать только входящие или исходящие.
// В ответе сервиса придут транспортные и возвратные сертификаты.
// То есть в запросе можно указать направление отправки сертификата (от предприятия или на предприятие),
// а в ответе придет информация о том какие из них были транспортными, а какие были оформлены как возвратными.
Функция VetDocumentType(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.VetDocumentType_INCOMING();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.VetDocumentType_OUTGOING();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.VetDocumentType_PRODUCTIVE();
	ИначеЕсли value = 4 Тогда
		Возврат ВетисКонстанты.VetDocumentType_RETURNABLE();
	ИначеЕсли value = 5 Тогда
		Возврат ВетисКонстанты.VetDocumentType_TRANSPORT();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


Функция Создать(пИмя, пФабрика = Неопределено) Экспорт
	
	Возврат ВетисОбщегоНазначения.Создать(пИмя, URI(), пФабрика);
	
КонецФункции

Функция URI() Экспорт
	
	Возврат "http://api.vetrf.ru/schema/cdm/mercury/vet-document";
	
КонецФункции

