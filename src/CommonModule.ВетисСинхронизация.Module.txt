
Процедура ЗапуститьФоновое(пИмя) Экспорт
	
	ФоновыеЗадания.Выполнить("ВетисСинхронизация."+пИмя);
	
КонецПроцедуры

Процедура ПервыйЗапуск() Экспорт
	
	Если НЕ Справочники.ВетисPackingForm.Выбрать().Следующий() Тогда
		PackingForm();
	КонецЕсли;
	
	Если НЕ Справочники.ВетисIncorporationForm.Выбрать().Следующий() Тогда
		IncorporationForm();
	КонецЕсли;
	
КонецПроцедуры

Процедура НачальноеЗаполнение(пОтказ = Ложь, пОшибка = "") Экспорт
	
	//если нет настроек, синхронизация невозможна
	Если НЕ ЗначениеЗаполнено(ВетисПовтИсп.Настройки_ОсновнаяНастройка()) Тогда
		пОтказ = Истина;
		пОшибка = "Не найдена настройка подключения";
		Возврат;
	КонецЕсли;
	
	Если НЕ Справочники.ВетисPurpose.Выбрать().Следующий() Тогда
		Purpose(пОтказ, пОшибка);
		Если пОтказ = Истина Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Справочники.ВетисProduct.Выбрать().Следующий() Тогда
		Product(пОтказ, пОшибка);
		Если пОтказ = Истина Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Справочники.ВетисSubProduct.Выбрать().Следующий() Тогда
		SubProduct(пОтказ, пОшибка);
		Если пОтказ = Истина Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//RegionalizationCondition(_Отказ);
	
	Если пОтказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	//VetDocumentList(_Отказ);
	
	Если пОтказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры


Процедура СинхронизироватьРегл(пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если НЕ Ветис.Настройки_РегламентныеЗадания() Тогда
		Возврат;
	КонецЕсли;
	
	Синхронизировать(пОтказ, пОшибка);
	
КонецПроцедуры

Процедура Синхронизировать(пОтказ = Ложь, пОшибка = "") Экспорт
	
	//если нет настроек, синхронизация невозможна
	Если НЕ ЗначениеЗаполнено(ВетисПовтИсп.Настройки_ОсновнаяНастройка()) Тогда
		пОтказ = Истина;
		пОшибка = "Не найдена настройка подключения";
		Возврат;
	КонецЕсли;
	
	//ВетисОбщегоНазначения.Пауза(30);
	
	НачальноеЗаполнение(пОтказ, пОшибка);
	
	UnitChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	PurposeChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	ProductChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	SubProductChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	CountryChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	RegionChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	DistrictChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	LocalityChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	//VetDocumentListChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	//StockEntryListChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры

Процедура СинхронизироватьBusinessEntity(пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если НЕ Ветис.Настройки_РегламентныеЗадания() Тогда
		Возврат;
	КонецЕсли;
	
	//если нет настроек, синхронизация невозможна
	Если НЕ ЗначениеЗаполнено(ВетисПовтИсп.Настройки_ОсновнаяНастройка()) Тогда
		пОтказ = Истина;
		пОшибка = "Не найдена настройка подключения";
		Возврат;
	КонецЕсли;
	
	BusinessEntityChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	//EnterpriseChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры

Процедура СинхронизироватьStockEntry(пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если НЕ Ветис.Настройки_РегламентныеЗадания() Тогда
		Возврат;
	КонецЕсли;
	
	//если нет настроек, синхронизация невозможна
	Если НЕ ЗначениеЗаполнено(ВетисПовтИсп.Настройки_ОсновнаяНастройка()) Тогда
		пОтказ = Истина;
		пОшибка = "Не найдена настройка подключения";
		Возврат;
	КонецЕсли;
	
	StockEntryListChanges(пОтказ, пОшибка);
	
КонецПроцедуры

Процедура СинхронизироватьVetDocument(пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если НЕ Ветис.Настройки_РегламентныеЗадания() Тогда
		Возврат;
	КонецЕсли;
	
	//если нет настроек, синхронизация невозможна
	Если НЕ ЗначениеЗаполнено(ВетисПовтИсп.Настройки_ОсновнаяНастройка()) Тогда
		пОтказ = Истина;
		пОшибка = "Не найдена настройка подключения";
		Возврат;
	КонецЕсли;
	
	VetDocumentListChanges(пОтказ, пОшибка);
	
КонецПроцедуры


Процедура ОтложенныеОперацииРегл() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Объект,
	|	_Таблица.Операция,
	|	_Таблица.Параметры,
	|	_Таблица.Объект.СтатусТранзакции КАК СтатусТранзакции,
	|	_Таблица.Объект.Статус КАК Статус,
	|	_Таблица.Объект.Проведен КАК Проведен
	|ИЗ
	|	РегистрСведений.ВетисОтложенныеОперации КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И ИСТИНА");
	
	Попытка
		Результат = Запрос.Выполнить();
	Исключение
		ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		_Отказ = Ложь; _Ошибка = "";
		
		_Параметры = Выборка.Параметры.Получить();
		
		_Параметры = ?(ТипЗнч(_Параметры) = Тип("Структура"), _Параметры, Новый Структура);
		
		_Причина = ?(_Параметры.Свойство("Причина"), _Параметры.Причина, "Отмена");
		
		Если НЕ Выборка.Проведен Тогда
			//пропуск
		ИначеЕсли ТипЗнч(Выборка.Объект) = Тип("ДокументСсылка.ВетисВетеринарноСопроводительныйДокумент") Тогда
			Если Выборка.Операция = ПредопределенноеЗначение("Перечисление.ВетисОтложенныеОперации.Аннулировать")
				И Выборка.Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен") Тогда
				ВетисMercuryApplicationsСлой1с.WithdrawVetDocumentOperation(Выборка.Объект, _Причина, _Отказ, _Ошибка);
			ИначеЕсли Выборка.Операция = ПредопределенноеЗначение("Перечисление.ВетисОтложенныеОперации.ПоУмолчанию") Тогда
				//пропуск
			Иначе
				//пропуск
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Выборка.Объект) = Тип("ДокументСсылка.ВетисТранспортнаяПартия") Тогда
			Если Выборка.Операция = ПредопределенноеЗначение("Перечисление.ВетисОтложенныеОперации.Аннулировать") Тогда
				Если Выборка.СтатусТранзакции = ПредопределенноеЗначение("Перечисление.ВетисСтатусТранзакции.Отправлена") Тогда
					ВетисMercuryApplicationsСлой1с.WithdrawTransportOperation(Выборка.Объект, _Причина, _Отказ, _Ошибка);
				КонецЕсли;
			ИначеЕсли Выборка.Операция = ПредопределенноеЗначение("Перечисление.ВетисОтложенныеОперации.ПоУмолчанию")
				ИЛИ Выборка.Операция = ПредопределенноеЗначение("Перечисление.ВетисОтложенныеОперации.Отправить") Тогда
				Если Выборка.СтатусТранзакции = ПредопределенноеЗначение("Перечисление.ВетисСтатусТранзакции.ПустаяСсылка")
					ИЛИ Выборка.СтатусТранзакции = ПредопределенноеЗначение("Перечисление.ВетисСтатусТранзакции.НеОтправлена") Тогда
					TransportOperation1(Выборка.Объект, _Отказ, _Ошибка);
				Иначе
					//пропуск
				КонецЕсли;
			Иначе
				//пропуск
			КонецЕсли;
		Иначе
			//пропуск
		КонецЕсли;
		
		Если _Отказ = Истина Тогда
			ВетисОбщегоНазначения.ВывестиСообщение(_Ошибка);
		Иначе
			РегистрыСведений.ВетисОтложенныеОперации.Удалить(Выборка.Объект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура IncomingOperation1(пСсылка, пОтказ = Ложь, пОшибка = "")
	
	_Объект = пСсылка.ПолучитьОбъект();
	
	ВетисMercuryApplicationsСлой1с.IncomingOperation(_Объект, пОтказ, пОшибка);
	
КонецПроцедуры


Процедура TransportOperationРегл() Экспорт
	
	Перем _Отказ, _Ошибка;
	
	Если НЕ Ветис.Настройки_РегламентныеЗадания() Тогда
		Возврат;
	КонецЕсли;
	
	//TransportOperation(_Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		ВетисОбщегоНазначения.ВывестиСообщение(_Ошибка, "TransportOperation");
	КонецЕсли;
	
КонецПроцедуры

Процедура TransportOperation(пОтказ = Ложь, пОшибка = "") Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Ссылка
	|ИЗ
	|	Документ.ВетисТранспортнаяПартия КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И _Таблица.Проведен
	|	И _Таблица.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	|	И _Таблица.СтатусТранзакции В (ЗНАЧЕНИЕ(Перечисление.ВетисСтатусТранзакции.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.ВетисСтатусТранзакции.НеОтправлена))
	//|	И НЕ _Таблица.Подпитка
	|	И ИСТИНА");
	
	//сделать: добавить учет поясов
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_ТекстОшибки = "";
	Пока Выборка.Следующий() Цикл
		
		_Отказ = Ложь; _Ошибка = "";
		
		TransportOperation1(Выборка.Объект, _Отказ, _Ошибка);
		
		Если _Отказ = Истина Тогда
			_ТекстОшибки = _ТекстОшибки + ?(_ТекстОшибки = "", "", Символы.ПС) + _Ошибка;
		КонецЕсли;
		
	КонецЦикла;
	
	пОшибка = _ТекстОшибки;
	
	пОтказ = НЕ _ТекстОшибки = "";
	
КонецПроцедуры

Процедура TransportOperation1(пОбъектСсылка, пОтказ = Ложь, пОшибка = "")
	
	Если ТипЗнч(пОбъектСсылка) = Тип("ДокументОбъект.ВетисТранспортнаяПартия") Тогда
		_Транзакция = пОбъектСсылка;
	Иначе//Если ТипЗнч(пОбъектСсылка) = Тип("ДокументСсылка.ВетисТранспортнаяПартия") Тогда
		_Транзакция = пОбъектСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если _Транзакция.Подпитка Тогда
		
		Если ЗначениеЗаполнено(_Транзакция.ТранзакцияПодпитка) Тогда
			_ТранзакцияПодпитка = _Транзакция.ТранзакцияПодпитка.ПолучитьОбъект();
		Иначе
			_ТранзакцияПодпитка = _Транзакция.Скопировать();
		КонецЕсли;
		
		Если НЕ(_ТранзакцияПодпитка.СтатусТранзакции = ПредопределенноеЗначение("Перечисление.ВетисСтатусТранзакции.Отправлена")
			ИЛИ _ТранзакцияПодпитка.СтатусТранзакции = ПредопределенноеЗначение("Перечисление.ВетисСтатусТранзакции.Аннулирована")) Тогда
			
			_ТранзакцияПодпитка.Дата = _Транзакция.Дата;
			_ТранзакцияПодпитка.Проведен = Истина;
			_ТранзакцияПодпитка.ПометкаУдаления = Ложь;
			_ТранзакцияПодпитка.Подпитка = Ложь;
			_ТранзакцияПодпитка.Получатель = _Транзакция.Отправитель;
			_ТранзакцияПодпитка.ПолучательПредприятие = _Транзакция.ОтправительПредприятие;
			_ТранзакцияПодпитка.Отправитель = _Транзакция.ОтправительПодпитка;
			_ТранзакцияПодпитка.ОтправительПредприятие = _Транзакция.ОтправительПредприятиеПодпитка;
			_ТранзакцияПодпитка.ОтправительПодпитка = Неопределено;
			_ТранзакцияПодпитка.ОтправительПредприятиеПодпитка = Неопределено;
			_ТранзакцияПодпитка.ТранзакцияПодпитка = Неопределено;
			
			ВетисMercuryApplicationsСлой1с.TransportOperation(_ТранзакцияПодпитка, пОтказ, пОшибка);
			
			Если пОтказ = Истина Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(_Транзакция.ТранзакцияПодпитка) Тогда
			_Транзакция.ТранзакцияПодпитка = _ТранзакцияПодпитка.Ссылка;
		КонецЕсли;
		
		_СписокСЖ = Новый Соответствие;
		Для каждого _ПартииСтрока Из _ТранзакцияПодпитка.Партии Цикл
			Если НЕ ЗначениеЗаполнено(_Транзакция.Партии[_ПартииСтрока.НомерСтроки-1].ВСД) Тогда
				Если _ПартииСтрока.ВСД.Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен") Тогда
					
					_ПодпиткаГашениеОтвет = ВетисMercuryApplicationsСлой1с.IncomingOperation(_ПартииСтрока.ВСД, пОтказ, пОшибка);
					
					Если пОтказ = Истина Тогда
						Прервать;
					КонецЕсли;
					
					_СписокСЖ.Вставить(_ПартииСтрока.НомерСтроки-1, _ПодпиткаГашениеОтвет.StockEntry[0]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если пОтказ = Истина Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого _StockEntry Из _списокСЖ Цикл
			_Транзакция.Партии[_StockEntry.Ключ].StockEntry = _StockEntry.Значение;
		КонецЦикла;
		
		Попытка
			_Транзакция.Записать();
		Исключение
			пОтказ = Истина;
			пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	ВетисMercuryApplicationsСлой1с.TransportOperation(_Транзакция, пОтказ, пОшибка);
	
КонецПроцедуры

Процедура VetDocumentListChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Версия20 = Ветис.Версия_2_0();
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_Таблица.BusinessEntity,
	|	_Таблица.BusinessEntity.guid КАК issuerId,
	|	_Таблица.Enterprise,
	|	_Таблица.Enterprise.guid КАК enterpriseGuid,
	|	ЕСТЬNULL(_Границы.Граница, ДАТАВРЕМЯ(1, 1, 1)) КАК Граница,
	|	ЕСТЬNULL(_Границы.Смещение, 0) КАК Смещение
	|ИЗ
	|	РегистрСведений.ВетисBusinessMembers КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			_Таблица.BusinessEntity КАК BusinessEntity,
	|			_Таблица.Enterprise КАК Enterprise,
	|			_Таблица.Граница КАК Граница,
	|			_Таблица.Смещение КАК Смещение
	|		ИЗ
	|			РегистрСведений.ВетисГраницыЗапросов КАК _Таблица
	|		ГДЕ
	|			_Таблица.Операция.Наименование = ""getVetDocumentChangesList"") КАК _Границы
	|		ПО _Таблица.Enterprise = _Границы.Enterprise
	|			И _Таблица.BusinessEntity = _Границы.BusinessEntity
	|ГДЕ
	|	ИСТИНА
	|	И _Таблица.Использовать
	|	И _Таблица.Свой
	|
	|УПОРЯДОЧИТЬ ПО
	|	Граница");
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		_count = Ветис.Настройки_КоличествоОбъектовВСписке();
		
		_общийсписок = Новый Массив;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			_vetDocument = Неопределено;
			пОтказ = Ложь;
			пОшибка = "";
			_индекс = 0;
			
			_Перекрытие = 1*60*60;
			
			_НачалоПериода = Выборка.Граница;
			
			_Смещение = ?(ЗначениеЗаполнено(Выборка.Смещение), Выборка.Смещение, 0);
			
			Если _Смещение > 0 И ЗначениеЗаполнено(_НачалоПериода) Тогда
				
				_КонецПериода = _НачалоПериода;
				
				_НачалоПериода = Дата(2000,1,1);
				
			Иначе
				_НачалоПериода = ?(ЗначениеЗаполнено(_НачалоПериода), _НачалоПериода - _Перекрытие, Дата(2000,1,1));
				
				_НачалоПериода = МестноеВремя(УниверсальноеВремя(_НачалоПериода), "GMT+3");//приводим к мск
				
				_КонецПериода = ТекущаяДата();
			КонецЕсли;
			
			_параметры = Новый Структура;
			_параметры.Вставить("offset", _Смещение);
			
			//условно делим, можно уменьшить период
			Если ТекущаяДата() - _НачалоПериода < 30*24*60*60 Тогда
				Пока ВетисMercuryApplications.GetVetDocumentChangesListNext(Выборка.enterpriseGuid, _НачалоПериода, _КонецПериода, Выборка.issuerId, _vetDocument, _Параметры, пОтказ, пОшибка) Цикл
					
					_certifiedConsignment = ?(_Версия20, _VetDocument.certifiedConsignment, _VetDocument);
					
					_ссылка = Документы.ВетисВетеринарноСопроводительныйДокумент.ПолучитьСсылку(Новый УникальныйИдентификатор(_vetDocument.uuid));
					
					_Объект = _ссылка.ПолучитьОбъект();
					
					Если _Объект = Неопределено Тогда
						_Объект = Документы.ВетисВетеринарноСопроводительныйДокумент.СоздатьДокумент();
						_Объект.УстановитьСсылкуНового(_ссылка);
						_Объект.Дата = ТекущаяДата();
					КонецЕсли;
					
					ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_Объект, _vetDocument);
					
					_Объект.ДополнительныеСвойства.Вставить("Загрузка");
					
					Попытка
						_Объект.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						пОтказ = Истина;
						пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						Прервать;
					КонецПопытки;
					
					_общийсписок.Добавить(_Объект.Ссылка);
					
				КонецЦикла;
			Иначе
				//_КонецПериода = ТекущаяДата();
				
				Пока ВетисMercuryApplications.getVetDocumentListNext(Выборка.enterpriseGuid, Выборка.issuerId, _vetDocument, _Параметры, пОтказ, пОшибка) Цикл
					
					_certifiedConsignment = ?(_Версия20, _VetDocument.certifiedConsignment, _VetDocument);
					
					_ссылка = Документы.ВетисВетеринарноСопроводительныйДокумент.ПолучитьСсылку(Новый УникальныйИдентификатор(_vetDocument.uuid));
					
					_Объект = _ссылка.ПолучитьОбъект();
					
					Если _Объект = Неопределено Тогда
						_Объект = Документы.ВетисВетеринарноСопроводительныйДокумент.СоздатьДокумент();
						_Объект.УстановитьСсылкуНового(_ссылка);
						_Объект.Дата = ТекущаяДата();
					КонецЕсли;
					
					ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_Объект, _vetDocument);
					
					_Объект.ДополнительныеСвойства.Вставить("Загрузка");
					
					Попытка
						_Объект.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						пОтказ = Истина;
						пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						Прервать;
					КонецПопытки;
					
					_общийсписок.Добавить(_Объект.Ссылка);
					
					_индекс = _индекс + 1;
					Если _индекс >= _count Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Ветис.ЖурналОпераций_Добавить(_параметры.ТекстЗапроса, "getVetDocumentChangesList", "Запрос", Выборка.Enterprise, Выборка.BusinessEntity);
			Ветис.ЖурналОпераций_Добавить(_параметры.ТекстЗапросаЗаявки, "getVetDocumentChangesList", "Заявка", Выборка.Enterprise, Выборка.BusinessEntity);
			
			Если пОтказ = Истина Тогда
				//ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, Выборка.Enterprise);
				Ветис.ЖурналОпераций_Добавить(_параметры.ТекстОшибки, "getVetDocumentChangesList", "Ответ", Выборка.Enterprise, Выборка.BusinessEntity);
				Если НЕ _Смещение = _параметры.offset Тогда
					Ветис.Настройки_ГраницыЗапросовПоПредприятию("getVetDocumentChangesList", Выборка.Enterprise, Выборка.BusinessEntity, _КонецПериода, _параметры.offset);
				КонецЕсли;
			Иначе
				Ветис.ЖурналОпераций_Добавить(_параметры.ТекстОтвета, "getVetDocumentChangesList", "Ответ", Выборка.Enterprise, Выборка.BusinessEntity);
				Если _индекс >= _count Тогда
					Ветис.Настройки_ГраницыЗапросовПоПредприятию("getVetDocumentChangesList", Выборка.Enterprise, Выборка.BusinessEntity, _КонецПериода, _параметры.offset + _count);
				Иначе
					Ветис.Настройки_ГраницыЗапросовПоПредприятию("getVetDocumentChangesList", Выборка.Enterprise, Выборка.BusinessEntity, _КонецПериода, 0);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//обновим статус транзакций по полученным всд
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	_Таблица.Ссылка
		|ИЗ
		|	Документ.ВетисТранспортнаяПартия.Партии КАК _Таблица
		|ГДЕ
		|	ИСТИНА
		|	И _Таблица.Ссылка.Проведен
		|	И _Таблица.ВСД В(&список)
		|	И ИСТИНА");
		
		Запрос.УстановитьПараметр("Список", _общийсписок);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			_Объект = Выборка.Ссылка.ПолучитьОбъект();
			_Объект.ДополнительныеСвойства.Вставить("Загрузка");
			_Объект.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура StockEntryListChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	Перем _stockEntry, _параметры;
	
	_Версия20 = Ветис.Версия_2_0();
	_ВетисIkarСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисIkarСлой1с);
	_ВетисArgusCommonСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusCommonСлой1с);
	_ВетисArgusProductionСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusProductionСлой1с);
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_Таблица.BusinessEntity,
	|	_Таблица.BusinessEntity.guid КАК issuerId,
	|	_Таблица.Enterprise,
	|	_Таблица.Enterprise.guid КАК enterpriseGuid,
	|	ЕСТЬNULL(_Границы.Граница, ДАТАВРЕМЯ(1, 1, 1)) КАК Граница,
	|	ЕСТЬNULL(_Границы.Смещение, 0) КАК Смещение
	|ИЗ
	|	РегистрСведений.ВетисBusinessMembers КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			_Таблица.BusinessEntity КАК BusinessEntity,
	|			_Таблица.Enterprise КАК Enterprise,
	|			_Таблица.Граница КАК Граница,
	|			_Таблица.Смещение КАК Смещение
	|		ИЗ
	|			РегистрСведений.ВетисГраницыЗапросов КАК _Таблица
	|		ГДЕ
	|			_Таблица.Операция.Наименование = ""getStockEntryChangesList"") КАК _Границы
	|		ПО _Таблица.Enterprise = _Границы.Enterprise
	|			И _Таблица.BusinessEntity = _Границы.BusinessEntity
	|ГДЕ
	|	ИСТИНА
	|	И _Таблица.Использовать
	|	И _Таблица.Свой
	|
	|УПОРЯДОЧИТЬ ПО
	|	Граница");
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		_count = Ветис.Настройки_КоличествоОбъектовВСписке();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			_stockEntry = Неопределено;
			пОтказ = Ложь;
			пОшибка = "";
			_индекс = 0;
			
			_Перекрытие = 1*60*60;
			
			//_НачалоПериода = ?(ЗначениеЗаполнено(Выборка.Граница), Выборка.Граница - _Перекрытие, Дата(2015,1,1));
			//
			//_НачалоПериода = МестноеВремя(УниверсальноеВремя(_НачалоПериода), "GMT+3");//приводим к мск
			//
			//_КонецПериода = ДобавитьМесяц(КонецДня(_НачалоПериода),6);
			//
			//_КонецПериода = ?(_КонецПериода > ТекущаяДата(), ТекущаяДата(), _КонецПериода);
			
			_НачалоПериода = Выборка.Граница;
			
			_Смещение = ?(ЗначениеЗаполнено(Выборка.Смещение), Выборка.Смещение, 0);
			
			Если _Смещение > 0 И ЗначениеЗаполнено(_НачалоПериода) Тогда
				
				_КонецПериода = _НачалоПериода;
				
				_НачалоПериода = Дата(2000,1,1);
				
			Иначе
				_НачалоПериода = ?(ЗначениеЗаполнено(_НачалоПериода), _НачалоПериода - _Перекрытие, Дата(2000,1,1));
				
				_НачалоПериода = МестноеВремя(УниверсальноеВремя(_НачалоПериода), "GMT+3");//приводим к мск
				
				_КонецПериода = ТекущаяДата();
			КонецЕсли;
			
			_параметры = Новый Структура;
			_параметры.Вставить("offset", _Смещение);
			
			//условно делим, можно уменьшить период
			Если ТекущаяДата() - _НачалоПериода < 30*24*60*60 Тогда
				
				Пока ВетисMercuryApplications.getStockEntryChangesListNext(Выборка.enterpriseGuid, _НачалоПериода, _КонецПериода, Выборка.issuerId, _stockEntry, _параметры, пОтказ, пОшибка) Цикл
					
					_se = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисStockEntry, _stockEntry.guid);
					_se.BusinessEntity = Выборка.BusinessEntity;
					_se.Enterprise = Выборка.Enterprise;
					_se.Заполнить(_stockEntry);
					_se.Записать();
					
				КонецЦикла;
			Иначе
				//_КонецПериода = ТекущаяДата();
				_параметры.Вставить("searchPattern", ВетисКонстанты.StockEntryBlankFilter_NOT_BLANK());
				
				Пока ВетисMercuryApplications.getStockEntryListNext(Выборка.enterpriseGuid, Выборка.issuerId, _stockEntry, _параметры, пОтказ, пОшибка) Цикл
					
					_se = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисStockEntry, _stockEntry.guid);
					_se.BusinessEntity = Выборка.BusinessEntity;
					_se.Enterprise = Выборка.Enterprise;
					_se.Заполнить(_stockEntry);
					_se.Записать();
					
				КонецЦикла;
				
			КонецЕсли;
			
			Ветис.ЖурналОпераций_Добавить(_параметры.ТекстЗапроса, "getStockEntryChangesList", "Запрос", Выборка.Enterprise, Выборка.BusinessEntity);
			Ветис.ЖурналОпераций_Добавить(_параметры.ТекстЗапросаЗаявки, "getStockEntryChangesList", "Заявка", Выборка.Enterprise, Выборка.BusinessEntity);
			
			Если пОтказ = Истина Тогда
				//ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, Выборка.Enterprise);
				Ветис.ЖурналОпераций_Добавить(_параметры.ТекстОшибки, "getStockEntryChangesList", "Ответ", Выборка.Enterprise, Выборка.BusinessEntity);
				Если НЕ _Смещение = _параметры.offset Тогда
					Ветис.Настройки_ГраницыЗапросовПоПредприятию("getStockEntryChangesList", Выборка.Enterprise, Выборка.BusinessEntity, _КонецПериода, _параметры.offset);
				КонецЕсли;
			Иначе
				Ветис.ЖурналОпераций_Добавить(_параметры.ТекстОтвета, "getStockEntryChangesList", "Ответ", Выборка.Enterprise, Выборка.BusinessEntity);
				Если _индекс >= _count Тогда
					Ветис.Настройки_ГраницыЗапросовПоПредприятию("getStockEntryChangesList", Выборка.Enterprise, Выборка.BusinessEntity, _КонецПериода, _параметры.offset + _count);
				Иначе
					Ветис.Настройки_ГраницыЗапросовПоПредприятию("getStockEntryChangesList", Выборка.Enterprise, Выборка.BusinessEntity, _КонецПериода, 0);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


Процедура PackingForm() Экспорт
	
	_Версия20 = Ветис.Версия_2_0();
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("globalID", Новый ОписаниеТипов("Строка"));
	
	//Если Ветис.Версия_2_0() Тогда
		Макет = Справочники.ВетисPackingForm.ПолучитьМакет("СписокФормУпаковок_2_0");
	//Иначе
	//	Макет = Справочники.ВетисPackingForm.ПолучитьМакет("СписокФормУпаковок");
	//КонецЕсли;
	
	Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл
		
		ТаблицаСтрока = _ТаблицаВетис.Добавить();
		
		ТаблицаСтрока.guid = Макет.Область(НомерСтроки, 1).Текст;
		ТаблицаСтрока.name = Макет.Область(НомерСтроки, 2).Текст;
		ТаблицаСтрока.globalID = Макет.Область(НомерСтроки, 3).Текст;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.globalID КАК СТРОКА(2)) КАК globalID
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.Наименование КАК Наименование,
	|	_Таблица.globalID КАК _globalID,
	|	_Таблица.guid КАК _guid,
	|	_Ветис.name КАК name,
	|	_Ветис.guid КАК guid,
	|	_Ветис.globalID КАК globalID
	|ИЗ
	|	Справочник.ВетисPackingForm КАК _Таблица
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТаблицаВетис КАК _Ветис
	|		ПО (_Таблица.guid = _Ветис.guid)
	|			И НЕ _Таблица.ПометкаУдаления
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	_Ветис.name";
	
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_контекст = "Синхронизация.PackingForm";
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Попытка
				Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			Продолжить;
			
		ИначеЕсли ПустаяСтрока(Выборка.globalID) Тогда
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ Выборка.ПометкаУдаления
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name)
			ИЛИ НЕ Выборка._globalID = СокрЛП(Выборка.globalID);
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисPackingForm, Выборка.guid);
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
			_Элемент.ПометкаУдаления = Ложь;
			_Элемент.guid         = Выборка.guid;
			_Элемент.Наименование = СокрЛП(Выборка.name);
			_Элемент.globalID     = СокрЛП(Выборка.globalID);
			
			Попытка
				_Элемент.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура Purpose(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_КонецПериода = ТекущаяДата();
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("forSubstandard", Новый ОписаниеТипов("Булево"));
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока ВетисDictionaryService.GetPurposeListNext(_Выборка, _параметры) Цикл
		ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _Выборка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.forSubstandard КАК БУЛЕВО) КАК forSubstandard
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.Наименование КАК Наименование,
	|	_Таблица.forSubstandard КАК НекачественныйГруз,
	|	_Ветис.name КАК name,
	|	_Ветис.guid КАК guid,
	|	_Ветис.forSubstandard КАК forSubstandard
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВетисPurpose КАК _Таблица
	|		ПО (_Ветис.guid = _Таблица.guid)
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	name";
	
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_контекст = "Синхронизация.Purpose";
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Попытка
				Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ Выборка.ПометкаУдаления
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name)
			ИЛИ НЕ Выборка.НекачественныйГруз = Выборка.forSubstandard;
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисPurpose, Выборка.guid);
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
			_Элемент.ПометкаУдаления = Ложь;
			_Элемент.guid         = Выборка.guid;
			_Элемент.Наименование = СокрЛП(Выборка.name);
			_Элемент.forSubstandard = Выборка.forSubstandard;
			
			Попытка
				_Элемент.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetPurposeChangesList", _КонецПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура RegionalizationCondition(пЗаболевание = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если НЕ Ветис.Версия_2_0() Тогда
		пОтказ = Истина;
		пОшибка = "Только начиная с версии 2.0";
		Возврат;
	КонецЕсли;
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("referenceNumber", Новый ОписаниеТипов("Число"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("text", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("strict", Новый ОписаниеТипов("Булево"));
	
	_ТаблицаЗаболевания = Новый ТаблицаЗначений;
	_ТаблицаЗаболевания.Колонки.Добавить("guid");
	_ТаблицаЗаболевания.Колонки.Добавить("name");
	
	_дубли = Новый Массив;
	
	_Заболевание = ВетисDictionaryСлой1с.AnimalDisease(пЗаболевание);
	
	_Условие = Неопределено; _параметры = Неопределено;
	Пока ВетисRegionalizationService.GetR13nConditionListNext(_Заболевание, _Условие, _параметры, пОтказ, пОшибка) Цикл
		
		_УникальныйИдентификатор = Новый УникальныйИдентификатор(_Условие.guid);
		
		Если _дубли.Найти(_УникальныйИдентификатор) = Неопределено Тогда
			_дубли.Добавить(_УникальныйИдентификатор);
		Иначе
			Продолжить;
		КонецЕсли;
		
		_Строка = _ТаблицаВетис.Добавить();
		_Строка.referenceNumber = _Условие.referenceNumber;
		_Строка.guid   = _Условие.guid;
		_Строка.text   = _Условие.text;
		_Строка.strict = _Условие.strict;
		
		Для каждого _relatedDisease Из _Условие.relatedDisease Цикл
			_ТаблицаЗаболеванияСтрока = _ТаблицаЗаболевания.Добавить();
			_ТаблицаЗаболеванияСтрока.guid = _relatedDisease.guid;
			_ТаблицаЗаболеванияСтрока.name = _relatedDisease.name;
		КонецЦикла;
	КонецЦикла;
	
	Если пОтказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.referenceNumber КАК ЧИСЛО) КАК referenceNumber,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.text КАК СТРОКА(255)) КАК text,
	|	ВЫРАЗИТЬ(_Таблица.strict КАК БУЛЕВО) КАК strict
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.Ссылка.Наименование КАК Наименование,
	|	_Таблица.Ссылка.referenceNumber КАК НомерУсловия,
	|	_Таблица.Ссылка.text КАК ФормулировкаУсловия,
	|	_Таблица.Ссылка.strict КАК Обязательность,
	//|	_Таблица.Ссылка.relatedDisease КАК Заболевание,
	|	_Ветис.referenceNumber КАК referenceNumber,
	|	_Ветис.guid КАК guid,
	|	_Ветис.text КАК text,
	|	_Ветис.strict КАК strict
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВетисRegionalizationCondition КАК _Таблица
	|		ПО (_Ветис.guid = _Таблица.guid)
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	text";
	
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_ЗаболеваниеСоответствие = Новый Соответствие;
	
	_контекст = "Синхронизация.RegionalizationCondition";
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Попытка
				Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ Выборка.ПометкаУдаления
			ИЛИ НЕ Выборка.НомерУсловия = СокрЛП(Выборка.referenceNumber)
			ИЛИ НЕ Выборка.ФормулировкаУсловия = Выборка.text
			ИЛИ НЕ Выборка.Обязательность = Выборка.strict;
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисRegionalizationCondition, Выборка.guid);
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
			_Элемент.ПометкаУдаления = Ложь;
			_Элемент.guid         = Выборка.guid;
			_Элемент.Наименование = СокрЛП(Выборка.text);
			_Элемент.referenceNumber = Выборка.referenceNumber;
			_Элемент.text = СокрЛП(Выборка.text);
			_Элемент.strict = Выборка.strict;
			
			//_ТаблицаЗаболеванияСтроки = _ТаблицаЗаболевания.НайтиСтроки(Новый Структура("Condition_уид", _Элемент.уид));
			//Для каждого _ЗаболеваниеСтрока Из _ТаблицаЗаболеванияСтроки Цикл
			//	_Заболевание_уид = Новый УникальныйИдентификатор(_ЗаболеваниеСтрока.guid);
			//	_Заболевание = _ЗаболеваниеСоответствие.Получить(_Заболевание_уид);
			//	Если _Заболевание = Неопределено Тогда
			//		_Заболевание = Справочники.ВетисAnimalDisease.НайтиПоРеквизиту("уид", _Заболевание_уид);
			//		Если НЕ ЗначениеЗаполнено(_Заболевание) Тогда
			//			_Заболевание = Справочники.ВетисAnimalDisease.СоздатьЭлемент();
			//			_Заболевание.guid = _ЗаболеваниеСтрока.guid;
			//			//_Заболевание.уид = _Заболевание_уид;
			//			_Заболевание.Наименование = _ЗаболеваниеСтрока.name;
			//			_Заболевание.Записать();
			//			_Заболевание = _Заболевание.Ссылка;
			//		КонецЕсли;
			//		_ЗаболеваниеСоответствие.Вставить(_Заболевание_уид, _Заболевание);
			//	КонецЕсли;
			//	_Элемент.Заболевания.Добавить().Заболевание = _Заболевание;
			//	_Элемент.relatedDisease = _Заболевание;
			//КонецЦикла;
			
			Попытка
				_Элемент.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура IncorporationForm() Экспорт
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("uuid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("code", Новый ОписаниеТипов("Строка"));
	
	_Макет = Справочники.ВетисIncorporationForm.ПолучитьМакет("ОК_028_2012");
	
	Для _НомерСтроки = 1 По _Макет.ВысотаТаблицы Цикл
		
		_ТаблицаСтрока = _ТаблицаВетис.Добавить();
		
		_ТаблицаСтрока.uuid = _Макет.Область(_НомерСтроки, 1).Текст;
		_ТаблицаСтрока.name = _Макет.Область(_НомерСтроки, 3).Текст;
		_ТаблицаСтрока.code = _Макет.Область(_НомерСтроки, 2).Текст;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.uuid КАК СТРОКА(36)) КАК uuid,
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.code КАК СТРОКА(5)) КАК code
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.Наименование,
	|	_Таблица.Код,
	|	_Ветис.uuid КАК uuid,
	|	_Ветис.name КАК name,
	|	_Ветис.code КАК code
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВетисIncorporationForm КАК _Таблица
	|		ПО _Ветис.code = _Таблица.Код
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	_Ветис.name";
	
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_контекст = "Синхронизация.IncorporationForm";
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.code = NULL Тогда
			Попытка
				Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ Выборка.ПометкаУдаления
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name)
			ИЛИ НЕ Выборка.Код = СокрЛП(Выборка.code);
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисIncorporationForm, Выборка.guid);
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
			_Элемент.ПометкаУдаления = Ложь;
			_Элемент.uuid         = Выборка.uuid;
			_Элемент.Наименование = СокрЛП(Выборка.name);
			_Элемент.Код          = СокрЛП(Выборка.code);
			
			Попытка
				_Элемент.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура Product(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_КонецПериода = ТекущаяДата();
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("productType", Новый ОписаниеТипов("СправочникСсылка.ВетисProductType"));
	
	Выборка = Справочники.ВетисProductType.Выбрать();
	Пока Выборка.Следующий() Цикл
		_productType = ВетисDictionaryСлой1с.ProductType(Выборка.Ссылка);
		_product = Неопределено; _параметры = Неопределено;
		Пока ВетисProductService.GetProductByTypeListNext(_productType, _product, _параметры) Цикл
			_Строка = _ТаблицаВетис.Добавить();
			_Строка.name = _product.name;
			_Строка.guid = _product.guid;
			_Строка.productType = Выборка.Ссылка;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.productType КАК Справочник.ВетисProductType) КАК productType
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.Наименование КАК Наименование,
	|	_Таблица.productType КАК ТипПродукции,
	|	_Ветис.name КАК name,
	|	_Ветис.guid КАК guid,
	|	_Ветис.productType КАК productType
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВетисProduct КАК _Таблица
	|		ПО (_Ветис.guid = _Таблица.guid)
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	name";
	
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_контекст = "Синхронизация.Product";
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Попытка
				Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ Выборка.ПометкаУдаления
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name)
			ИЛИ НЕ Выборка.ТипПродукции = Выборка.productType;
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисProduct, Выборка.guid);
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
			_Элемент.ПометкаУдаления = Ложь;
			_Элемент.guid         = Выборка.guid;
			_Элемент.Наименование = СокрЛП(Выборка.name);
			_Элемент.productType = Выборка.productType;
			
			Попытка
				_Элемент.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetProductChangesList", _КонецПериода);
	КонецЕсли;
		
КонецПроцедуры

Процедура SubProduct(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_КонецПериода = ТекущаяДата();
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("productType", Новый ОписаниеТипов("СправочникСсылка.ВетисProductType"));
	_ТаблицаВетис.Колонки.Добавить("product", Новый ОписаниеТипов("СправочникСсылка.ВетисProduct"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Ссылка КАК product,
	|	_Таблица.guid,
	|	_Таблица.productType
	|ИЗ
	|	Справочник.ВетисProduct КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления
	|	И ИСТИНА");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		_product = ВетисDictionary.Product(Выборка.guid);
		_subProduct = Неопределено; _параметры = Неопределено;
		Пока ВетисProductService.GetSubProductByProductListNext(Выборка.guid, _subProduct, _параметры) Цикл
			_Строка = _ТаблицаВетис.Добавить();
			_Строка.name = _subProduct.name;
			_Строка.guid = _subProduct.guid;
			_Строка.productType = Выборка.productType;
			_Строка.product = Выборка.product;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.productType КАК Справочник.ВетисProductType) КАК productType,
	|	ВЫРАЗИТЬ(_Таблица.product КАК Справочник.ВетисProduct) КАК product
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.Наименование КАК Наименование,
	|	_Таблица.productType КАК ТипПродукции,
	|	_Таблица.product КАК Продукция,
	|	_Ветис.name КАК name,
	|	_Ветис.guid КАК guid,
	|	_Ветис.productType КАК productType,
	|	_Ветис.product КАК product
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВетисSubProduct КАК _Таблица
	|		ПО _Ветис.guid = _Таблица.guid
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	name";
	
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_контекст = "Синхронизация.SubProduct";
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Попытка
				Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ Выборка.ПометкаУдаления
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name)
			ИЛИ НЕ Выборка.ТипПродукции = Выборка.productType
			ИЛИ НЕ Выборка.Продукция = Выборка.product;
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисSubProduct, Выборка.guid);
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
			_Элемент.ПометкаУдаления = Ложь;
			_Элемент.guid         = Выборка.guid;
			_Элемент.Наименование = СокрЛП(Выборка.name);
			_Элемент.productType  = Выборка.productType;
			_Элемент.product      = Выборка.product;
			
			Попытка
				_Элемент.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetSubProductChangesList", _КонецПериода);
	КонецЕсли;
		
КонецПроцедуры


Процедура UnitChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_НачалоПериода = ПолучитьНачалоПериода("GetUnitChangesList");
	
	_КонецПериода = ТекущаяДата();
	
	_контекст = "Синхронизация.Unit";
	
	_актуальные = Новый Массив;
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока ВетисDictionaryService.GetUnitChangesListNext(_НачалоПериода, , _Выборка, _параметры, пОтказ, пОшибка) Цикл
		_УникальныйИдентификатор = Новый УникальныйИдентификатор(_Выборка.guid);
		Если ЗаписьАктуальна(_Выборка) ИЛИ _актуальные.Найти(_УникальныйИдентификатор) = Неопределено Тогда
			_Объект = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисUnit, _Выборка.guid);
			_Объект.Заполнить(_Выборка);
			Если ЗаписьАктуальна(_Выборка) Тогда
				_актуальные.Добавить(_УникальныйИдентификатор);
			КонецЕсли;
			Попытка
				_Объект.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetUnitChangesList", _КонецПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура PurposeChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_НачалоПериода = ПолучитьНачалоПериода("GetPurposeChangesList");
	
	_КонецПериода = ТекущаяДата();
	
	_контекст = "Синхронизация.Purpose";
	
	_актуальные = Новый Массив;
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока ВетисDictionaryService.GetPurposeChangesListNext(_НачалоПериода, , _Выборка, _параметры, пОтказ, пОшибка) Цикл
		_УникальныйИдентификатор = Новый УникальныйИдентификатор(_Выборка.guid);
		Если ЗаписьАктуальна(_Выборка) ИЛИ _актуальные.Найти(_УникальныйИдентификатор) = Неопределено Тогда
			_Объект = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисPurpose, _Выборка.guid);
			_Объект.Заполнить(_Выборка);
			Если ЗаписьАктуальна(_Выборка) Тогда
				_актуальные.Добавить(_УникальныйИдентификатор);
			КонецЕсли;
			Попытка
				_Объект.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetPurposeChangesList", _КонецПериода);
	КонецЕсли;
	
КонецПроцедуры


Процедура BusinessEntityChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Смещение = Неопределено;
	
	//_НачалоПериода = ПолучитьНачалоПериода("GetBusinessEntityChangesList", _Смещение);
	
	_НачалоПериода = Ветис.Настройки_ГраницыЗапросов("GetBusinessEntityChangesList", , _Смещение);
	
	_Смещение = ?(ЗначениеЗаполнено(_Смещение), _Смещение, 0);
	
	Если _Смещение > 0 И ЗначениеЗаполнено(_НачалоПериода) Тогда
		
		_КонецПериода = _НачалоПериода;
		
		_НачалоПериода = Дата(2000,1,1);
		
	Иначе
		_НачалоПериода = ?(ЗначениеЗаполнено(_НачалоПериода), _НачалоПериода - 1*60*60, Дата(2000,1,1));
		
		_НачалоПериода = МестноеВремя(УниверсальноеВремя(_НачалоПериода), "GMT+3");//приводим к мск
		
		_КонецПериода = ТекущаяДата();
	КонецЕсли;
	
	_count = Ветис.Настройки_КоличествоОбъектовВСписке();
	
	_контекст = "Синхронизация.BusinessEntity";
	
	_параметры = Новый Структура;
	_параметры.Вставить("offset", _Смещение);
	
	_Выборка = Неопределено;
	_актуальные = Новый Массив;
	_индекс = 0;
	
	//условно делим, можно уменьшить период
	Если ТекущаяДата() - _НачалоПериода < 90*24*60*60 Тогда
		Пока ВетисEnterpriseService.GetBusinessEntityChangesListNext(_НачалоПериода, _КонецПериода, _Выборка, _параметры, пОтказ, пОшибка) Цикл
			_УникальныйИдентификатор = Новый УникальныйИдентификатор(_Выборка.guid);
			Если ЗаписьАктуальна(_Выборка) ИЛИ _актуальные.Найти(_УникальныйИдентификатор) = Неопределено Тогда
				_Объект = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисBusinessEntity, _Выборка.guid);
				_Объект.Заполнить(_Выборка);
				Если ЗаписьАктуальна(_Выборка) Тогда
					_актуальные.Добавить(_УникальныйИдентификатор);
				КонецЕсли;
				Попытка
					_Объект.Записать();
				Исключение
					пОтказ = Истина;
					пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
					Прервать;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Пока ВетисEnterpriseService.GetBusinessEntityListNext(_Выборка, _параметры, пОтказ, пОшибка) Цикл
			
			_Объект = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисBusinessEntity, _Выборка.guid);
			_Объект.Заполнить(_Выборка);
			Попытка
				_Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				_Объект.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			
			_BusinessMembers = РегистрыСведений.ВетисBusinessMembers.СоздатьНаборЗаписей();
			_BusinessMembers.Отбор.BusinessEntity.Установить(_Объект.Ссылка);
			
			_Enterprise = Неопределено; _параметры1 = Неопределено;
			Пока ВетисEnterpriseService.GetActivityLocationListNext(_Выборка.guid, _Enterprise, _параметры1, пОтказ, пОшибка) Цикл
				_Предприятие = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисEnterprise, _Enterprise.guid);
				_Предприятие.Заполнить(_Enterprise);
				Попытка
					_Предприятие.Записать();
				Исключение
					пОтказ = Истина;
					пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
					Прервать;
				КонецПопытки;
				_Запись = _BusinessMembers.Добавить();
				_Запись.BusinessEntity = _Объект.Ссылка;
				_Запись.Enterprise = _Предприятие.Ссылка;
				_Запись.Использовать = Истина;
				_Запись.ВСервисе = Истина;
			КонецЦикла;
			
			Если пОтказ = Истина Тогда
				Прервать;
			КонецЕсли;
			
			Попытка
				_BusinessMembers.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			
			_индекс = _индекс + 1;
			Если _индекс >= _count Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если пОтказ = Истина Тогда
		ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, "BusinessEntityChanges");
		Если НЕ _Смещение = _параметры.offset Тогда
			Ветис.Настройки_ГраницыЗапросов("GetBusinessEntityChangesList", _КонецПериода, _параметры.offset);
		КонецЕсли;
	ИначеЕсли _индекс >= _count Тогда
		Ветис.Настройки_ГраницыЗапросов("GetBusinessEntityChangesList", _КонецПериода, _параметры.offset + _count);
	Иначе
		Ветис.Настройки_ГраницыЗапросов("GetBusinessEntityChangesList", _КонецПериода, 0);
	КонецЕсли;
	
КонецПроцедуры

Процедура EnterpriseChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Смещение = Неопределено;
	
	//_НачалоПериода = ПолучитьНачалоПериода("GetRussianEnterpriseChangesList", _Смещение);
	
	_НачалоПериода = Ветис.Настройки_ГраницыЗапросов("GetRussianEnterpriseChangesList", , _Смещение);
	
	_Смещение = ?(ЗначениеЗаполнено(_Смещение), _Смещение, 0);
	
	Если _Смещение > 0 И ЗначениеЗаполнено(_НачалоПериода) Тогда
		
		_КонецПериода = _НачалоПериода;
		
		_НачалоПериода = Дата(2000,1,1);
		
	Иначе
		_НачалоПериода = ?(ЗначениеЗаполнено(_НачалоПериода), _НачалоПериода - 1*60*60, Дата(2000,1,1));
		
		_НачалоПериода = МестноеВремя(УниверсальноеВремя(_НачалоПериода), "GMT+3");//приводим к мск
		
		_КонецПериода = ТекущаяДата();
	КонецЕсли;
	
	_контекст = "Синхронизация.Enterprise";
	
	_параметры = Новый Структура;
	_параметры.Вставить("offset", _Смещение);
	
	_Выборка = Неопределено;
	_актуальные = Новый Массив;
	_индекс = 0;
	
	//условно делим, можно уменьшить период
	Если ТекущаяДата() - _НачалоПериода < 30*24*60*60 Тогда
		Пока ВетисEnterpriseService.GetRussianEnterpriseChangesListNext(_НачалоПериода, _КонецПериода, _Выборка, _параметры, пОтказ, пОшибка) Цикл
			_УникальныйИдентификатор = Новый УникальныйИдентификатор(_Выборка.guid);
			Если ЗаписьАктуальна(_Выборка) ИЛИ _актуальные.Найти(_УникальныйИдентификатор) = Неопределено Тогда
				_Объект = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисEnterprise, _Выборка.guid);
				_Объект.Заполнить(_Выборка);
				Если ЗаписьАктуальна(_Выборка) Тогда
					_актуальные.Добавить(_УникальныйИдентификатор);
				КонецЕсли;
				Попытка
					_Объект.Записать();
				Исключение
					пОтказ = Истина;
					пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
					Прервать;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Пока ВетисEnterpriseService.GetRussianEnterpriseListNext(_Выборка, _параметры, пОтказ, пОшибка) Цикл
			
			_Объект = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисEnterprise, _Выборка.guid);
			_Объект.Заполнить(_Выборка);
			Попытка
				_Объект.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			
			_индекс = _индекс + 1;
			Если _индекс >= _параметры.ListOptions.count Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если пОтказ = Истина Тогда
		ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, "EnterpriseChanges");
		Если НЕ _Смещение = _параметры.offset Тогда
			Ветис.Настройки_ГраницыЗапросов("GetRussianEnterpriseChangesList", , _параметры.offset);
		КонецЕсли;
	ИначеЕсли _индекс >= _параметры.ListOptions.count Тогда
		Ветис.Настройки_ГраницыЗапросов("GetRussianEnterpriseChangesList", _КонецПериода, _параметры.offset + _параметры.ListOptions.count);
	Иначе
		Ветис.Настройки_ГраницыЗапросов("GetRussianEnterpriseChangesList", _КонецПериода, 0);
	КонецЕсли;
	
КонецПроцедуры


Процедура CountryChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Service = ?(Ветис.Версия_2_0(), ВетисIkarService_2_0, ВетисIkarService);
	
	_НачалоПериода = ПолучитьНачалоПериода("GetCountryChangesList");
	
	_КонецПериода = ТекущаяДата();
	
	_контекст = "Синхронизация.Country";
	
	_актуальные = Новый Массив;
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока _Service.GetCountryChangesListNext(_НачалоПериода, , _Выборка, _параметры, пОтказ, пОшибка) Цикл
		_УникальныйИдентификатор = Новый УникальныйИдентификатор(_Выборка.guid);
		Если ЗаписьАктуальна(_Выборка) ИЛИ _актуальные.Найти(_УникальныйИдентификатор) = Неопределено Тогда
			_Объект = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисCountry, _Выборка.guid);
			_Объект.Заполнить(_Выборка);
			Если ЗаписьАктуальна(_Выборка) Тогда
				_актуальные.Добавить(_УникальныйИдентификатор);
			КонецЕсли;
			Попытка
				_Объект.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetCountryChangesList", _КонецПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура RegionChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Service = ?(Ветис.Версия_2_0(), ВетисIkarService_2_0, ВетисIkarService);
	
	_НачалоПериода = ПолучитьНачалоПериода("GetRegionChangesList");
	
	_КонецПериода = ТекущаяДата();
	
	_контекст = "Синхронизация.Region";
	
	_актуальные = Новый Массив;
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока _Service.GetRegionChangesListNext(_НачалоПериода, , _Выборка, _параметры, пОтказ, пОшибка) Цикл
		_УникальныйИдентификатор = Новый УникальныйИдентификатор(_Выборка.guid);
		Если ЗаписьАктуальна(_Выборка) ИЛИ _актуальные.Найти(_УникальныйИдентификатор) = Неопределено Тогда
			_Объект = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисRegion, _Выборка.guid);
			_Объект.Заполнить(_Выборка);
			Если ЗаписьАктуальна(_Выборка) Тогда
				_актуальные.Добавить(_УникальныйИдентификатор);
			КонецЕсли;
			Попытка
				_Объект.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetRegionChangesList", _КонецПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура DistrictChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Service = ?(Ветис.Версия_2_0(), ВетисIkarService_2_0, ВетисIkarService);
	
	_НачалоПериода = ПолучитьНачалоПериода("GetDistrictChangesList");
	
	_КонецПериода = ТекущаяДата();
	
	_контекст = "Синхронизация.District";
	
	//добавляем поиск по актуальным в текущем проходе
	//т.к. из операции приходят не в порядке изменения версий
	_актуальные = Новый Массив;
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока _Service.GetDistrictChangesListNext(_НачалоПериода, , _Выборка, _параметры, пОтказ, пОшибка) Цикл
		_УникальныйИдентификатор = Новый УникальныйИдентификатор(_Выборка.guid);
		Если ЗаписьАктуальна(_Выборка) ИЛИ _актуальные.Найти(_УникальныйИдентификатор) = Неопределено Тогда
			_Объект = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисDistrict, _Выборка.guid);
			_Объект.Заполнить(_Выборка);
			Если ЗаписьАктуальна(_Выборка) Тогда
				_актуальные.Добавить(_УникальныйИдентификатор);
			КонецЕсли;
			Попытка
				_Объект.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetDistrictChangesList", _КонецПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура LocalityChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	//этой операции нет в сервисе, поэтому делаем полную загрузку
	
	Возврат;
	
	_Версия20 = Ветис.Версия_2_0();
	
	_Service = ?(_Версия20, ВетисIkarService_2_0, ВетисIkarService);
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("view", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("regionGuid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("districtGuid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("countryGuid", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_Таблица.guid
	|ИЗ
	|	Справочник.ВетисRegion КАК _Таблица
	|ГДЕ
	|	НЕ _Таблица.ПометкаУдаления");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		_locality = Неопределено; _параметры = Неопределено;
		Пока _Service.GetLocalityListByRegionNext(Выборка.guid, _locality, _параметры) Цикл
			_locality.regionGuid = Выборка.guid;
			ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_Таблица.guid,
	|	_Таблица.Region.guid КАК regionGuid
	|ИЗ
	|	Справочник.ВетисDistrict КАК _Таблица
	|ГДЕ
	|	НЕ _Таблица.ПометкаУдаления");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		_locality = Неопределено; _параметры = Неопределено;
		Пока _Service.GetLocalityListByDistrictNext(Выборка.guid, _locality, _параметры) Цикл
			_locality.regionGuid = Выборка.regionGuid;
			_locality.districtGuid = Выборка.guid;
			ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.view КАК СТРОКА(255)) КАК view,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.countryGuid КАК СТРОКА(36)) КАК countryGuid,
	|	ВЫРАЗИТЬ(_Таблица.regionGuid КАК СТРОКА(36)) КАК regionGuid,
	|	ВЫРАЗИТЬ(_Таблица.districtGuid КАК СТРОКА(36)) КАК districtGuid
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.Наименование,
	|	_Таблица.view КАК Представление,
	|	_Таблица.Country КАК Страна,
	|	_Таблица.Region КАК Регион,
	|	_Таблица.District КАК Район,
	|	_Ветис.name КАК name,
	|	_Ветис.view КАК view,
	|	_Ветис.guid КАК guid,
	|	_Страна.Ссылка КАК country,
	|	_Регион.Ссылка КАК region,
	|	_Район.Ссылка КАК district
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетисCountry КАК _Страна
	|		ПО _Ветис.countryGuid = _Страна.guid
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетисRegion КАК _Регион
	|		ПО _Ветис.regionGuid = _Регион.guid
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетисDistrict КАК _Район
	|		ПО _Ветис.districtGuid = _Район.guid
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВетисLocality КАК _Таблица
	|		ПО _Ветис.guid = _Таблица.guid
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	name";
	
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_контекст = "Синхронизация.Locality";
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Попытка
				Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ Выборка.ПометкаУдаления
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name)
			ИЛИ НЕ Выборка.Представление = СокрЛП(Выборка.view)
			ИЛИ НЕ Выборка.Страна = Выборка.country
			ИЛИ НЕ Выборка.Регион = Выборка.region
			ИЛИ НЕ Выборка.Район = Выборка.district;
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисLocality, Выборка.guid);
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
			_Элемент.ПометкаУдаления = Ложь;
			_Элемент.guid         = Выборка.guid;
			_Элемент.Наименование = СокрЛП(Выборка.name);
			_Элемент.view         = СокрЛП(Выборка.view);
			_Элемент.country      = Выборка.country;
			_Элемент.region       = Выборка.region;
			_Элемент.district     = Выборка.district;
			
			Попытка
				_Элемент.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Locality(пСтрана, пРегион = Неопределено, пРайон = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Версия20 = Ветис.Версия_2_0();
	
	_countryGuid = ?(_Версия20, ВетисDictionaryСлой1с, ВетисIkarСлой1с).Country(пСтрана);
	
	_Service = ?(_Версия20, ВетисIkarService_2_0, ВетисIkarService);
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("view", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("regionGuid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("districtGuid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("countryGuid", Новый ОписаниеТипов("Строка"));
	
	Если пРегион = Неопределено Тогда
		_region = Неопределено; _параметрыR = Неопределено;
		Пока _Service.GetRegionListByCountryNext(_countryGuid, _region, _параметрыR) Цикл
			_locality = Неопределено; _параметры = Неопределено;
			Пока _Service.GetLocalityListByRegionNext(_region.Guid, _locality, _параметры) Цикл
				_locality.regionGuid = _region.Guid;
				ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
			КонецЦикла;
			Если пРайон = Неопределено Тогда
				_district = Неопределено; _параметрыD = Неопределено;
				Пока _Service.GetDistrictListByRegionNext(_region.guid, _district, _параметрыD) Цикл
					_locality = Неопределено; _параметры = Неопределено;
					Пока _Service.GetLocalityListByDistrictNext(_district.Guid, _locality, _параметры) Цикл
						ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
					КонецЦикла;
				КонецЦикла;
			Иначе
				_districtGuid = пРайон.guid;
				_locality = Неопределено; _параметры = Неопределено;
				Пока _Service.GetLocalityListByDistrictNext(_districtGuid, _locality, _параметры) Цикл
					ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		_regionGuid = пРегион.guid;
		
		Если пРайон = Неопределено Тогда
			
			_locality = Неопределено; _параметры = Неопределено;
			Пока _Service.GetLocalityListByRegionNext(_regionGuid, _locality, _параметры) Цикл
				_locality.regionGuid = _regionGuid;
				ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
			КонецЦикла;
			
			_district = Неопределено; _параметрыD = Неопределено;
			Пока _Service.GetDistrictListByRegionNext(_regionGuid, _district, _параметрыD) Цикл
				_locality = Неопределено; _параметры = Неопределено;
				Пока _Service.GetLocalityListByDistrictNext(_district.Guid, _locality, _параметры) Цикл
					_locality.regionGuid = _regionGuid;
					_locality.districtGuid = _district.Guid;
					ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
				КонецЦикла;
			КонецЦикла;
		Иначе
			_districtGuid = пРайон.guid;
			_locality = Неопределено; _параметры = Неопределено;
			Пока _Service.GetLocalityListByDistrictNext(_districtGuid, _locality, _параметры) Цикл
				_locality.regionGuid = _regionGuid;
				_locality.districtGuid = _districtGuid;
				ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.view КАК СТРОКА(255)) КАК view,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.districtGuid КАК СТРОКА(36)) КАК districtGuid,
	|	ВЫРАЗИТЬ(_Таблица.regionGuid КАК СТРОКА(36)) КАК regionGuid,
	|	ВЫРАЗИТЬ(_Таблица.countryGuid КАК СТРОКА(36)) КАК countryGuid
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.Наименование,
	|	_Таблица.Представление,
	|	_Таблица.Region КАК Регион,
	|	_Таблица.District КАК Район,
	|	_Ветис.name КАК name,
	|	_Ветис.view КАК view,
	|	_Ветис.guid КАК guid,
	|	_Район.Ссылка КАК district,
	|	_Регион.Ссылка КАК region
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетисDistrict КАК _Район
	|		ПО _Ветис.districtGuid = _Район.guid
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетисRegion КАК _Регион
	|		ПО _Ветис.regionGuid = _Регион.guid
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВетисLocality КАК _Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			&Страна КАК Страна,
	|			&Регион КАК Регион,
	|			&Район КАК Район) КАК _Отбор
	|		ПО _Таблица.Country = _Отбор.Страна
	|//о1		И _Таблица.Region = _Отбор.Регион
	|//о2		И _Таблица.District = _Отбор.Район
	|		ПО _Ветис.guid = _Таблица.guid
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	name";
	
	Запрос.УстановитьПараметр("Страна", пСтрана);
	Запрос.УстановитьПараметр("Регион", пРегион);
	Запрос.УстановитьПараметр("Район", пРайон);
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Если НЕ пРегион = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о1", "");
	КонецЕсли;
	
	Если НЕ пРайон = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о2", "");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_контекст = "Синхронизация.Locality";
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Попытка
				Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), _контекст);
			КонецПопытки;
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ Выборка.ПометкаУдаления
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name)
			ИЛИ НЕ Выборка.Представление = СокрЛП(Выборка.view)
			ИЛИ НЕ Выборка.Регион = СокрЛП(Выборка.region)
			ИЛИ НЕ Выборка.Район = СокрЛП(Выборка.district);
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисLocality, Выборка.guid);
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
			_Элемент.ПометкаУдаления = Ложь;
			_Элемент.guid         = Выборка.guid;
			_Элемент.Наименование = СокрЛП(Выборка.name);
			_Элемент.view         = СокрЛП(Выборка.view);
			_Элемент.Country      = пСтрана;
			_Элемент.Region       = Выборка.region;
			_Элемент.District     = Выборка.district;
			
			Попытка
				_Элемент.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ProductChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_НачалоПериода = ПолучитьНачалоПериода("GetProductChangesList");
	
	_КонецПериода = ТекущаяДата();
	
	_контекст = "Синхронизация.Product";
	
	_актуальные = Новый Массив;
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока ВетисProductService.GetProductChangesListNext(_НачалоПериода, , _Выборка, _параметры, пОтказ, пОшибка) Цикл
		_УникальныйИдентификатор = Новый УникальныйИдентификатор(_Выборка.guid);
		Если ЗаписьАктуальна(_Выборка) ИЛИ _актуальные.Найти(_УникальныйИдентификатор) = Неопределено Тогда
			_Объект = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисProduct, _Выборка.guid);
			_Объект.Заполнить(_Выборка);
			Если ЗаписьАктуальна(_Выборка) Тогда
				_актуальные.Добавить(_УникальныйИдентификатор);
			КонецЕсли;
			Попытка
				_Объект.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetProductChangesList", _КонецПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура SubProductChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_НачалоПериода = ПолучитьНачалоПериода("GetSubProductChangesList");
	
	_КонецПериода = ТекущаяДата();
	
	_контекст = "Синхронизация.SubProduct";
	
	_актуальные = Новый Массив;
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока ВетисProductService.GetSubProductChangesListNext(_НачалоПериода, , _Выборка, _параметры, пОтказ, пОшибка) Цикл
		_УникальныйИдентификатор = Новый УникальныйИдентификатор(_Выборка.guid);
		Если ЗаписьАктуальна(_Выборка) ИЛИ _актуальные.Найти(_УникальныйИдентификатор) = Неопределено Тогда
			_Объект = ВетисОбменДанными.ПолучитьОбъект(Справочники.ВетисSubProduct, _Выборка.guid);
			_Объект.Заполнить(_Выборка);
			Если ЗаписьАктуальна(_Выборка) Тогда
				_актуальные.Добавить(_УникальныйИдентификатор);
			КонецЕсли;
			Попытка
				_Объект.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetSubProductChangesList", _КонецПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура ProductItemChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
КонецПроцедуры


Функция ЗаписьАктуальна(item)
//100	CREATED - Запись создана.
//101	CREATED_WHEN_QUENCH_VETCERTIFICATE - Запись создана путем гашения ВС (импорт).
//102	CREATED_WHEN_QUENCH_VETDOCUMENT - Запись создана путем гашения ВСД.
//103	CREATED_BY_OPERATION - Запись создана в результате производственной операции.
//110	CREATED_WHEN_MERGE - Запись создана в результате объединения двух или более других.
//120	CREATED_WHEN_SPLIT - Запись создана в результате разделения другой.
//200	UPDATED - В запись были внесены изменения.
//201	WITHDRAWN - Запись журнала аннулирована.
//202	UPDATED_WHEN_WRITINGOFF - Запись продукции изменена путём списания. Необязательно, чтобы продукция была списана полностью, может быть списана и часть объёма.
//230	UPDATED_WHEN_ATTACH - Запись была обновлена в результате присоединения другой.
//231	UPDATED_WHEN_ATTACH_AUTOMATIC - Запись была обновлена в результате присоединения другой.
//240	UPDATED_WHEN_FORK - Запись была обновлена в результате отделения от неё другой.
//250	RESTORED_AFTER_DELETE - Запись была восстановлена после удаления.
//300	MOVED - Запись была перемещена в другую группу (для иерархических справочников).
//400	DELETED - Запись была удалена.
//410	DELETED_WHEN_MERGE - Запись была удалена в результате объединения.
//420	DELETED_WHEN_SPLIT - Запись была удалена в результате разделения.
//430	DELETED_WHEN_ATTACH - Запись была удалена в результате присоединения.
	Возврат (item.status >= 100 И item.status < 200
		ИЛИ item.status = 200
		ИЛИ item.status = 202
		ИЛИ item.status = 230
		ИЛИ item.status = 231
		ИЛИ item.status = 240
		ИЛИ item.status = 250
		ИЛИ item.status = 300)
		И item.last
		И item.active;
		
КонецФункции


Функция ПолучитьНачалоПериода(пИмяОперации, пСмещение = Неопределено)
	
	_НачалоПериода = Ветис.Настройки_ГраницыЗапросов(пИмяОперации, , пСмещение);
	
	_НачалоПериода = ?(ЗначениеЗаполнено(_НачалоПериода), _НачалоПериода - 1*60*60, Дата(2000,1,1));
	
	_НачалоПериода = МестноеВремя(УниверсальноеВремя(_НачалоПериода), "GMT+3");//приводим к мск
	
	пСмещение = ?(ЗначениеЗаполнено(пСмещение), пСмещение, 0);
	
	Возврат _НачалоПериода;
	
КонецФункции
