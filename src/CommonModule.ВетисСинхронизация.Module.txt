
Процедура ЗапуститьФоновое(пИмя) Экспорт
	
	ФоновыеЗадания.Выполнить("ВетисСинхронизация."+пИмя);
	
КонецПроцедуры

Процедура ПервыйЗапуск() Экспорт
	
	Если НЕ Справочники.ВетисPackingForm.Выбрать().Следующий() Тогда
		PackingForm();
	КонецЕсли;
	
	Если НЕ Справочники.ВетисIncorporationForm.Выбрать().Следующий() Тогда
		IncorporationForm();
	КонецЕсли;
	
КонецПроцедуры

Процедура НачальноеЗаполнение(пОтказ = Ложь, пОшибка = "") Экспорт
	
	//если нет настроек, синхронизация невозможна
	Если НЕ ЗначениеЗаполнено(ВетисПовтИсп.Настройки_ОсновнаяНастройка()) Тогда
		пОтказ = Истина;
		пОшибка = "Не найдена настройка подключения";
		Возврат;
	КонецЕсли;
	
	Если НЕ Справочники.ВетисPurpose.Выбрать().Следующий() Тогда
		Purpose(пОтказ, пОшибка);
		Если пОтказ = Истина Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Справочники.ВетисProduct.Выбрать().Следующий() Тогда
		Product(пОтказ, пОшибка);
		Если пОтказ = Истина Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Справочники.ВетисSubProduct.Выбрать().Следующий() Тогда
		SubProduct(пОтказ, пОшибка);
		Если пОтказ = Истина Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//RegionalizationCondition(_Отказ);
	
	Если пОтказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	//BusinessEntity(_Отказ);
	
	Если пОтказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	//VetDocumentList(_Отказ);
	
	Если пОтказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура Синхронизвать(пОтказ = Ложь, пОшибка = "") Экспорт
	
	//если нет настроек, синхронизация невозможна
	Если НЕ ЗначениеЗаполнено(ВетисПовтИсп.Настройки_ОсновнаяНастройка()) Тогда
		пОтказ = Истина;
		пОшибка = "Не найдена настройка подключения";
		Возврат;
	КонецЕсли;
	
	//ВетисОбщегоНазначения.Пауза(30);
	
	НачальноеЗаполнение(пОтказ, пОшибка);
	
	UnitChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	PurposeChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	ProductChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	SubProductChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	CountryChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	RegionChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	DistrictChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	LocalityChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	//BusinessEntityChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	//EnterpriseChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	VetDocumentListChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	StockEntryListChanges(пОтказ, пОшибка);
	
	//Если пОтказ = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры


Процедура VetDocumentListChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_Таблица.BusinessEntity,
	|	_Таблица.BusinessEntity.guid КАК issuerId,
	|	_Таблица.Enterprise,
	|	_Таблица.Enterprise.guid КАК enterpriseGuid,
	|	ЕСТЬNULL(_Границы.Граница, ДАТАВРЕМЯ(1, 1, 1)) КАК Граница
	|ИЗ
	|	РегистрСведений.ВетисBusinessMembers КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			_Таблица.BusinessEntity КАК BusinessEntity,
	|			_Таблица.Enterprise КАК Enterprise,
	|			_Таблица.Граница КАК Граница
	|		ИЗ
	|			РегистрСведений.ВетисГраницыЗапросов КАК _Таблица
	|		ГДЕ
	|			_Таблица.Операция.Наименование = ""getVetDocumentChangesListRequest"") КАК _Границы
	|		ПО _Таблица.Enterprise = _Границы.Enterprise
	|			И _Таблица.BusinessEntity = _Границы.BusinessEntity
	|ГДЕ
	|	ИСТИНА
	|	И _Таблица.Использовать
	|	И _Таблица.Свой
	|
	|УПОРЯДОЧИТЬ ПО
	|	Граница");
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		_Версия20 = Ветис.Версия_2_0();
		
		_ВетисMercuryApplications = ?(_Версия20, ВетисMercuryApplications_2_0, ВетисMercuryApplications);
		_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
		
		_Префикс = Ветис.Настройки_Префикс();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			_vetDocument = Неопределено;
			_параметры = Неопределено;
			пОтказ = Ложь;
			пОшибка = "";
			
			_НачалоПериода = ?(ЗначениеЗаполнено(Выборка.Граница), Выборка.Граница - 12*60*60, Дата(2015,1,1));
			
			_КонецПериода = ДобавитьМесяц(КонецДня(_НачалоПериода),6);
			
			_КонецПериода = ?(_КонецПериода > ТекущаяДата(), ТекущаяДата(), _КонецПериода);
			
			_enterpriseGuid = Выборка.enterpriseGuid;
			
			Пока _ВетисMercuryApplications.GetVetDocumentChangesListNext(_enterpriseGuid, _НачалоПериода, _КонецПериода, Выборка.issuerId, _vetDocument, _Параметры, пОтказ, пОшибка) Цикл
				
				_certifiedConsignment = ?(_Версия20, _VetDocument.certifiedConsignment, _VetDocument);
				
				//Если _certifiedConsignment = Неопределено
				//	ИЛИ _certifiedConsignment.consignee = Неопределено
				//	ИЛИ _certifiedConsignment.consignor = Неопределено
				//	ИЛИ _certifiedConsignment.consignee.enterprise = Неопределено
				//	ИЛИ _certifiedConsignment.consignor.enterprise = Неопределено Тогда
				//	//СВХ пока не поддерживается
				//	Продолжить;
				//КонецЕсли;
				
				//объединенные предприятия, надо определить отправитель или получатель наш
				//Если НЕ _certifiedConsignment = Неопределено
				//	И НЕ _certifiedConsignment.consignee = Неопределено
				//	И НЕ _certifiedConsignment.consignor = Неопределено
				//	И НЕ _certifiedConsignment.consignee.enterprise = Неопределено
				//	И НЕ _certifiedConsignment.consignor.enterprise = Неопределено Тогда
				//	
				//	Если НЕ _certifiedConsignment.consignee.enterprise.guid = _enterpriseGuid
				//		И НЕ _certifiedConsignment.consignor.enterprise.guid = _enterpriseGuid Тогда
				//		
				//		Если НЕ _certifiedConsignment.consignee.enterprise.guid = _enterpriseGuid Тогда
				//			_enterprise = ВетисEnterpriseService_2_0.GetEnterpriseByGuid(_certifiedConsignment.consignee.enterprise.guid);
				//			Пока НЕ ЗаписьАктуальна(_enterprise) И ЗначениеЗаполнено(_enterprise.next) Цикл
				//				_enterprise = ВетисEnterpriseService_2_0.GetEnterpriseByUuid(_enterprise.next);
				//				Если _enterprise.guid = _enterpriseGuid Тогда
				//					Прервать;
				//				КонецЕсли;
				//			КонецЦикла;
				//			Если _enterprise.guid = _enterpriseGuid Тогда
				//				_мз = РегистрыСведений.ВетисEnterpriseAlter.СоздатьМенеджерЗаписи();
				//				_мз.enterprise = Выборка.Enterprise;
				//				_мз.enterpriseAlter = ВетисDictionaryСлой1с.Enterprise(_certifiedConsignment.consignee.enterprise.guid);
				//				_мз.Записать();
				//			КонецЕсли;
				//		КонецЕсли;
				//		
				//		Если НЕ _certifiedConsignment.consignor.enterprise.guid = _enterpriseGuid Тогда
				//			_enterprise = ВетисEnterpriseService_2_0.GetEnterpriseByGuid(_certifiedConsignment.consignor.enterprise.guid);
				//			Пока НЕ ЗаписьАктуальна(_enterprise) И ЗначениеЗаполнено(_enterprise.next) Цикл
				//				_enterprise = ВетисEnterpriseService_2_0.GetEnterpriseByUuid(_enterprise.next);
				//				Если _enterprise.guid = _enterpriseGuid Тогда
				//					Прервать;
				//				КонецЕсли;
				//			КонецЦикла;
				//			Если _enterprise.guid = _enterpriseGuid Тогда
				//				_мз = РегистрыСведений.ВетисEnterpriseAlter.СоздатьМенеджерЗаписи();
				//				_мз.enterprise = Выборка.Enterprise;
				//				_мз.enterpriseAlter = ВетисDictionaryСлой1с.Enterprise(_certifiedConsignment.consignor.enterprise.guid);
				//				_мз.Записать();
				//			КонецЕсли;
				//		КонецЕсли;
				//	КонецЕсли;
				//КонецЕсли;
				
				_Строка = Документы.ВетисВетеринарноСопроводительныйДокумент.НайтиПоРеквизиту("уид", Новый УникальныйИдентификатор(_vetDocument.uuid));
				//_Строка = Документы.ВетисВетеринарноСопроводительныйДокумент.НайтиПоРеквизиту("uuid", _vetDocument.uuid);
				
				Если НЕ ЗначениеЗаполнено(_Строка) Тогда
					_док = Документы.ВетисВетеринарноСопроводительныйДокумент.СоздатьДокумент();
				Иначе
					_док = _Строка.Ссылка.ПолучитьОбъект();
				КонецЕсли;
				
				Если _Версия20 Тогда
					ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать_20(_док, _vetDocument);
				Иначе
					ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_док, _vetDocument);
				КонецЕсли;
				
				_док.ДополнительныеСвойства.Вставить("Загрузка");
				
				Попытка
					_док.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					пОтказ = Истина;
					пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					Прервать;
				КонецПопытки;
				
			КонецЦикла;
			
			Если пОтказ Тогда
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, Выборка.Enterprise);
			Иначе
				Ветис.Настройки_ГраницыЗапросовПоПредприятию("getVetDocumentChangesListRequest", Выборка.Enterprise, Выборка.BusinessEntity, ?(_КонецПериода>ТекущаяДата(),ТекущаяДата(),_КонецПериода));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


Процедура StockEntryListChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	Перем _stockEntry, _параметры;
	
	_Версия20 = Ветис.Версия_2_0();
	_ВетисIkarСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисIkarСлой1с);
	_ВетисArgusCommonСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusCommonСлой1с);
	_ВетисMercuryApplications = ?(_Версия20, ВетисMercuryApplications_2_0, ВетисMercuryApplications);
	_ВетисArgusProductionСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисArgusProductionСлой1с);
	_ВетисCerberusEnterpriseСлой1с = ?(_Версия20, ВетисDictionaryСлой1с, ВетисCerberusEnterpriseСлой1с);
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_Таблица.BusinessEntity,
	|	_Таблица.BusinessEntity.guid КАК issuerId,
	|	_Таблица.Enterprise,
	|	_Таблица.Enterprise.guid КАК enterpriseGuid,
	|	ЕСТЬNULL(_Границы.Граница, ДАТАВРЕМЯ(1, 1, 1)) КАК Граница
	|ИЗ
	|	РегистрСведений.ВетисBusinessMembers КАК _Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			_Таблица.BusinessEntity КАК BusinessEntity,
	|			_Таблица.Enterprise КАК Enterprise,
	|			_Таблица.Граница КАК Граница
	|		ИЗ
	|			РегистрСведений.ВетисГраницыЗапросов КАК _Таблица
	|		ГДЕ
	|			_Таблица.Операция.Наименование = ""getStockEntryChangesListRequest"") КАК _Границы
	|		ПО _Таблица.Enterprise = _Границы.Enterprise
	|			И _Таблица.BusinessEntity = _Границы.BusinessEntity
	|ГДЕ
	|	ИСТИНА
	|	И _Таблица.Использовать
	|	И _Таблица.Свой
	|
	|УПОРЯДОЧИТЬ ПО
	|	Граница");
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		_актуальные = Новый Массив;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			_актуальные.Очистить();
			_stockEntry = Неопределено;
			_параметры = Неопределено;
			пОтказ = Ложь;
			пОшибка = "";
			
			_НачалоПериода = ?(ЗначениеЗаполнено(Выборка.Граница), Выборка.Граница - 2*60*60, Дата(2015,1,1));
			
			//_КонецПериода = ТекущаяДата();
			_КонецПериода = ?(ДобавитьМесяц(КонецДня(_НачалоПериода),1) > ТекущаяДата(), ТекущаяДата(), ДобавитьМесяц(КонецДня(_НачалоПериода),1));
			
			//2017-11-27
			//дает разные результаты в 1.4 и в 2.0
			Пока _ВетисMercuryApplications.getStockEntryChangesListNext(Выборка.enterpriseGuid, _НачалоПериода, _КонецПериода, Выборка.issuerId, _stockEntry, _параметры, пОтказ, пОшибка) Цикл
				
				_se = РегистрыСведений.ВетисStockEntryList.СоздатьМенеджерЗаписи();
				_se.BusinessEntity = Выборка.BusinessEntity;
				_se.Enterprise = Выборка.Enterprise;
				_se.уид = Новый УникальныйИдентификатор(_stockEntry.guid);
				
				Если ЗаписьАктуальна(_stockEntry) И _stockEntry.batch.volume > 0 Тогда
					
					_актуальные.Добавить(_se.уид);
					
					_se.guid = _stockEntry.guid;
					
					_se.entryNumber = _stockEntry.entryNumber;
					
					//_se.createDate = Ветис.ВремяМестное(_stockEntry.createDate);// xs:dateTime
					_se.updateDate = Ветис.ВремяМестное(_stockEntry.updateDate);// xs:dateTime
					
					_se.ProductType = _ВетисArgusProductionСлой1с.productType(_stockEntry.batch.productType);
					_se.Product     = _ВетисArgusProductionСлой1с.Product(_stockEntry.batch.product);
					_se.SubProduct  = _ВетисArgusProductionСлой1с.SubProduct(_stockEntry.batch.subProduct);
					_se.ProductItem = _ВетисArgusProductionСлой1с.ProductItem(_stockEntry.batch.productItem);
					_se.ProductItemName = _stockEntry.batch.productItem.name;
					
					_se.Unit        = _ВетисArgusCommonСлой1с.Unit(_stockEntry.batch.unit);
					_se.volume      = _stockEntry.batch.volume;
					
					Если НЕ ЗначениеЗаполнено(_stockEntry.previous) Тогда
						_se.createDate = Ветис.ВремяМестное(_stockEntry.createDate);// xs:dateTime
						_se.volume1 = _stockEntry.batch.volume;
					КонецЕсли;
					
					Если _Версия20 Тогда
						
						_se.owner = _ВетисCerberusEnterpriseСлой1с.BusinessEntity(_stockEntry.batch.owner);
						
						Если НЕ _stockEntry.batch.packageList = Неопределено Тогда
							_pl = РегистрыСведений.ВетисPackageList.СоздатьНаборЗаписей();
							_pl.Отбор.уид.Установить(_se.уид);
							_pm = РегистрыСведений.ВетисProductMarks.СоздатьНаборЗаписей();
							_pm.Отбор.уид.Установить(_se.уид);
							_plКлючСтроки = 1;
							Для каждого _package Из _stockEntry.batch.packageList.package Цикл
								_plСтрока = _pl.Добавить();
								_plСтрока.уид = _se.уид;
								_plСтрока.level = ВетисDictionaryСлой1с.PackageLevelType(_package.level);
								_plСтрока.packingType = ВетисDictionaryСлой1с.PackingType(_package.packingType);
								_plСтрока.packingAmount = _package.quantity;
								_plСтрока.КлючСтроки = _plКлючСтроки;
								_pmКлючСтроки = 1;
								Для каждого _productMarks Из _package.productMarks Цикл
									_pmСтрока = _pm.Добавить();
									_pmСтрока.уид = _se.уид;
									_pmСтрока.КлючСтроки = _pmКлючСтроки;
									_pmСтрока.КлючСвязи = _plКлючСтроки;
									_pmСтрока.value = _productMarks.__content;
									_pmСтрока.class = ВетисDictionaryСлой1с.ProductMarkingClass(_productMarks.class);
									_pmКлючСтроки = _pmКлючСтроки + 1;
								КонецЦикла;
								_plКлючСтроки = _plКлючСтроки + 1;
							КонецЦикла;
							_pl.Записать();
							_pm.Записать();
						КонецЕсли;
						
						Если НЕ _stockEntry.batch.origin = Неопределено Тогда
							//берем первого
							Если _stockEntry.batch.origin.producer.Количество()>0 Тогда
								_se.producer = _ВетисCerberusEnterpriseСлой1с.Enterprise(_stockEntry.batch.origin.producer[0].enterprise);
							КонецЕсли;
							Если НЕ _stockEntry.batch.origin.productItem = Неопределено Тогда
								_se.producerProductItem = _ВетисArgusProductionСлой1с.ProductItem(_stockEntry.batch.origin.productItem);
							КонецЕсли;
							_se.country = _ВетисIkarСлой1с.Country(_stockEntry.batch.origin.country);
						КонецЕсли;
						
						Для каждого _vetDocument Из _stockEntry.vetDocument Цикл
							_se.vetDocument = ВетисMercuryVetdocumentСлой1с.VetDocument(_vetDocument);
							//берем только первый
							Прервать;
						КонецЦикла;
						
						_se.dateOfProductionFirst = ВетисDictionary_2_0.ComplexDate(_stockEntry.batch.dateOfProduction.firstDate, Истина);
						_se.dateOfProductionSecond = ВетисDictionary_2_0.ComplexDate(_stockEntry.batch.dateOfProduction.secondDate, Истина);
						_se.dateOfProductionInformal = _stockEntry.batch.dateOfProduction.informalDate;
						
						_se.expiryDateFirst = ВетисDictionary_2_0.ComplexDate(_stockEntry.batch.expiryDate.firstDate, Истина);
						_se.expiryDateSecond = ВетисDictionary_2_0.ComplexDate(_stockEntry.batch.expiryDate.secondDate, Истина);
						_se.expiryDateInformal = _stockEntry.batch.expiryDate.informalDate;
						
					КонецЕсли;
					
					_se.Записать();
				ИначеЕсли _актуальные.Найти(_se.уид) = Неопределено Тогда
					_se.Прочитать();
					Если _se.Выбран() Тогда
						_se.Удалить();
						_pl = РегистрыСведений.ВетисPackageList.СоздатьНаборЗаписей();
						_pl.Отбор.уид.Установить(_se.уид);
						_pl.Записать();
						_pm = РегистрыСведений.ВетисProductMarks.СоздатьНаборЗаписей();
						_pm.Отбор.уид.Установить(_se.уид);
						_pm.Записать();
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если пОтказ Тогда
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, Выборка.Enterprise);
			Иначе
				Ветис.Настройки_ГраницыЗапросовПоПредприятию("getStockEntryChangesListRequest", Выборка.Enterprise, Выборка.BusinessEntity, ?(_КонецПериода>ТекущаяДата(),ТекущаяДата(),_КонецПериода));
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


Процедура PackingForm() Экспорт
	
	_Версия20 = Ветис.Версия_2_0();
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("globalID", Новый ОписаниеТипов("Строка"));
	
	//Если Ветис.Версия_2_0() Тогда
		Макет = Справочники.ВетисPackingForm.ПолучитьМакет("СписокФормУпаковок_2_0");
	//Иначе
	//	Макет = Справочники.ВетисPackingForm.ПолучитьМакет("СписокФормУпаковок");
	//КонецЕсли;
	
	Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл
		
		ТаблицаСтрока = _ТаблицаВетис.Добавить();
		
		ТаблицаСтрока.guid = Макет.Область(НомерСтроки, 1).Текст;
		ТаблицаСтрока.name = Макет.Область(НомерСтроки, 2).Текст;
		ТаблицаСтрока.globalID = Макет.Область(НомерСтроки, 3).Текст;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.globalID КАК СТРОКА(2)) КАК globalID
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.Наименование КАК Наименование,
	|	_Таблица.globalID КАК _globalID,
	|	_Таблица.guid КАК _guid,
	|	_Ветис.name КАК name,
	|	_Ветис.guid КАК guid,
	|	_Ветис.globalID КАК globalID
	|ИЗ
	|	Справочник.ВетисPackingForm КАК _Таблица
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТаблицаВетис КАК _Ветис
	|		ПО (_Таблица.guid = _Ветис.guid)
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	_Ветис.name";
	
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_контекст = "Синхронизация.PackingForm";
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Попытка
				Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			Продолжить;
			
		ИначеЕсли ПустаяСтрока(Выборка.globalID) Тогда
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ Выборка.ПометкаУдаления
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name)
			ИЛИ НЕ Выборка._globalID = СокрЛП(Выборка.globalID);
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = Справочники.ВетисPackingForm.СоздатьЭлемент();
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
			_Элемент.ПометкаУдаления = Ложь;
			_Элемент.guid         = Выборка.guid;
			_Элемент.уид          = Новый УникальныйИдентификатор(Выборка.guid);
			_Элемент.Наименование = СокрЛП(Выборка.name);
			_Элемент.globalID     = СокрЛП(Выборка.globalID);
			
			Попытка
				_Элемент.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура Purpose(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_КонецПериода = ТекущаяДата();
	
	_ВетисDictionaryService = ?(Ветис.Версия_2_0(), ВетисDictionaryService_2_0, ВетисDictionaryService);
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("forSubstandard", Новый ОписаниеТипов("Булево"));
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока _ВетисDictionaryService.GetPurposeListNext(_Выборка, _параметры) Цикл
		ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _Выборка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.forSubstandard КАК БУЛЕВО) КАК forSubstandard
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.Наименование КАК Наименование,
	|	_Таблица.forSubstandard КАК НекачественныйГруз,
	|	_Ветис.name КАК name,
	|	_Ветис.guid КАК guid,
	|	_Ветис.forSubstandard КАК forSubstandard
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВетисPurpose КАК _Таблица
	|		ПО (_Ветис.guid = _Таблица.guid)
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	name";
	
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_контекст = "Синхронизация.Purpose";
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Попытка
				Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ Выборка.ПометкаУдаления
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name)
			ИЛИ НЕ Выборка.НекачественныйГруз = Выборка.forSubstandard;
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = Справочники.ВетисPurpose.СоздатьЭлемент();
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
			_Элемент.ПометкаУдаления = Ложь;
			_Элемент.guid         = Выборка.guid;
			_Элемент.уид          = Новый УникальныйИдентификатор(Выборка.guid);
			_Элемент.Наименование = СокрЛП(Выборка.name);
			_Элемент.forSubstandard = Выборка.forSubstandard;
			
			Попытка
				_Элемент.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetPurposeChangesList", _КонецПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура RegionalizationCondition(пЗаболевание = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	Если НЕ Ветис.Версия_2_0() Тогда
		пОтказ = Истина;
		пОшибка = "Только начиная с версии 2.0";
		Возврат;
	КонецЕсли;
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("referenceNumber", Новый ОписаниеТипов("Число"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("text", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("strict", Новый ОписаниеТипов("Булево"));
	
	_ТаблицаЗаболевания = Новый ТаблицаЗначений;
	_ТаблицаЗаболевания.Колонки.Добавить("Condition_уид");
	_ТаблицаЗаболевания.Колонки.Добавить("guid");
	_ТаблицаЗаболевания.Колонки.Добавить("name");
	
	_дубли = Новый Массив;
	
	_Заболевание = ВетисDictionaryСлой1с.AnimalDisease(пЗаболевание);
	
	_Условие = Неопределено; _параметры = Неопределено;
	Пока ВетисRegionalizationService_2_0.GetR13nConditionListNext(_Заболевание, _Условие, _параметры, пОтказ, пОшибка) Цикл
		
		_уид = Новый УникальныйИдентификатор(_Условие.guid);
		
		Если _дубли.Найти(_уид) = Неопределено Тогда
			_дубли.Добавить(_уид);
		Иначе
			Продолжить;
		КонецЕсли;
		
		_Строка = _ТаблицаВетис.Добавить();
		_Строка.referenceNumber = _Условие.referenceNumber;
		_Строка.guid   = _Условие.guid;
		_Строка.text   = _Условие.text;
		_Строка.strict = _Условие.strict;
		
		Для каждого _relatedDisease Из _Условие.relatedDisease Цикл
			_ТаблицаЗаболеванияСтрока = _ТаблицаЗаболевания.Добавить();
			_ТаблицаЗаболеванияСтрока.Condition_уид = _уид;
			_ТаблицаЗаболеванияСтрока.guid = _relatedDisease.guid;
			_ТаблицаЗаболеванияСтрока.name = _relatedDisease.name;
		КонецЦикла;
	КонецЦикла;
	
	Если пОтказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.referenceNumber КАК ЧИСЛО) КАК referenceNumber,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.text КАК СТРОКА(255)) КАК text,
	|	ВЫРАЗИТЬ(_Таблица.strict КАК БУЛЕВО) КАК strict
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.Ссылка.Наименование КАК Наименование,
	|	_Таблица.Ссылка.referenceNumber КАК НомерУсловия,
	|	_Таблица.Ссылка.text КАК ФормулировкаУсловия,
	|	_Таблица.Ссылка.strict КАК Обязательность,
	//|	_Таблица.Ссылка.relatedDisease КАК Заболевание,
	|	_Ветис.referenceNumber КАК referenceNumber,
	|	_Ветис.guid КАК guid,
	|	_Ветис.text КАК text,
	|	_Ветис.strict КАК strict
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВетисRegionalizationCondition КАК _Таблица
	|		ПО (_Ветис.guid = _Таблица.guid)
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	text";
	
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_ЗаболеваниеСоответствие = Новый Соответствие;
	
	_контекст = "Синхронизация.RegionalizationCondition";
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Попытка
				Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ Выборка.ПометкаУдаления
			ИЛИ НЕ Выборка.НомерУсловия = СокрЛП(Выборка.referenceNumber)
			ИЛИ НЕ Выборка.ФормулировкаУсловия = Выборка.text
			ИЛИ НЕ Выборка.Обязательность = Выборка.strict;
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = Справочники.ВетисRegionalizationCondition.СоздатьЭлемент();
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
			_Элемент.ПометкаУдаления = Ложь;
			_Элемент.guid         = Выборка.guid;
			_Элемент.уид          = Новый УникальныйИдентификатор(Выборка.guid);
			_Элемент.Наименование = СокрЛП(Выборка.text);
			_Элемент.referenceNumber = Выборка.referenceNumber;
			_Элемент.text = СокрЛП(Выборка.text);
			_Элемент.strict = Выборка.strict;
			
			_ТаблицаЗаболеванияСтроки = _ТаблицаЗаболевания.НайтиСтроки(Новый Структура("Condition_уид", _Элемент.уид));
			Для каждого _ЗаболеваниеСтрока Из _ТаблицаЗаболеванияСтроки Цикл
				_Заболевание_уид = Новый УникальныйИдентификатор(_ЗаболеваниеСтрока.guid);
				_Заболевание = _ЗаболеваниеСоответствие.Получить(_Заболевание_уид);
				Если _Заболевание = Неопределено Тогда
					_Заболевание = Справочники.ВетисAnimalDisease.НайтиПоРеквизиту("уид", _Заболевание_уид);
					Если НЕ ЗначениеЗаполнено(_Заболевание) Тогда
						_Заболевание = Справочники.ВетисAnimalDisease.СоздатьЭлемент();
						_Заболевание.guid = _ЗаболеваниеСтрока.guid;
						_Заболевание.уид = _Заболевание_уид;
						_Заболевание.Наименование = _ЗаболеваниеСтрока.name;
						_Заболевание.Записать();
						_Заболевание = _Заболевание.Ссылка;
					КонецЕсли;
					_ЗаболеваниеСоответствие.Вставить(_Заболевание_уид, _Заболевание);
				КонецЕсли;
				_Элемент.Заболевания.Добавить().Заболевание = _Заболевание;
				_Элемент.relatedDisease = _Заболевание;
			КонецЦикла;
			
			Попытка
				_Элемент.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура IncorporationForm() Экспорт
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("uuid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("code", Новый ОписаниеТипов("Строка"));
	
	_Макет = Справочники.ВетисIncorporationForm.ПолучитьМакет("ОК_028_2012");
	
	Для _НомерСтроки = 1 По _Макет.ВысотаТаблицы Цикл
		
		_ТаблицаСтрока = _ТаблицаВетис.Добавить();
		
		_ТаблицаСтрока.uuid = _Макет.Область(_НомерСтроки, 1).Текст;
		_ТаблицаСтрока.name = _Макет.Область(_НомерСтроки, 3).Текст;
		_ТаблицаСтрока.code = _Макет.Область(_НомерСтроки, 2).Текст;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.uuid КАК СТРОКА(36)) КАК uuid,
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.code КАК СТРОКА(5)) КАК code
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.Наименование,
	|	_Таблица.Код,
	|	_Ветис.uuid КАК uuid,
	|	_Ветис.name КАК name,
	|	_Ветис.code КАК code
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВетисIncorporationForm КАК _Таблица
	|		ПО _Ветис.code = _Таблица.Код
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	_Ветис.name";
	
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_контекст = "Синхронизация.IncorporationForm";
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.code = NULL Тогда
			Попытка
				Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ Выборка.ПометкаУдаления
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name)
			ИЛИ НЕ Выборка.Код = СокрЛП(Выборка.code);
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = Справочники.ВетисIncorporationForm.СоздатьЭлемент();
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
			_Элемент.ПометкаУдаления = Ложь;
			_Элемент.uuid         = Выборка.uuid;
			_Элемент.уид          = Новый УникальныйИдентификатор(Выборка.uuid);
			_Элемент.Наименование = СокрЛП(Выборка.name);
			_Элемент.Код          = СокрЛП(Выборка.code);
			
			Попытка
				_Элемент.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура Product(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_КонецПериода = ТекущаяДата();
	
	_ВетисProductService = ?(Ветис.Версия_2_0(), ВетисProductService_2_0, ВетисProductService);
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("productType", Новый ОписаниеТипов("СправочникСсылка.ВетисProductType"));
	
	Выборка = Справочники.ВетисProductType.Выбрать();
	Пока Выборка.Следующий() Цикл
		_productType = ВетисDictionaryСлой1с.ProductType(Выборка.Ссылка);
		_product = Неопределено; _параметры = Неопределено;
		Пока _ВетисProductService.GetProductByTypeListNext(_productType, _product, _параметры) Цикл
			_Строка = _ТаблицаВетис.Добавить();
			_Строка.name = _product.name;
			_Строка.guid = _product.guid;
			_Строка.productType = Выборка.Ссылка;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.productType КАК Справочник.ВетисProductType) КАК productType
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.Наименование КАК Наименование,
	|	_Таблица.productType КАК ТипПродукции,
	|	_Ветис.name КАК name,
	|	_Ветис.guid КАК guid,
	|	_Ветис.productType КАК productType
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВетисProduct КАК _Таблица
	|		ПО (_Ветис.guid = _Таблица.guid)
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	name";
	
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_контекст = "Синхронизация.Product";
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Попытка
				Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ Выборка.ПометкаУдаления
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name)
			ИЛИ НЕ Выборка.ТипПродукции = Выборка.productType;
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = Справочники.ВетисProduct.СоздатьЭлемент();
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
			_Элемент.ПометкаУдаления = Ложь;
			_Элемент.guid         = Выборка.guid;
			_Элемент.уид          = Новый УникальныйИдентификатор(Выборка.guid);
			_Элемент.Наименование = СокрЛП(Выборка.name);
			_Элемент.productType = Выборка.productType;
			
			Попытка
				_Элемент.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetProductChangesList", _КонецПериода);
	КонецЕсли;
		
КонецПроцедуры

Процедура SubProduct(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_КонецПериода = ТекущаяДата();
	
	_ВетисArgusProduction = ?(Ветис.Версия_2_0(), ВетисDictionary_2_0, ВетисArgusProduction);
	_ВетисProductService = ?(Ветис.Версия_2_0(), ВетисProductService_2_0, ВетисProductService);
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("productType", Новый ОписаниеТипов("СправочникСсылка.ВетисProductType"));
	_ТаблицаВетис.Колонки.Добавить("product", Новый ОписаниеТипов("СправочникСсылка.ВетисProduct"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Ссылка КАК product,
	|	_Таблица.guid,
	|	_Таблица.productType
	|ИЗ
	|	Справочник.ВетисProduct КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И НЕ _Таблица.ПометкаУдаления
	|	И ИСТИНА");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		_product = _ВетисArgusProduction.Product(Выборка.guid);
		_subProduct = Неопределено; _параметры = Неопределено;
		Пока _ВетисProductService.GetSubProductByProductListNext(Выборка.guid, _subProduct, _параметры) Цикл
			_Строка = _ТаблицаВетис.Добавить();
			_Строка.name = _subProduct.name;
			_Строка.guid = _subProduct.guid;
			_Строка.productType = Выборка.productType;
			_Строка.product = Выборка.product;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.productType КАК Справочник.ВетисProductType) КАК productType,
	|	ВЫРАЗИТЬ(_Таблица.product КАК Справочник.ВетисProduct) КАК product
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.Наименование КАК Наименование,
	|	_Таблица.productType КАК ТипПродукции,
	|	_Таблица.product КАК Продукция,
	|	_Ветис.name КАК name,
	|	_Ветис.guid КАК guid,
	|	_Ветис.productType КАК productType,
	|	_Ветис.product КАК product
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВетисSubProduct КАК _Таблица
	|		ПО _Ветис.guid = _Таблица.guid
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	name";
	
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_контекст = "Синхронизация.SubProduct";
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Попытка
				Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ Выборка.ПометкаУдаления
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name)
			ИЛИ НЕ Выборка.ТипПродукции = Выборка.productType
			ИЛИ НЕ Выборка.Продукция = Выборка.product;
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = Справочники.ВетисSubProduct.СоздатьЭлемент();
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
			_Элемент.ПометкаУдаления = Ложь;
			_Элемент.guid         = Выборка.guid;
			_Элемент.уид          = Новый УникальныйИдентификатор(Выборка.guid);
			_Элемент.Наименование = СокрЛП(Выборка.name);
			_Элемент.productType  = Выборка.productType;
			_Элемент.product      = Выборка.product;
			
			Попытка
				_Элемент.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetSubProductChangesList", _КонецПериода);
	КонецЕсли;
		
КонецПроцедуры


Процедура UnitChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Service = ?(Ветис.Версия_2_0(), ВетисDictionaryService_2_0, ВетисDictionaryService);
	
	_НачалоПериода = Ветис.Настройки_ГраницыЗапросов("GetUnitChangesList");
	
	_НачалоПериода = ?(ЗначениеЗаполнено(_НачалоПериода), _НачалоПериода - 12*60*60, _НачалоПериода);
	
	_КонецПериода = ТекущаяДата();
	
	_контекст = "Синхронизация.Unit";
	
	_актуальные = Новый Массив;
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока _Service.GetUnitChangesListNext(_НачалоПериода, , _Выборка, _параметры, пОтказ, пОшибка) Цикл
		_Элемент = ВетисDictionaryСлой1с.Unit(_Выборка.guid);
		Если ЗаписьАктуальна(_Выборка) Тогда
			_Объект = _Элемент.ПолучитьОбъект();
			_Объект.Заполнить(_Выборка);
			_актуальные.Добавить(_Объект.уид);
			Попытка
				_Объект.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		ИначеЕсли _актуальные.Найти(Новый УникальныйИдентификатор(_Выборка.guid)) = Неопределено Тогда
			Попытка
				_Элемент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetUnitChangesList", _КонецПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура PurposeChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Service = ?(Ветис.Версия_2_0(), ВетисDictionaryService_2_0, ВетисDictionaryService);
	
	_НачалоПериода = Ветис.Настройки_ГраницыЗапросов("GetPurposeChangesList");
	
	_НачалоПериода = ?(ЗначениеЗаполнено(_НачалоПериода), _НачалоПериода - 12*60*60, _НачалоПериода);
	
	_КонецПериода = ТекущаяДата();
	
	_контекст = "Синхронизация.Purpose";
	
	_актуальные = Новый Массив;
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока _Service.GetPurposeChangesListNext(_НачалоПериода, , _Выборка, _параметры, пОтказ, пОшибка) Цикл
		_Элемент = ВетисDictionaryСлой1с.Purpose(_Выборка.guid);
		Если ЗаписьАктуальна(_Выборка) Тогда
			_Объект = _Элемент.ПолучитьОбъект();
			_Объект.Заполнить(_Выборка);
			_актуальные.Добавить(_Объект.уид);
			Попытка
				_Объект.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		ИначеЕсли _актуальные.Найти(Новый УникальныйИдентификатор(_Выборка.guid)) = Неопределено Тогда
			Попытка
				_Элемент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetPurposeChangesList", _КонецПериода);
	КонецЕсли;
	
КонецПроцедуры


Процедура BusinessEntity(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Service = ?(Ветис.Версия_2_0(), ВетисEnterpriseService_2_0, ВетисEnterpriseService);
	
	_КонецПериода = ТекущаяДата();
	
	_контекст = "Синхронизация.BusinessEntity";
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока НЕ пОтказ = Истина И _Service.GetBusinessEntityListNext(, _Выборка, _параметры, пОтказ, пОшибка) Цикл
		_Элемент = ВетисDictionaryСлой1с.BusinessEntity(_Выборка.guid);
		Если ЗаписьАктуальна(_Выборка) Тогда
			_Объект = _Элемент.ПолучитьОбъект();
			_Объект.Заполнить(_Выборка);
			Попытка
				_Объект.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
			КонецПопытки;
		Иначе
			Попытка
				_Элемент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetBusinessEntityChangesList", _КонецПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура BusinessEntityChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Service = ?(Ветис.Версия_2_0(), ВетисEnterpriseService_2_0, ВетисEnterpriseService);
	
	_НачалоПериода = Ветис.Настройки_ГраницыЗапросов("GetBusinessEntityChangesList");
	
	_НачалоПериода = ?(ЗначениеЗаполнено(_НачалоПериода), _НачалоПериода - 12*60*60, _НачалоПериода);
	
	_КонецПериода = ТекущаяДата();
	
	_контекст = "Синхронизация.BusinessEntity";
	
	_актуальные = Новый Массив;
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока _Service.GetBusinessEntityChangesListNext(_НачалоПериода, , _Выборка, _параметры, пОтказ, пОшибка) Цикл
		_Элемент = ВетисDictionaryСлой1с.BusinessEntity(_Выборка.guid);
		Если ЗаписьАктуальна(_Выборка) Тогда
			_Объект = _Элемент.ПолучитьОбъект();
			_Объект.Заполнить(_Выборка);
			_актуальные.Добавить(_Объект.уид);
			Попытка
				_Объект.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		ИначеЕсли _актуальные.Найти(Новый УникальныйИдентификатор(_Выборка.guid)) = Неопределено Тогда
			Попытка
				_Элемент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetBusinessEntityChangesList", _КонецПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура EnterpriseChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Service = ?(Ветис.Версия_2_0(), ВетисEnterpriseService_2_0, ВетисEnterpriseService);
	
	_НачалоПериода = Ветис.Настройки_ГраницыЗапросов("GetRussianEnterpriseChangesList");
	
	_НачалоПериода = ?(ЗначениеЗаполнено(_НачалоПериода), _НачалоПериода - 0*12*60*60, НачалоГода(ТекущаяДата()));
	
	//_КонецПериода = ?(ДобавитьМесяц(КонецДня(_НачалоПериода),1) > ТекущаяДата(), ТекущаяДата(), ДобавитьМесяц(КонецДня(_НачалоПериода),1));
	_КонецПериода = ?(ДобавитьМесяц(КонецДня(_НачалоПериода),1) > ТекущаяДата(), ТекущаяДата(), _НачалоПериода+1*24*60*60);
	
	_контекст = "Синхронизация.Enterprise";
	
	//_актуальные = Новый Массив;
	
	_Выборка = Неопределено; _параметры = Новый Структура("ВызыватьИсключение", Ложь);
	Пока _Service.GetRussianEnterpriseChangesListNext(_НачалоПериода, _КонецПериода, _Выборка, _параметры, пОтказ, пОшибка) Цикл
		_Элемент = ВетисDictionaryСлой1с.Enterprise(_Выборка.guid);
		//Если ЗаписьАктуальна(_Выборка) Тогда
			_Объект = _Элемент.ПолучитьОбъект();
			_Объект.Заполнить(_Выборка);
			//_актуальные.Добавить(_Объект.уид);
			Попытка
				_Объект.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		//ИначеЕсли _актуальные.Найти(Новый УникальныйИдентификатор(_Выборка.guid)) = Неопределено Тогда
		//	Попытка
		//		_Элемент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		//	Исключение
		//		пОтказ = Истина;
		//		пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		//		ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
		//	КонецПопытки;
		//КонецЕсли;
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetRussianEnterpriseChangesList", _КонецПериода);
	КонецЕсли;
	
КонецПроцедуры


Процедура CountryChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Service = ?(Ветис.Версия_2_0(), ВетисIkarService_2_0, ВетисIkarService);
	
	_НачалоПериода = Ветис.Настройки_ГраницыЗапросов("GetCountryChangesList");
	
	_НачалоПериода = ?(ЗначениеЗаполнено(_НачалоПериода), _НачалоПериода - 12*60*60, _НачалоПериода);
	
	_КонецПериода = ТекущаяДата();
	
	_контекст = "Синхронизация.Country";
	
	_актуальные = Новый Массив;
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока _Service.GetCountryChangesListNext(_НачалоПериода, , _Выборка, _параметры, пОтказ, пОшибка) Цикл
		_Элемент = ВетисDictionaryСлой1с.Country(_Выборка.guid);
		Если ЗаписьАктуальна(_Выборка) Тогда
			_Объект = _Элемент.ПолучитьОбъект();
			_Объект.Заполнить(_Выборка);
			_актуальные.Добавить(_Объект.уид);
			Попытка
				_Объект.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		ИначеЕсли _актуальные.Найти(Новый УникальныйИдентификатор(_Выборка.guid)) = Неопределено Тогда
			Попытка
				_Элемент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetCountryChangesList", _КонецПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура RegionChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Service = ?(Ветис.Версия_2_0(), ВетисIkarService_2_0, ВетисIkarService);
	
	_НачалоПериода = Ветис.Настройки_ГраницыЗапросов("GetRegionChangesList");
	
	_НачалоПериода = ?(ЗначениеЗаполнено(_НачалоПериода), _НачалоПериода - 12*60*60, _НачалоПериода);
	
	_КонецПериода = ТекущаяДата();
	
	_контекст = "Синхронизация.Region";
	
	_актуальные = Новый Массив;
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока _Service.GetRegionChangesListNext(_НачалоПериода, , _Выборка, _параметры, пОтказ, пОшибка) Цикл
		_Элемент = ВетисDictionaryСлой1с.Region(_Выборка.guid);
		Если ЗаписьАктуальна(_Выборка) Тогда
			_Объект = _Элемент.ПолучитьОбъект();
			_Объект.Заполнить(_Выборка);
			_актуальные.Добавить(_Объект.уид);
			Попытка
				_Объект.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		ИначеЕсли _актуальные.Найти(Новый УникальныйИдентификатор(_Выборка.guid)) = Неопределено Тогда
			Попытка
				_Элемент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetRegionChangesList", _КонецПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура DistrictChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Service = ?(Ветис.Версия_2_0(), ВетисIkarService_2_0, ВетисIkarService);
	
	_НачалоПериода = Ветис.Настройки_ГраницыЗапросов("GetDistrictChangesList");
	
	_НачалоПериода = ?(ЗначениеЗаполнено(_НачалоПериода), _НачалоПериода - 12*60*60, _НачалоПериода);
	
	_КонецПериода = ТекущаяДата();
	
	_контекст = "Синхронизация.District";
	
	//добавляем поиск по актуальным в текущем проходе
	//т.к. из операции приходят не в порядке изменения версий
	_актуальные = Новый Массив;
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока _Service.GetDistrictChangesListNext(_НачалоПериода, , _Выборка, _параметры, пОтказ, пОшибка) Цикл
		_Элемент = ВетисDictionaryСлой1с.District(_Выборка.guid);
		Если ЗаписьАктуальна(_Выборка) Тогда
			_Объект = _Элемент.ПолучитьОбъект();
			_Объект.Заполнить(_Выборка);
			_актуальные.Добавить(_Объект.уид);
			Попытка
				_Объект.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		ИначеЕсли _актуальные.Найти(Новый УникальныйИдентификатор(_Выборка.guid)) = Неопределено Тогда
			Попытка
				_Элемент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetDistrictChangesList", _КонецПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура LocalityChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	//этой операции нет в сервисе, поэтому делаем полную загрузку
	
	Возврат;
	
	_Версия20 = Ветис.Версия_2_0();
	
	_Service = ?(_Версия20, ВетисIkarService_2_0, ВетисIkarService);
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("view", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("regionGuid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("districtGuid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("countryGuid", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_Таблица.guid
	|ИЗ
	|	Справочник.ВетисRegion КАК _Таблица
	|ГДЕ
	|	НЕ _Таблица.ПометкаУдаления");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		_locality = Неопределено; _параметры = Неопределено;
		Пока _Service.GetLocalityListByRegionNext(Выборка.guid, _locality, _параметры) Цикл
			_locality.regionGuid = Выборка.guid;
			ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_Таблица.guid,
	|	_Таблица.Region.guid КАК regionGuid
	|ИЗ
	|	Справочник.ВетисDistrict КАК _Таблица
	|ГДЕ
	|	НЕ _Таблица.ПометкаУдаления");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		_locality = Неопределено; _параметры = Неопределено;
		Пока _Service.GetLocalityListByDistrictNext(Выборка.guid, _locality, _параметры) Цикл
			_locality.regionGuid = Выборка.regionGuid;
			_locality.districtGuid = Выборка.guid;
			ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.view КАК СТРОКА(255)) КАК view,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.countryGuid КАК СТРОКА(36)) КАК countryGuid,
	|	ВЫРАЗИТЬ(_Таблица.regionGuid КАК СТРОКА(36)) КАК regionGuid,
	|	ВЫРАЗИТЬ(_Таблица.districtGuid КАК СТРОКА(36)) КАК districtGuid
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.Наименование,
	|	_Таблица.view КАК Представление,
	|	_Таблица.Country КАК Страна,
	|	_Таблица.Region КАК Регион,
	|	_Таблица.District КАК Район,
	|	_Ветис.name КАК name,
	|	_Ветис.view КАК view,
	|	_Ветис.guid КАК guid,
	|	_Страна.Ссылка КАК country,
	|	_Регион.Ссылка КАК region,
	|	_Район.Ссылка КАК district
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетисCountry КАК _Страна
	|		ПО _Ветис.countryGuid = _Страна.guid
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетисRegion КАК _Регион
	|		ПО _Ветис.regionGuid = _Регион.guid
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетисDistrict КАК _Район
	|		ПО _Ветис.districtGuid = _Район.guid
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВетисLocality КАК _Таблица
	|		ПО _Ветис.guid = _Таблица.guid
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	name";
	
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_контекст = "Синхронизация.Locality";
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Попытка
				Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ Выборка.ПометкаУдаления
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name)
			ИЛИ НЕ Выборка.Представление = СокрЛП(Выборка.view)
			ИЛИ НЕ Выборка.Страна = Выборка.country
			ИЛИ НЕ Выборка.Регион = Выборка.region
			ИЛИ НЕ Выборка.Район = Выборка.district;
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = Справочники.ВетисLocality.СоздатьЭлемент();
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
			_Элемент.ПометкаУдаления = Ложь;
			_Элемент.guid         = Выборка.guid;
			_Элемент.уид          = Новый УникальныйИдентификатор(Выборка.guid);
			_Элемент.Наименование = СокрЛП(Выборка.name);
			_Элемент.view         = СокрЛП(Выборка.view);
			_Элемент.country      = Выборка.country;
			_Элемент.region       = Выборка.region;
			_Элемент.district     = Выборка.district;
			
			Попытка
				_Элемент.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Locality(пСтрана, пРегион = Неопределено, пРайон = Неопределено, пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Версия20 = Ветис.Версия_2_0();
	
	_countryGuid = ?(_Версия20, ВетисDictionaryСлой1с, ВетисIkarСлой1с).Country(пСтрана);
	
	_Service = ?(_Версия20, ВетисIkarService_2_0, ВетисIkarService);
	
	_ТаблицаВетис = Новый ТаблицаЗначений;
	_ТаблицаВетис.Колонки.Добавить("name", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("guid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("view", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("regionGuid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("districtGuid", Новый ОписаниеТипов("Строка"));
	_ТаблицаВетис.Колонки.Добавить("countryGuid", Новый ОписаниеТипов("Строка"));
	
	Если пРегион = Неопределено Тогда
		_region = Неопределено; _параметрыR = Неопределено;
		Пока _Service.GetRegionListByCountryNext(_countryGuid, _region, _параметрыR) Цикл
			_locality = Неопределено; _параметры = Неопределено;
			Пока _Service.GetLocalityListByRegionNext(_region.Guid, _locality, _параметры) Цикл
				_locality.regionGuid = _region.Guid;
				ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
			КонецЦикла;
			Если пРайон = Неопределено Тогда
				_district = Неопределено; _параметрыD = Неопределено;
				Пока _Service.GetDistrictListByRegionNext(_region.guid, _district, _параметрыD) Цикл
					_locality = Неопределено; _параметры = Неопределено;
					Пока _Service.GetLocalityListByDistrictNext(_district.Guid, _locality, _параметры) Цикл
						ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
					КонецЦикла;
				КонецЦикла;
			Иначе
				_districtGuid = пРайон.guid;
				_locality = Неопределено; _параметры = Неопределено;
				Пока _Service.GetLocalityListByDistrictNext(_districtGuid, _locality, _параметры) Цикл
					ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		_regionGuid = пРегион.guid;
		
		Если пРайон = Неопределено Тогда
			
			_locality = Неопределено; _параметры = Неопределено;
			Пока _Service.GetLocalityListByRegionNext(_regionGuid, _locality, _параметры) Цикл
				_locality.regionGuid = _regionGuid;
				ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
			КонецЦикла;
			
			_district = Неопределено; _параметрыD = Неопределено;
			Пока _Service.GetDistrictListByRegionNext(_regionGuid, _district, _параметрыD) Цикл
				_locality = Неопределено; _параметры = Неопределено;
				Пока _Service.GetLocalityListByDistrictNext(_district.Guid, _locality, _параметры) Цикл
					_locality.regionGuid = _regionGuid;
					_locality.districtGuid = _district.Guid;
					ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
				КонецЦикла;
			КонецЦикла;
		Иначе
			_districtGuid = пРайон.guid;
			_locality = Неопределено; _параметры = Неопределено;
			Пока _Service.GetLocalityListByDistrictNext(_districtGuid, _locality, _параметры) Цикл
				_locality.regionGuid = _regionGuid;
				_locality.districtGuid = _districtGuid;
				ЗаполнитьЗначенияСвойств(_ТаблицаВетис.Добавить(), _locality);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(_Таблица.name КАК СТРОКА(150)) КАК name,
	|	ВЫРАЗИТЬ(_Таблица.view КАК СТРОКА(255)) КАК view,
	|	ВЫРАЗИТЬ(_Таблица.guid КАК СТРОКА(36)) КАК guid,
	|	ВЫРАЗИТЬ(_Таблица.districtGuid КАК СТРОКА(36)) КАК districtGuid,
	|	ВЫРАЗИТЬ(_Таблица.regionGuid КАК СТРОКА(36)) КАК regionGuid,
	|	ВЫРАЗИТЬ(_Таблица.countryGuid КАК СТРОКА(36)) КАК countryGuid
	|ПОМЕСТИТЬ ВТаблицаВетис
	|ИЗ
	|	&ТаблицаВетис КАК _Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.ПометкаУдаления,
	|	_Таблица.Наименование,
	|	_Таблица.Представление,
	|	_Таблица.Region КАК Регион,
	|	_Таблица.District КАК Район,
	|	_Ветис.name КАК name,
	|	_Ветис.view КАК view,
	|	_Ветис.guid КАК guid,
	|	_Район.Ссылка КАК district,
	|	_Регион.Ссылка КАК region
	|ИЗ
	|	ВТаблицаВетис КАК _Ветис
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетисDistrict КАК _Район
	|		ПО _Ветис.districtGuid = _Район.guid
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетисRegion КАК _Регион
	|		ПО _Ветис.regionGuid = _Регион.guid
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВетисLocality КАК _Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			&Страна КАК Страна,
	|			&Регион КАК Регион,
	|			&Район КАК Район) КАК _Отбор
	|		ПО _Таблица.Country = _Отбор.Страна
	|//о1		И _Таблица.Region = _Отбор.Регион
	|//о2		И _Таблица.District = _Отбор.Район
	|		ПО _Ветис.guid = _Таблица.guid
	|ГДЕ
	|	ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	name";
	
	Запрос.УстановитьПараметр("Страна", пСтрана);
	Запрос.УстановитьПараметр("Регион", пРегион);
	Запрос.УстановитьПараметр("Район", пРайон);
	Запрос.УстановитьПараметр("ТаблицаВетис", _ТаблицаВетис);
	
	Если НЕ пРегион = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о1", "");
	КонецЕсли;
	
	Если НЕ пРайон = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//о2", "");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_контекст = "Синхронизация.Locality";
	
	Пока Выборка.Следующий() Цикл
		
		_Новый = Ложь;
		
		_ЕстьИзменения = Ложь;
		
		Если Выборка.guid = NULL Тогда
			Попытка
				Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			Исключение
				ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), _контекст);
			КонецПопытки;
			Продолжить;
			
		ИначеЕсли Выборка.Ссылка = NULL Тогда
			_Новый = Истина;
			
		Иначе
			_ЕстьИзменения = Ложь
			ИЛИ Выборка.ПометкаУдаления
			ИЛИ НЕ Выборка.Наименование = СокрЛП(Выборка.name)
			ИЛИ НЕ Выборка.Представление = СокрЛП(Выборка.view)
			ИЛИ НЕ Выборка.Регион = СокрЛП(Выборка.region)
			ИЛИ НЕ Выборка.Район = СокрЛП(Выборка.district);
			
		КонецЕсли;
		
		Если _ЕстьИзменения ИЛИ _Новый Тогда
			
			Если _Новый Тогда
				_Элемент = Справочники.ВетисLocality.СоздатьЭлемент();
			Иначе
				_Элемент = Выборка.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
			_Элемент.ПометкаУдаления = Ложь;
			_Элемент.guid         = Выборка.guid;
			_Элемент.уид          = Новый УникальныйИдентификатор(Выборка.guid);
			_Элемент.Наименование = СокрЛП(Выборка.name);
			_Элемент.view         = СокрЛП(Выборка.view);
			_Элемент.Country      = пСтрана;
			_Элемент.Region       = Выборка.region;
			_Элемент.District     = Выборка.district;
			
			Попытка
				_Элемент.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ProductChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Service = ?(Ветис.Версия_2_0(), ВетисProductService_2_0, ВетисProductService);
	
	_НачалоПериода = Ветис.Настройки_ГраницыЗапросов("GetProductChangesList");
	
	_НачалоПериода = ?(ЗначениеЗаполнено(_НачалоПериода), _НачалоПериода - 12*60*60, _НачалоПериода);
	
	_КонецПериода = ТекущаяДата();
	
	_контекст = "Синхронизация.Product";
	
	_актуальные = Новый Массив;
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока _Service.GetProductChangesListNext(_НачалоПериода, , _Выборка, _параметры, пОтказ, пОшибка) Цикл
		_Элемент = ВетисDictionaryСлой1с.Product(_Выборка.guid);
		Если ЗаписьАктуальна(_Выборка) Тогда
			_Объект = _Элемент.ПолучитьОбъект();
			_Объект.Заполнить(_Выборка);
			_актуальные.Добавить(_Объект.уид);
			Попытка
				_Объект.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		ИначеЕсли _актуальные.Найти(Новый УникальныйИдентификатор(_Выборка.guid)) = Неопределено Тогда
			Попытка
				Если НЕ _Элемент = Неопределено Тогда
					_Элемент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
				КонецЕсли;
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetProductChangesList", _КонецПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура SubProductChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
	_Service = ?(Ветис.Версия_2_0(), ВетисProductService_2_0, ВетисProductService);
	
	_НачалоПериода = Ветис.Настройки_ГраницыЗапросов("GetSubProductChangesList");
	
	_НачалоПериода = ?(ЗначениеЗаполнено(_НачалоПериода), _НачалоПериода - 12*60*60, _НачалоПериода);
	
	_КонецПериода = ТекущаяДата();
	
	_контекст = "Синхронизация.SubProduct";
	
	_актуальные = Новый Массив;
	
	_Выборка = Неопределено; _параметры = Неопределено;
	Пока _Service.GetSubProductChangesListNext(_НачалоПериода, , _Выборка, _параметры, пОтказ, пОшибка) Цикл
		_Элемент = ВетисDictionaryСлой1с.SubProduct(_Выборка.guid);
		Если ЗаписьАктуальна(_Выборка) Тогда
			_Объект = _Элемент.ПолучитьОбъект();
			_Объект.Заполнить(_Выборка);
			_актуальные.Добавить(_Объект.уид);
			Попытка
				_Объект.Записать();
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		ИначеЕсли _актуальные.Найти(Новый УникальныйИдентификатор(_Выборка.guid)) = Неопределено Тогда
			Попытка
				Если НЕ _Элемент = Неопределено Тогда
					_Элемент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
				КонецЕсли;
			Исключение
				пОтказ = Истина;
				пОшибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВетисОбщегоНазначения.ВывестиСообщение(пОшибка, _контекст);
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ пОтказ = Истина Тогда
		Ветис.Настройки_ГраницыЗапросов("GetSubProductChangesList", _КонецПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура ProductItemChanges(пОтказ = Ложь, пОшибка = "") Экспорт
	
КонецПроцедуры


Функция ЗаписьАктуальна(item)
//100	CREATED - Запись создана.
//101	CREATED_WHEN_QUENCH_VETCERTIFICATE - Запись создана путем гашения ВС (импорт).
//102	CREATED_WHEN_QUENCH_VETDOCUMENT - Запись создана путем гашения ВСД.
//103	CREATED_BY_OPERATION - Запись создана в результате производственной операции.
//110	CREATED_WHEN_MERGE - Запись создана в результате объединения двух или более других.
//120	CREATED_WHEN_SPLIT - Запись создана в результате разделения другой.
//200	UPDATED - В запись были внесены изменения.
//201	WITHDRAWN - Запись журнала аннулирована.
//202	UPDATED_WHEN_WRITINGOFF - Запись продукции изменена путём списания. Необязательно, чтобы продукция была списана полностью, может быть списана и часть объёма.
//230	UPDATED_WHEN_ATTACH - Запись была обновлена в результате присоединения другой.
//231	UPDATED_WHEN_ATTACH_AUTOMATIC - Запись была обновлена в результате присоединения другой.
//240	UPDATED_WHEN_FORK - Запись была обновлена в результате отделения от неё другой.
//250	RESTORED_AFTER_DELETE - Запись была восстановлена после удаления.
//300	MOVED - Запись была перемещена в другую группу (для иерархических справочников).
//400	DELETED - Запись была удалена.
//410	DELETED_WHEN_MERGE - Запись была удалена в результате объединения.
//420	DELETED_WHEN_SPLIT - Запись была удалена в результате разделения.
//430	DELETED_WHEN_ATTACH - Запись была удалена в результате присоединения.
	Возврат (item.status >= 100 И item.status < 200
		ИЛИ item.status = 200
		ИЛИ item.status = 202
		ИЛИ item.status = 230
		ИЛИ item.status = 231
		ИЛИ item.status = 240
		ИЛИ item.status = 250
		ИЛИ item.status = 300)
		И item.last
		И item.active;
		
КонецФункции
