

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Если МобильноеПриложениеСервер Тогда
		Элементы.ОтборПредприятие.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.ОтборХС.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		//Элементы.СписокВСДАннулировать.Видимость = Ложь;
		//Элементы.ГруппаОтборUuid.Видимость = Ложь;
	#КонецЕсли
	
	//СкладскойЖурналПоследние = Истина;
	
	НастроитьУсловноеОформление();
	
	Версия = Ветис.Версия();
	
	ОтборСписокВСДТип.Добавить(Перечисления.ВетисVetDocumentType.Транспортный,,Истина);
	ОтборСписокВСДТип.Добавить(Перечисления.ВетисVetDocumentType.Возвратный,,Истина);
	ОтборСписокВСДТип.Добавить(Перечисления.ВетисVetDocumentType.Производственный);
	
	ОтборСписокВСДТипИсх.Добавить(Перечисления.ВетисVetDocumentType.Транспортный,,Истина);
	ОтборСписокВСДТипИсх.Добавить(Перечисления.ВетисVetDocumentType.Возвратный,,Истина);
	ОтборСписокВСДТипИсх.Добавить(Перечисления.ВетисVetDocumentType.Производственный);
	
	ОтборСписокВСДСтатус.Добавить(Перечисления.ВетисVetDocumentStatus.Оформлен,,Истина);
	ОтборСписокВСДСтатус.Добавить(Перечисления.ВетисVetDocumentStatus.Погашен);
	ОтборСписокВСДСтатус.Добавить(Перечисления.ВетисVetDocumentStatus.Аннулирован);
	
	ОтборСписокВСДСтатусИсх.Добавить(Перечисления.ВетисVetDocumentStatus.Оформлен,,Истина);
	ОтборСписокВСДСтатусИсх.Добавить(Перечисления.ВетисVetDocumentStatus.Погашен);
	ОтборСписокВСДСтатусИсх.Добавить(Перечисления.ВетисVetDocumentStatus.Аннулирован);
	
	ОтборСписокВходящиеПартииСтатус.Добавить(Перечисления.ВетисVetDocumentStatus.Оформлен,,Истина);
	ОтборСписокВходящиеПартииСтатус.Добавить(Перечисления.ВетисVetDocumentStatus.Погашен);
	ОтборСписокВходящиеПартииСтатус.Добавить(Перечисления.ВетисVetDocumentStatus.Аннулирован);
	
	ОтборСписокТранспортныеПартииСтатус.Добавить(Перечисления.ВетисVetDocumentStatus.Оформлен,,Истина);
	ОтборСписокТранспортныеПартииСтатус.Добавить(Перечисления.ВетисVetDocumentStatus.Погашен,,Истина);
	ОтборСписокТранспортныеПартииСтатус.Добавить(Перечисления.ВетисVetDocumentStatus.Аннулирован);
	
	Элементы.ГруппаСкладскойЖурнал.Видимость = Ветис.РазрешенаОтладка();
	
	ОтборХС = ВетисПовтИсп.Настройки_ОсновнойХС();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	//Ветис.ИнициализироватьНастройкиХС(ОтборХС);
	
	Если НЕ ЗначениеЗаполнено(ОтборХС) Тогда
		ОтборХС = ВетисПовтИсп.Настройки_ОсновнойХС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		АвтоЗаголовок = Истина;
	#КонецЕсли
	
	Для каждого _Настройка Из СохраняемыеНастройки Цикл
		Если _Настройка.Представление = "ОтборСписокВСДСтатус" Тогда
			Для каждого _Элемент Из ОтборСписокВСДСтатус Цикл
				_Элемент.Пометка = НЕ _Настройка.Значение.Найти(_Элемент.Значение) = Неопределено;
			КонецЦикла;
		ИначеЕсли _Настройка.Представление = "ОтборСписокВСДСтатусИсх" Тогда
			Для каждого _Элемент Из ОтборСписокВСДСтатусИсх Цикл
				_Элемент.Пометка = НЕ _Настройка.Значение.Найти(_Элемент.Значение) = Неопределено;
			КонецЦикла;
		ИначеЕсли _Настройка.Представление = "ОтборСписокВходящиеПартииСтатус" Тогда
			Для каждого _Элемент Из ОтборСписокВходящиеПартииСтатус Цикл
				_Элемент.Пометка = НЕ _Настройка.Значение.Найти(_Элемент.Значение) = Неопределено;
			КонецЦикла;
		ИначеЕсли _Настройка.Представление = "ОтборСписокТранспортныеПартииСтатус" Тогда
			Для каждого _Элемент Из ОтборСписокТранспортныеПартииСтатус Цикл
				_Элемент.Пометка = НЕ _Настройка.Значение.Найти(_Элемент.Значение) = Неопределено;
			КонецЦикла;
		ИначеЕсли _Настройка.Представление = "ОтборСписокВСДТип" Тогда
			Для каждого _Элемент Из ОтборСписокВСДТип Цикл
				_Элемент.Пометка = НЕ _Настройка.Значение.Найти(_Элемент.Значение) = Неопределено;
			КонецЦикла;
		ИначеЕсли _Настройка.Представление = "ОтборСписокВСДТипИсх" Тогда
			Для каждого _Элемент Из ОтборСписокВСДТипИсх Цикл
				_Элемент.Пометка = НЕ _Настройка.Значение.Найти(_Элемент.Значение) = Неопределено;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ВетисВызовСервера.ТекущийХС(ОтборХС);
	
	ВетисВызовСервера.ТекущееПредприятие(ОтборПредприятие);
	
	ОбновитьОтборы();
	
	УстановитьВидимостьКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Параметр = ЭтаФорма.ИмяФормы Тогда
		//
	ИначеЕсли ИмяСобытия = "ВетисНастройки" Тогда
		Версия = ВетисВызовСервера.Версия();
		//Отладка = ВетисВызовСервера.РазрешенаОтладка();
		Элементы.ГруппаСкладскойЖурнал.Видимость = ВетисВызовСервера.РазрешенаОтладка();
	ИначеЕсли ИмяСобытия = "ВетисВерсия" Тогда
		Версия = ВетисВызовСервера.Версия();
	ИначеЕсли ИмяСобытия = "ВетисОтладка" Тогда
		//
	ИначеЕсли ИмяСобытия = "ВетисТестовый" Тогда
		//
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СохраняемыеНастройки.Очистить();
	
	СохраняемыеНастройки.Вставить(0, Новый Массив, "ОтборСписокВСДСтатус");
	Для каждого _Элемент Из ОтборСписокВСДСтатус Цикл
		Если _Элемент.Пометка Тогда
			СохраняемыеНастройки[0].Значение.Добавить(_Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	СохраняемыеНастройки.Вставить(0, Новый Массив, "ОтборСписокВСДСтатусИсх");
	Для каждого _Элемент Из ОтборСписокВСДСтатусИсх Цикл
		Если _Элемент.Пометка Тогда
			СохраняемыеНастройки[0].Значение.Добавить(_Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	СохраняемыеНастройки.Вставить(0, Новый Массив, "ОтборСписокВходящиеПартииСтатус");
	Для каждого _Элемент Из ОтборСписокВходящиеПартииСтатус Цикл
		Если _Элемент.Пометка Тогда
			СохраняемыеНастройки[0].Значение.Добавить(_Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	СохраняемыеНастройки.Вставить(0, Новый Массив, "ОтборСписокТранспортныеПартииСтатус");
	Для каждого _Элемент Из ОтборСписокТранспортныеПартииСтатус Цикл
		Если _Элемент.Пометка Тогда
			СохраняемыеНастройки[0].Значение.Добавить(_Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	СохраняемыеНастройки.Вставить(0, Новый Массив, "ОтборСписокВСДТип");
	Для каждого _Элемент Из ОтборСписокВСДТип Цикл
		Если _Элемент.Пометка Тогда
			СохраняемыеНастройки[0].Значение.Добавить(_Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	СохраняемыеНастройки.Вставить(0, Новый Массив, "ОтборСписокВСДТипИсх");
	Для каждого _Элемент Из ОтборСписокВСДТипИсх Цикл
		Если _Элемент.Пометка Тогда
			СохраняемыеНастройки[0].Значение.Добавить(_Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаЖурнал(Команда)
	
	ОткрытьФорму("РегистрСведений.ВетисЖурнал.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЖурналОпераций(Команда)
	
	ОткрытьФорму("РегистрСведений.ВетисЖурналОпераций.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройки(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ВетисНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНаправление(Команда)
	
	Направление = НЕ Направление;
	
	ОбновитьОтборы("ОтборНаправление");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПогасить(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("КомандаПогаситьОбработкаОповещения", ЭтаФорма), "Погасить выбранные?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Гашение входящих ВСД");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПогаситьОбработкаОповещения(Результат, Параметры) Экспорт
	
	Перем _Отказ, _Ошибка;
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	_список = Новый Массив;
	Для каждого _Ссылка Из Элементы.СписокВСД.ВыделенныеСтроки Цикл
		_список.Добавить(_Ссылка);
	КонецЦикла;
	
	КомандаПогаситьНаСервере(_список, _Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;
	
	Элементы.СписокВСД.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КомандаПогаситьНаСервере(пСсылка, пОтказ = Ложь, пОшибка = "")
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.Получатель КАК Настройка
	|ИЗ
	|	Документ.ВетисВетеринарноСопроводительныйДокумент КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И _Таблица.Проведен
	|	И _Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.ВетисVetDocumentStatus.Оформлен)
	|	И _Таблица.Ссылка В(&Ссылка)
	|	И ИСТИНА");
	
	Запрос.УстановитьПараметр("Ссылка", пСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_ТекущийПользователь = Ветис.ТекущийПользователь();
	
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ВетисОтложенныеОперации.Добавить(Выборка.Ссылка, "Погасить", Выборка.Настройка, _ТекущийПользователь);
	КонецЦикла;
	
	ВетисСинхронизация.ОтложенныеОперации(пОтказ, пОшибка, пСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьИзСервиса(Команда)
	
	Перем _Отказ, _Ошибка;
	
	Для каждого _Ссылка Из Элементы.СписокВСД.ВыделенныеСтроки Цикл
		КомандаЗаполнитьИзСервисаНаСервере(_Ссылка, _Отказ, _Ошибка);
	КонецЦикла;
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;;
	
	Элементы.СписокВСД.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура КомандаЗаполнитьИзСервисаНаСервере(пСсылка, пОтказ = Ложь, пОшибка = "")
	
	_Объект = пСсылка.ПолучитьОбъект();
	
	_vetDocument = ВетисMercuryApplicationsСлой1с.getVetDocumentByUuid(_Объект, пОтказ, пОшибка);
	
	Если пОтказ = Истина Тогда
		Возврат;
	ИначеЕсли НЕ пОтказ = Истина Тогда
		ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(_Объект, _vetDocument);
		_Объект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоискПредприятий(Команда)
	
	ОткрытьФорму("Обработка.ВетисУстановкаСоответствияСправочников.Форма.ФормаПредприятия");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоискХС(Команда)
	
	ОткрытьФорму("Обработка.ВетисУстановкаСоответствияСправочников.Форма.ФормаКонтрагенты");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИсходящиеАннулировать(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("КомандаИсходящиеАннулироватьОбработкаОповещения", ЭтаФорма), "Аннулировать выбранные?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Аннулирование исходящих ВСД");
	
КонецПроцедуры
	
&НаКлиенте
Процедура КомандаИсходящиеАннулироватьОбработкаОповещения(Результат, Параметры) Экспорт
	
	Перем _Отказ, _Ошибка;
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	_список = Новый Массив;
	Для каждого _Ссылка Из Элементы.СписокИсходящихВСД.ВыделенныеСтроки Цикл
		_список.Добавить(_Ссылка);
	КонецЦикла;
	
	КомандаИсходящиеАннулироватьНаСервере(_список, _Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;
	
	Элементы.СписокИсходящихВСД.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КомандаИсходящиеАннулироватьНаСервере(пСсылка, пОтказ = Ложь, пОшибка = "")
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.Отправитель КАК Настройка
	|ИЗ
	|	Документ.ВетисВетеринарноСопроводительныйДокумент КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И _Таблица.Проведен
	|	И _Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.ВетисVetDocumentStatus.Оформлен)
	|	И _Таблица.Ссылка В(&Ссылка)
	|	И ИСТИНА");
	
	Запрос.УстановитьПараметр("Ссылка", пСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_ТекущийПользователь = Ветис.ТекущийПользователь();
	
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ВетисОтложенныеОперации.Добавить(Выборка.Ссылка, "Аннулировать", Выборка.Настройка, _ТекущийПользователь, Новый Структура("Причина", "ошибка оформления"));
	КонецЦикла;
	
	ВетисСинхронизация.ОтложенныеОперации(пОтказ, пОшибка, пСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтборСписокВСДТип(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВСДВходящие Тогда
		ОтборСписокВСДТип.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ОтборСписокВСДТипОбработкаОповещения", ЭтаФорма, "ОтборСписокВСДТип"));
	Иначе
		ОтборСписокВСДТипИсх.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ОтборСписокВСДТипОбработкаОповещения", ЭтаФорма, "ОтборСписокВСДТипИсх"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСписокВСДТипОбработкаОповещения(пСписок, пПараметры) Экспорт
	
	Если НЕ пСписок = Неопределено Тогда
		ОбновитьОтборы(пПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтборСписокВСДСтатус(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВСДВходящие Тогда
		ОтборСписокВСДСтатус.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ОтборСписокВСДСтатусОбработкаОповещения", ЭтаФорма, "ОтборСписокВСДСтатус"));
	Иначе
		ОтборСписокВСДСтатусИсх.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ОтборСписокВСДСтатусОбработкаОповещения", ЭтаФорма, "ОтборСписокВСДСтатусИсх"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСписокВСДСтатусОбработкаОповещения(пСписок, пПараметры) Экспорт
	
	Если НЕ пСписок = Неопределено Тогда
		ОбновитьОтборы(пПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтборСписокВходящиеПартииСтатус(Команда)
	
	ОтборСписокВходящиеПартииСтатус.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ОтборСписокВходящиеПартииСтатусОбработкаОповещения", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСписокВходящиеПартииСтатусОбработкаОповещения(пСписок, пПараметры) Экспорт
	
	Если НЕ пСписок = Неопределено Тогда
		ОбновитьОтборы("ОтборСписокВходящиеПартииСтатус");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтборСписокТранспортныеПартииСтатус(Команда)
	
	ОтборСписокТранспортныеПартииСтатус.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ОтборСписокТранспортныеПартииСтатусОбработкаОповещения", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСписокТранспортныеПартииСтатусОбработкаОповещения(пСписок, пПараметры) Экспорт
	
	Если НЕ пСписок = Неопределено Тогда
		ОбновитьОтборы("ОтборСписокТранспортныеПартииСтатус");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТранзакцияОтправить(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("КомандаТранзакцияОтправитьОбработкаОповещения", ЭтаФорма), "Отправить выбранные?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Отправка исходящих ВСД");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТранзакцияОтправитьОбработкаОповещения(Результат, Параметры) Экспорт
	
	Перем _Отказ, _Ошибка;
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	_список = Новый Массив;
	Для каждого _Ссылка Из Элементы.СписокТранспортныеПартии.ВыделенныеСтроки Цикл
		_список.Добавить(_Ссылка);
	КонецЦикла;
	
	КомандаТранзакцияОтправитьНаСервере(_список, _Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;
	
	Элементы.СписокТранспортныеПартии.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КомандаТранзакцияОтправитьНаСервере(пСсылка, пОтказ = Ложь, пОшибка = "")
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.Отправитель КАК Настройка
	|ИЗ
	|	Документ.ВетисТранспортнаяПартия КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И _Таблица.Проведен
	|	И (_Таблица.СтатусТранзакции = ЗНАЧЕНИЕ(Перечисление.ВетисСтатусТранзакции.ПустаяСсылка)
	|			ИЛИ _Таблица.СтатусТранзакции = ЗНАЧЕНИЕ(Перечисление.ВетисСтатусТранзакции.НеОтправлена))
	|	И _Таблица.Ссылка В(&Ссылка)
	|	И ИСТИНА");
	
	Запрос.УстановитьПараметр("Ссылка", пСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_ТекущийПользователь = Ветис.ТекущийПользователь();
	
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ВетисОтложенныеОперации.Добавить(Выборка.Ссылка, "Отправить", Выборка.Настройка, _ТекущийПользователь);
	КонецЦикла;
	
	ВетисСинхронизация.ОтложенныеОперации(пОтказ, пОшибка, пСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТранзакцияАннулировать(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("КомандаТранзакцияАннулироватьОбработкаОповещения", ЭтаФорма), "Аннулировать выбранные?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Аннулирование исходящих ВСД");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТранзакцияАннулироватьОбработкаОповещения(Результат, Параметры) Экспорт
	
	Перем _Отказ, _Ошибка;
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	_список = Новый Массив;
	Для каждого _Ссылка Из Элементы.СписокТранспортныеПартии.ВыделенныеСтроки Цикл
		_список.Добавить(_Ссылка);
	КонецЦикла;
	
	КомандаТранзакцияАннулироватьНаСервере(_список, _Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;
	
	Элементы.СписокТранспортныеПартии.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КомандаТранзакцияАннулироватьНаСервере(пСсылка, пОтказ = Ложь, пОшибка = "")
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_Таблица.Ссылка,
	|	_Таблица.Отправитель КАК Настройка
	|ИЗ
	|	Документ.ВетисТранспортнаяПартия КАК _Таблица
	|ГДЕ
	|	ИСТИНА
	|	И _Таблица.Проведен
	|	И _Таблица.СтатусТранзакции = ЗНАЧЕНИЕ(Перечисление.ВетисСтатусТранзакции.Отправлена)
	|	И _Таблица.Ссылка В(&Ссылка)
	|	И ИСТИНА");
	
	Запрос.УстановитьПараметр("Ссылка", пСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	_ТекущийПользователь = Ветис.ТекущийПользователь();
	
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ВетисОтложенныеОперации.Добавить(Выборка.Ссылка, "Аннулировать", Выборка.Настройка, _ТекущийПользователь, Новый Структура("Причина", "ошибка оформления"));
	КонецЦикла;
	
	ВетисСинхронизация.ОтложенныеОперации(пОтказ, пОшибка, пСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТранзакцияПечать(Команда)
	
	Перем _Отказ, _Ошибка;
	
	_Документ = КомандаТранзакцияПечатьНаСервере(_Отказ, _Ошибка);
	
	ОткрытьФорму("ОбщаяФорма.ВетисПечать", Новый Структура("Документ", _Документ), ЭтаФорма);
	
	Элементы.СписокТранспортныеПартии.Обновить();
КонецПроцедуры

&НаСервере
Функция КомандаТранзакцияПечатьНаСервере(пОтказ = Ложь, пОшибка = "")
	
	_Документ = Новый ТабличныйДокумент;
	Для каждого _Ссылка Из Элементы.СписокТранспортныеПартии.ВыделенныеСтроки Цикл
		
		Если _Документ.ВысотаТаблицы > 0 Тогда
			_Документ.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		//_Документ = КомандаТранзакцияПечатьНаСервере(_Ссылка, _Отказ, _Ошибка);
		Для каждого _Строка Из _Ссылка.ПолучитьОбъект().Партии Цикл
			_Документ.Вывести(ПолучитьДокументНаПечать(_Строка.ВСД));
		КонецЦикла;
		
		//Если _Отказ = Истина Тогда
		//	Сообщить(_Ошибка);
		//	Возврат ;
		//КонецЕсли;
	КонецЦикла;
	
	//Для каждого _Строка Из пСсылка.ПолучитьОбъект().Партии Цикл
	//	_Документ.Вывести(ПолучитьДокументНаПечать(_Строка.ВСД));
	//КонецЦикла;
	
	Возврат _Документ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДокументНаПечать(пСсылка)
	
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|	_Таблица.uuid,
	//|	_Таблица.Дата,
	//|	_Таблица.НомерТТН,
	//|	_Таблица.ДатаТТН,
	//|	_Таблица.Форма,
	//|	_Таблица.Статус,
	//|	_Таблица.Отправитель.Наименование КАК Отправитель,
	//|	_Таблица.Отправитель.inn КАК ОтправительИНН,
	//|	_Таблица.Получатель.fullName КАК Получатель,
	//|	_Таблица.Получатель.inn КАК ПолучательИНН,
	//|	_Таблица.ПолучательПредприятие.Наименование КАК ПолучательПредприятие,
	//|	_Таблица.ПолучательПредприятие.addressView КАК ПолучательПредприятиеАдрес,
	//|	_Таблица.ProductItemName,
	//|	_Таблица.Количество,
	//|	_Таблица.ДатаВыработки,
	//|	_Таблица.СрокГодности,
	//|	_Таблица.Производители.(
	//|		Предприятие.Наименование КАК Наименование,
	//|		Наименование КАК Наименование2,
	//|		Предприятие.addressView КАК Адрес
	//|	) Производители
	//|ИЗ
	//|	Документ.ВетисВетеринарноСопроводительныйДокумент КАК _Таблица
	//|ГДЕ
	//|	_Таблица.Ссылка = &Ссылка");
	//
	//Запрос.УстановитьПараметр("Ссылка", пСсылка);
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//_текст = "";
	//
	//Если Выборка.Следующий() Тогда
	//	_текст = _текст + ?(_текст="","",Символы.ПС) + "" + Выборка.Форма + ": № "+Выборка.НомерТТН+" от " + Формат(Выборка.Дата) + " МСК+2 ("+Выборка.Статус+")";
	//	_текст = _текст + ?(_текст="","",Символы.ПС) + "Фирма-отправитель: " + Выборка.Отправитель + ", ИНН: " + Выборка.ОтправительИНН + ", ТТН: № " + Выборка.НомерТТН + " от " + Формат(Выборка.ДатаТТН, "ДЛФ=D") + " г";
	//	_текст = _текст + ?(_текст="","",Символы.ПС) + "Фирма-получатель: " + Выборка.Получатель + ", ИНН: " + Выборка.ПолучательИНН;
	//	_текст = _текст + ?(_текст="","",Символы.ПС) + "Предприятие-получатель: " + Выборка.ПолучательПредприятие + " (" + Выборка.ПолучательПредприятиеАдрес + ")";
	//	_текст = _текст + ?(_текст="","",Символы.ПС) + "Продукция: " + Выборка.ProductItemName + ", " + Выборка.Количество + " ";
	//	_производители = "";
	//	ВыборкаПр = Выборка.Производители.Выбрать();
	//	Пока ВыборкаПр.Следующий() Цикл
	//		Если ЗначениеЗаполнено(ВыборкаПр.Наименование) Тогда
	//			_Наименование = ВыборкаПр.Наименование;
	//			_Адрес = ВыборкаПр.Адрес;
	//		Иначе
	//			_Наименование = ВыборкаПр.Наименование2;
	//			_Адрес = "";
	//		КонецЕсли;
	//		_производители = _производители + ?(_производители="",""," ,") + _Наименование + ?(_Адрес = "", "", " (" + _Адрес + ")");
	//	КонецЦикла;
	//	_текст = _текст + ?(_текст="","",Символы.ПС) + "Выработана: " + Выборка.ДатаВыработки + " ," + _производители;
	//КонецЕсли;
	
	
	_Документ = ПолучитьОбщийМакет("ВСДКратко");
	
	//_Документ.Область(2,4).Текст = _текст;
	//
	//_Строка = "https://mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid=" + Выборка.uuid;
	//
	//ДанныеQRКода = ВетисОбщегоНазначения.ПолучитьДвоичныеДанныеQR(_Строка, 0, 160);
	//
	//Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
	//	КартинкаQRКода = Новый Картинка(ДанныеQRКода);
	//	_Документ.Рисунки.QR.Картинка = КартинкаQRКода;
	//КонецЕсли;
	
	Возврат _Документ;
	
КонецФункции

&НаКлиенте
Процедура КомандаИсходящиеПерезаписать(Команда)
	
	КомандаИсходящиеПерезаписатьНаСервере();
	
	Элементы.СписокИсходящихВСД.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура КомандаИсходящиеПерезаписатьНаСервере()
	
	Для каждого _Ссылка Из Элементы.СписокИсходящихВСД.ВыделенныеСтроки Цикл
		
		_Объект = _Ссылка.ПолучитьОбъект();
		_Объект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьОтборы(пИмяСобытия = Неопределено)
	
	Если пИмяСобытия = "ОтборСписокВСДТип" ИЛИ пИмяСобытия = Неопределено Тогда
		
		_заголовок = "";
		
		_список = Новый Массив;
		_список.Добавить(ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.ПустаяСсылка"));
		
		Для каждого _элемент Из ОтборСписокВСДТип Цикл
			Если _элемент.Пометка Тогда
				_список.Добавить(_элемент.Значение);
				_заголовок = _заголовок + "," + Строка(_элемент.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокВСД.Отбор, "ТипВСД", _список, "ВСписке");
		
		Элементы.СписокВСДОтборТип.Заголовок = Сред(_заголовок, 2);
	КонецЕсли;
	
	Если пИмяСобытия = "ОтборСписокВСДТипИсх" ИЛИ пИмяСобытия = Неопределено Тогда
		
		_заголовок = "";
		
		_список = Новый Массив;
		_список.Добавить(ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.ПустаяСсылка"));
		
		Для каждого _элемент Из ОтборСписокВСДТипИсх Цикл
			Если _элемент.Пометка Тогда
				_список.Добавить(_элемент.Значение);
				_заголовок = _заголовок + "," + Строка(_элемент.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокИсходящихВСД.Отбор, "ТипВСД", _список, "ВСписке");
		
		Элементы.СписокИсходящиеОтборТип.Заголовок = Сред(_заголовок, 2);
	КонецЕсли;
	
	
	Если пИмяСобытия = "ОтборСписокВСДСтатус" ИЛИ пИмяСобытия = Неопределено Тогда
		
		_заголовок = "";
		
		_список = Новый Массив;
		_список.Добавить(ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.ПустаяСсылка"));
		
		Для каждого _элемент Из ОтборСписокВСДСтатус Цикл
			Если _элемент.Пометка Тогда
				_список.Добавить(_элемент.Значение);
				_заголовок = _заголовок + "," + Строка(_элемент.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокВСД.Отбор, "Статус", _список, "ВСписке");
		
		Элементы.СписокВСДОтборСтатус.Заголовок = Сред(_заголовок, 2);
	КонецЕсли;
	
	Если пИмяСобытия = "ОтборСписокВСДСтатусИсх" ИЛИ пИмяСобытия = Неопределено Тогда
		
		_заголовок = "";
		
		_список = Новый Массив;
		_список.Добавить(ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.ПустаяСсылка"));
		
		Для каждого _элемент Из ОтборСписокВСДСтатусИсх Цикл
			Если _элемент.Пометка Тогда
				_список.Добавить(_элемент.Значение);
				_заголовок = _заголовок + "," + Строка(_элемент.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокИсходящихВСД.Отбор, "Статус", _список, "ВСписке");
		
		Элементы.СписокИсходящиеОтборСтатус.Заголовок = Сред(_заголовок, 2);
	КонецЕсли;
	
	
	Если пИмяСобытия = "ОтборСписокВходящиеПартииСтатус" ИЛИ пИмяСобытия = Неопределено Тогда
		
		_заголовок = "";
		
		_список = Новый Массив;
		_список.Добавить(ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.ПустаяСсылка"));
		
		Для каждого _элемент Из ОтборСписокВходящиеПартииСтатус Цикл
			Если _элемент.Пометка Тогда
				_список.Добавить(_элемент.Значение);
				_заголовок = _заголовок + "," + Строка(_элемент.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокВходящиеПартииПоДокументам.Отбор, "Статус", _список, "ВСписке");
		
		Элементы.СписокВходящиеПартииПоДокументамОтборСтатус.Заголовок = Сред(_заголовок, 2);
	КонецЕсли;
	
	Если пИмяСобытия = "ОтборСписокТранспортныеПартииСтатус" ИЛИ пИмяСобытия = Неопределено Тогда
		
		_заголовок = "";
		
		_список = Новый Массив;
		_список.Добавить(ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.ПустаяСсылка"));
		
		Для каждого _элемент Из ОтборСписокТранспортныеПартииСтатус Цикл
			Если _элемент.Пометка Тогда
				_список.Добавить(_элемент.Значение);
				_заголовок = _заголовок + "," + Строка(_элемент.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокТранспортныеПартии.Отбор, "Статус", _список, "ВСписке");
		
		Элементы.СписокТранспортныеПартииОтборСтатус.Заголовок = Сред(_заголовок, 2);
	КонецЕсли;
	
	
	Если пИмяСобытия = "ОтборХСПредприятие" ИЛИ пИмяСобытия = Неопределено Тогда
		
		_ОтборПредприятие = ВетисВызовСервера.СписокОбъединенных(ОтборПредприятие);
		
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокСкладскойЖурнал.Отбор, "BusinessEntity", ОтборХС);
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокСкладскойЖурнал.Отбор, "Enterprise", ОтборПредприятие);
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокСкладскойЖурнал.Отбор, "last", Истина);
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокСкладскойЖурнал.Отбор, "active", Истина);
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокСкладскойЖурнал.Отбор, "volume", 0, "Больше");
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокСкладскойЖурнал.Отбор, "status", ПредопределенноеЗначение("Перечисление.ВетисVersionStatus.WITHDRAWN"), "НеРавно");
		
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокТранспортныеПартии.Отбор, "Отправитель", ОтборХС);
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокТранспортныеПартии.Отбор, "ОтправительПредприятие", _ОтборПредприятие, "ВСписке");
		
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокВходящиеПартииПоДокументам.Отбор, "Получатель", ОтборХС);
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокВходящиеПартииПоДокументам.Отбор, "ПолучательПредприятие", _ОтборПредприятие, "ВСписке");
		
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокВСД.Отбор, "Получатель", ОтборХС);
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокВСД.Отбор, "ПолучательПредприятие", _ОтборПредприятие, "ВСписке");
		
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокИсходящихВСД.Отбор, "Отправитель", ОтборХС);
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокИсходящихВСД.Отбор, "ОтправительПредприятие", _ОтборПредприятие, "ВСписке");
		
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокИнвентаризация.Отбор, "ХС", ОтборХС);
		ВетисОбщегоНазначенияКлиентСервер.ДобавитьОтбор(СписокИнвентаризация.Отбор, "Предприятие", _ОтборПредприятие, "ВСписке");
	КонецЕсли;
	
	
КонецПроцедуры


&НаКлиенте
Процедура ОтборХСПриИзменении(Элемент)
	
	ВетисВызовСервера.ТекущийХС(ОтборХС);
	
	ОбновитьОтборы("ОтборХСПредприятие");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПредприятиеПриИзменении(Элемент)
	
	ВетисВызовСервера.ТекущееПредприятие(ОтборПредприятие);
	
	ОбновитьОтборы("ОтборХСПредприятие");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПредприятиеСвязь Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ОтборХС) Тогда
			ОткрытьФорму("Справочник.ВетисEnterprise.ФормаВыбора", Новый Структура("Ключ, BusinessEntity", ОтборПредприятие, ОтборХС),,,,,Новый ОписаниеОповещения("ОтборПредприятиеОбработкаОповещения",ЭтаФорма));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПредприятиеОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		ОтборПредприятие = Результат;
		ВетисВызовСервера.ТекущееПредприятие(ОтборПредприятие);
		ОбновитьОтборы("ОтборХСПредприятие");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеСвязьНажатие(Элемент)
	
	ПредприятиеСвязь = НЕ ПредприятиеСвязь;
	
	УстановитьВидимостьКлиент("ПредприятиеСвязь");
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьВидимостьКлиент(пИмяСобытия = Неопределено)
	
	Если пИмяСобытия = "ПредприятиеСвязь" ИЛИ пИмяСобытия = Неопределено Тогда
		Элементы.ПредприятиеСвязь.Подсказка = ?(ПредприятиеСвязь, "с учетом связи", "без учета связи");
		Элементы.ПредприятиеСвязь.Картинка = ?(ПредприятиеСвязь, БиблиотекаКартинок.ВетисЕстьСвязь, БиблиотекаКартинок.ВетисНетСвязи);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура НастроитьУсловноеОформление()
	
	НастроитьУсловноеОформлениеДобавить(Элементы.СписокВСД, Новый Цвет(255, 243, 214), "Оформлен", "Транспортный");
	НастроитьУсловноеОформлениеДобавить(Элементы.СписокВСД, Новый Цвет(204, 255, 255), "Оформлен", "Возвратный");
	НастроитьУсловноеОформлениеДобавить(Элементы.СписокВСД, WebЦвета.Розовый, "Аннулирован");
	НастроитьУсловноеОформлениеДобавить(Элементы.СписокВСД, Новый Цвет(204, 255, 204), "Погашен");
	
	НастроитьУсловноеОформлениеДобавить(Элементы.СписокИсходящихВСД, Новый Цвет(255, 243, 214), "Оформлен", "Транспортный");
	НастроитьУсловноеОформлениеДобавить(Элементы.СписокИсходящихВСД, Новый Цвет(204, 255, 255), "Оформлен", "Возвратный");
	НастроитьУсловноеОформлениеДобавить(Элементы.СписокИсходящихВСД, WebЦвета.Розовый, "Аннулирован");
	НастроитьУсловноеОформлениеДобавить(Элементы.СписокИсходящихВСД, Новый Цвет(204, 255, 204), "Погашен");
	
	НастроитьУсловноеОформлениеДобавить(Элементы.СписокТранспортныеПартии, Новый Цвет(255, 243, 214), "Оформлен");
	НастроитьУсловноеОформлениеДобавить(Элементы.СписокТранспортныеПартии, WebЦвета.Розовый, "Аннулирован");
	НастроитьУсловноеОформлениеДобавить(Элементы.СписокТранспортныеПартии, Новый Цвет(204, 255, 204), "Погашен");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьУсловноеОформлениеДобавить(пЭлемент, пЦвет, пСтатус = Неопределено, пТип = Неопределено)
	
	Если пЭлемент = Элементы.СписокВСД ИЛИ пЭлемент = Элементы.СписокИсходящихВСД Тогда
		_уо = УсловноеОформление.Элементы.Добавить();
		_уо.Использование = Истина;
		_уо.Оформление.УстановитьЗначениеПараметра("ЦветФона", пЦвет);
		
		Если НЕ пСтатус = Неопределено Тогда
			_отбор = _уо.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			_отбор.Использование = Истина;
			_отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(пЭлемент.Имя+".Статус");
			_отбор.ПравоеЗначение = Перечисления.ВетисVetDocumentStatus[пСтатус];
		КонецЕсли;
		
		Если НЕ пТип = Неопределено Тогда
			_отбор = _уо.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			_отбор.Использование = Истина;
			_отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(пЭлемент.Имя+".ТипВСД");
			_отбор.ПравоеЗначение = Перечисления.ВетисVetDocumentType[пТип];
		КонецЕсли;
		
		НастроитьУсловноеОформлениеДобавитьПоле(_уо, пЭлемент);
		
		//Если пЭлемент = Элементы.СписокИсходящихВСД Тогда
		//	_уо = УсловноеОформление.Элементы.Добавить();
		//	_уо.Использование = Истина;
		//	_уо.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
		//	_отбор = _уо.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//	_отбор.Использование = Истина;
		//	_отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(пЭлемент.Имя+".Транзакция");
		//	_отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		//	НастроитьУсловноеОформлениеДобавитьПоле(_уо, пЭлемент);
		//КонецЕсли;
		
	ИначеЕсли пЭлемент = Элементы.СписокТранспортныеПартии Тогда
		_уо = УсловноеОформление.Элементы.Добавить();
		_уо.Использование = Истина;
		_уо.Оформление.УстановитьЗначениеПараметра("ЦветФона", пЦвет);
		
		Если НЕ пСтатус = Неопределено Тогда
			_отбор = _уо.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			_отбор.Использование = Истина;
			_отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(пЭлемент.Имя+".Статус");
			_отбор.ПравоеЗначение = Перечисления.ВетисVetDocumentStatus[пСтатус];
			//_отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(пЭлемент.Имя+".СтатусТранзакции");
			//_отбор.ПравоеЗначение = Перечисления.ВетисСтатусТранзакции[пСтатус];
		КонецЕсли;
		
		НастроитьУсловноеОформлениеДобавитьПоле(_уо, пЭлемент);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьУсловноеОформлениеДобавитьПоле(пУсловноеОформление, пГруппа)
	
	Для каждого _Элемент Из пГруппа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(_Элемент) = Тип("ГруппаФормы") Тогда
			НастроитьУсловноеОформлениеДобавитьПоле(пУсловноеОформление, _Элемент);
		Иначе
			_поле = пУсловноеОформление.Поля.Элементы.Добавить();
			_поле.Использование = Истина;
			_поле.Поле = Новый ПолеКомпоновкиДанных(_Элемент.Имя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КомандаЗаписатьСЖНаСервере(пСписок)
	Для каждого _Ссылка Из пСписок Цикл
		_Ссылка.ПолучитьОбъект().Записать();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьСЖ(Команда)
	_Список = Новый Массив;
	Для каждого _ТекСтрока Из Элементы.СписокСкладскойЖурнал.ВыделенныеСтроки Цикл
		_Список.Добавить(_ТекСтрока);
	КонецЦикла;
	КомандаЗаписатьСЖНаСервере(_Список);
КонецПроцедуры

&НаСервере
Процедура КомандаТранзакцияЗаписатьНаСервере(пСписок)
	Для каждого _Ссылка Из пСписок Цикл
		Если ВетисОбщегоНазначения.ЗначениеРеквизита(_Ссылка, "Проведен") Тогда
			_Ссылка.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КомандаТранзакцияЗаписать(Команда)
	_Список = Новый Массив;
	Для каждого _ТекСтрока Из Элементы.СписокТранспортныеПартии.ВыделенныеСтроки Цикл
		_Список.Добавить(_ТекСтрока);
	КонецЦикла;
	КомандаТранзакцияЗаписатьНаСервере(_Список);
КонецПроцедуры
