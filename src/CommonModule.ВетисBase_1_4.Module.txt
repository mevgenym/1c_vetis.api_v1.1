
// тип, описывающий параметры запрашиваемого у сервиса списка объектов
Функция ListOptions(count = Неопределено, offset = Неопределено) Экспорт
	
	_Объект = Создать("ListOptions");
	
	_Объект.count = ?(count = Неопределено, Ветис.Настройки_КоличествоОбъектовВСписке(), count);
	_Объект.offset = ?(offset = Неопределено, 0, offset);
	
	Возврат _Объект;
	
КонецФункции

// тип, описывающий дату и время
// преобразует дату 1с в xd и обратно
Функция ComplexDate(пОбъект, пЧас = Ложь) Экспорт
	
	Перем _Объект;
	
	Если ТипЗнч(пОбъект) = Тип("Дата") Тогда
		
		Если пЧас = Ложь Тогда
			_Дата = пОбъект;
		Иначе
			_Дата = Ветис.ВремяСервиса(пОбъект);
		КонецЕсли;
		
		_Объект = Создать("ComplexDate");
		
		_Объект.year  = Год(_Дата);
		_Объект.month = Месяц(_Дата);
		_Объект.day   = День(_Дата);
		
		Если пЧас = Истина Тогда
			_Объект.hour   = Час(_Дата);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(пОбъект) = Тип("ОбъектXDTO") Тогда
		
		_свойства = пОбъект.Свойства();
		
		_гггг = ?(_свойства.Получить("year") = Неопределено ИЛИ пОбъект.year = Неопределено, 1, Число(пОбъект.year));
		_мм = ?(_свойства.Получить("month") = Неопределено ИЛИ пОбъект.month = Неопределено, 1, Число(пОбъект.month));
		_дд = ?(_свойства.Получить("day") = Неопределено ИЛИ пОбъект.day = Неопределено, 1, Число(пОбъект.day));
		
		_чч = ?(_свойства.Получить("hour") = Неопределено ИЛИ пОбъект.hour = Неопределено, Неопределено, Число(пОбъект.hour));
		
		Если _чч = Неопределено Тогда
			_Объект = Дата(_гггг, _мм, _дд);
		Иначе
			_Объект = Дата(_гггг, _мм, _дд, _чч, 0, 0);
			_Объект = Ветис.ВремяМестное(_Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий интервал дат. 
//Параметры:
// beginDate - Начальная дата интервала xs:dateTime
// endDate - Конечная дата интервала xs:dateTime
Функция DateInterval(beginDate = Неопределено, endDate = Неопределено) Экспорт
	
	_Объект = Создать("DateInterval");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, beginDate, "beginDate", "Ветис.ВремяСервиса", Дата(1,1,1));// xs:dateTime
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, endDate, "endDate", "Ветис.ВремяСервиса");// xs:dateTime
	
	Возврат _Объект;
	
КонецФункции

// тип, описывающий тип операции на изменение реестра
Функция RegisterModificationType(type) Экспорт
	
	Если      type = 1 Тогда
		Возврат ВетисКонстанты.RegisterModificationType_FIND_OR_CREATE();
	ИначеЕсли type = 2 Тогда
		Возврат ВетисКонстанты.RegisterModificationType_FIND_OR_CREATE();
	ИначеЕсли type = 3 Тогда
		Возврат ВетисКонстанты.RegisterModificationType_UPDATE();
	ИначеЕсли type = 4 Тогда
		Возврат ВетисКонстанты.RegisterModificationType_DELETE();
	ИначеЕсли type = 5 Тогда
		Возврат ВетисКонстанты.RegisterModificationType_MERGE();
	ИначеЕсли type = 6 Тогда
		Возврат ВетисКонстанты.RegisterModificationType_ATTACH();
	ИначеЕсли type = 7 Тогда
		Возврат ВетисКонстанты.RegisterModificationType_SPLIT();
	ИначеЕсли type = 8 Тогда
		Возврат ВетисКонстанты.RegisterModificationType_FORK();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


Функция Создать(пИмя, пФабрика = Неопределено) Экспорт
	
	Возврат ВетисОбщегоНазначения.Создать(пИмя, URI(), пФабрика);
	
КонецФункции

Функция ServiceURI() Экспорт
	
	Возврат "http://api.vetrf.ru/schema/cdm/base/ws-definitions";
	
КонецФункции

Функция URI() Экспорт
	
	Возврат "http://api.vetrf.ru/schema/cdm/base";
	
КонецФункции

