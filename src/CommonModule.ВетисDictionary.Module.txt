
Функция ActivityLocationList(BusinessMember) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ActivityLocationList_2_0(BusinessMember);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ActivityLocationList_2_0(BusinessMember);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция ActivityLocationList_2_0(BusinessMember)
	
	_Объект = Создать("ActivityLocationList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, BusinessMember, "businessMember");
	
	Возврат _Объект;
	
КонецФункции

Функция Address(addressView = Неопределено, countryGuid = Неопределено, regionGuid = Неопределено, districtGuid = Неопределено, localityGuid = Неопределено, streetGuid = Неопределено, house = Неопределено, building = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат Address_2_0(addressView, countryGuid, regionGuid, districtGuid, localityGuid, streetGuid, house, building);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат Address_2_0(addressView, countryGuid, regionGuid, districtGuid, localityGuid, streetGuid, house, building);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат Address_1_4(addressView, countryGuid, regionGuid, districtGuid, localityGuid, streetGuid, house, building);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция Address_2_0(addressView = Неопределено, countryGuid = Неопределено, regionGuid = Неопределено, districtGuid = Неопределено, localityGuid = Неопределено, streetGuid = Неопределено, house = Неопределено, building = Неопределено)
	
	_Объект = Создать("Address");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Country(countryGuid), "country");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Region(regionGuid), "region");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, District(districtGuid), "district");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Locality(localityGuid), "locality");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Street(streetGuid), "street");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, house, "house");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, building, "building");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, addressView, "addressView");
	
	Возврат _Объект;
	
КонецФункции
Функция Address_1_4(addressView = Неопределено, countryGuid = Неопределено, regionGuid = Неопределено, districtGuid = Неопределено, localityGuid = Неопределено, streetGuid = Неопределено, house = Неопределено, building = Неопределено)
	
	_Объект = Создать("Address", "ikar");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Country(countryGuid), "country");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Region(regionGuid), "region");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, District(districtGuid), "district");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Locality(localityGuid), "locality");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Street(streetGuid), "street");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, house, "house");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, building, "building");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, addressView, "addressView");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий заболевание.
//Параметры:
// name - Наименование заболевания
Функция AnimalDisease(guid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат AnimalDisease_2_0(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат AnimalDisease_2_0(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция AnimalDisease_2_0(guid = Неопределено)
	
	_Объект = Создать("AnimalDisease");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid, "guid");
	
	Возврат _Объект;
	
КонецФункции

//тип, описывающий хозяйствующий субъект (ХС)
// Параметры:
//  guid - Строка - собственно guid
//       - Структура - структура со значениями свойств
Функция BusinessEntity(guid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат BusinessEntity_2_0(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат BusinessEntity_2_0(guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат BusinessEntity_1_4(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция BusinessEntity_2_0(guid = Неопределено)
	
	_Объект = Создать("BusinessEntity");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции
Функция BusinessEntity_1_4(guid = Неопределено)
	
	_Объект = Создать("BusinessEntity", "enterprise");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

//тип, описывающий связку хозяйствующего субъекта и площадки (поднадзорного объекта)
Функция BusinessMember(businessEntityGuid, enterpriseGuid, globalID = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат BusinessMember_2_0(businessEntityGuid, enterpriseGuid, globalID);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат BusinessMember_2_0(businessEntityGuid, enterpriseGuid, globalID);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат BusinessMember_1_4(businessEntityGuid, enterpriseGuid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция BusinessMember_2_0(businessEntityGuid, enterpriseGuid, globalID = Неопределено)
	
	_Объект = Создать("BusinessMember");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, BusinessEntity(businessEntityGuid), "businessEntity");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Enterprise(enterpriseGuid), "enterprise");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, globalID, "globalID");
	
	Возврат _Объект;
	
КонецФункции
Функция BusinessMember_1_4(businessEntityGuid, enterpriseGuid, globalID = Неопределено)
	
	_Объект = Создать("BusinessMember", "enterprise");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, BusinessEntity(businessEntityGuid), "businessEntity");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Enterprise(enterpriseGuid), "enterprise");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, globalID, "globalID");
	
	Возврат _Объект;
	
КонецФункции

Функция ComplexDate(Object, Day = Ложь, Hour = Ложь, Minute = Ложь) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ComplexDate_2_0(Object, Day, Hour, Minute);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ComplexDate_2_0(Object, Day, Hour, Minute);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ComplexDate_1_4(Object, Day);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция ComplexDate_2_0(Object, DayNeed = Ложь, HourNeed = Ложь, MinNeed = Ложь)
	
	Перем _Объект;
	
	Если ТипЗнч(Object) = Тип("Дата") Тогда
		
		Если HourNeed = Ложь Тогда
			_Дата = Object;
		Иначе
			_Дата = Ветис.ВремяСервиса(Object);
		КонецЕсли;
		
		_Объект = Создать("ComplexDate");
		
		_Объект.year  = Год(_Дата);
		_Объект.month = Месяц(_Дата);
		
		Если DayNeed = Истина Тогда
			_Объект.day   = День(_Дата);
			Если HourNeed = Истина Тогда
				_Объект.hour   = Час(_Дата);
				Если MinNeed = Истина Тогда
					_Объект.minute   = Минута(_Дата);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Object) = Тип("ОбъектXDTO") Тогда
		
		_свойства = Object.Свойства();
		
		_гггг = ?(_свойства.Получить("year") = Неопределено ИЛИ Object.year = Неопределено, 1, Число(Object.year));
		_мм = ?(_свойства.Получить("month") = Неопределено ИЛИ Object.month = Неопределено, 1, Число(Object.month));
		_дд = ?(_свойства.Получить("day") = Неопределено ИЛИ Object.day = Неопределено, 1, Число(Object.day));
		
		_чч = ?(_свойства.Получить("hour") = Неопределено ИЛИ Object.hour = Неопределено, Неопределено, Число(Object.hour));
		_мин = ?(_свойства.Получить("minute") = Неопределено ИЛИ Object.minute = Неопределено, 0, Число(Object.minute));
		
		Если _чч = Неопределено Тогда
			_Объект = Дата(_гггг, _мм, _дд);
		Иначе
			_Объект = Дата(_гггг, _мм, _дд, _чч, _мин, 0);
			_Объект = Ветис.ВремяМестное(_Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат _Объект;
		
КонецФункции
Функция ComplexDate_1_4(Object, HourNeed = Ложь)
	
	Если ТипЗнч(Object) = Тип("Дата") Тогда
		
		Если HourNeed = Ложь Тогда
			_Дата = Object;
		Иначе
			_Дата = Ветис.ВремяСервиса(Object);
		КонецЕсли;
		
		_Объект = Создать("ComplexDate", "base");
		
		_Объект.year  = Год(_Дата);
		_Объект.month = Месяц(_Дата);
		_Объект.day   = День(_Дата);
		
		Если HourNeed = Истина Тогда
			_Объект.hour   = Час(_Дата);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Object) = Тип("ОбъектXDTO") Тогда
		
		_свойства = Object.Свойства();
		
		_гггг = ?(_свойства.Получить("year") = Неопределено ИЛИ Object.year = Неопределено, 1, Число(Object.year));
		_мм = ?(_свойства.Получить("month") = Неопределено ИЛИ Object.month = Неопределено, 1, Число(Object.month));
		_дд = ?(_свойства.Получить("day") = Неопределено ИЛИ Object.day = Неопределено, 1, Число(Object.day));
		
		_чч = ?(_свойства.Получить("hour") = Неопределено ИЛИ Object.hour = Неопределено, Неопределено, Число(Object.hour));
		
		Если _чч = Неопределено Тогда
			_Объект = Дата(_гггг, _мм, _дд);
		Иначе
			_Объект = Дата(_гггг, _мм, _дд, _чч, 0, 0);
			_Объект = Ветис.ВремяМестное(_Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция Country(guid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат Country_2_0(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат Country_2_0(guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат Country_1_4(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция Country_2_0(guid = Неопределено)
	
	_Объект = Создать("Country");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции
Функция Country_1_4(guid = Неопределено)
	
	_Объект = Создать("Country", "ikar");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция CountryList(guid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат CountryList_2_0(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат CountryList_2_0(guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат CountryList_1_4(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция CountryList_2_0(guid = Неопределено)
	
	_Объект = Создать("CountryList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid, "country", "ВетисDictionary.Country");
	
	Возврат _Объект;
	
КонецФункции
Функция CountryList_1_4(guid = Неопределено)
	
	_Объект = Создать("CountryList", "ikar");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid, "country", "ВетисDictionary.Country");
	
	Возврат _Объект;
	
КонецФункции

Функция District(guid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат District_2_0(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат District_2_0(guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат District_1_4(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция District_2_0(guid = Неопределено)
	
	_Объект = Создать("District");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции
Функция District_1_4(guid = Неопределено)
	
	_Объект = Создать("District", "ikar");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция DistrictList(guid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат DistrictList_2_0(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат DistrictList_2_0(guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат DistrictList_1_4(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция DistrictList_2_0(guid = Неопределено)
	
	_Объект = Создать("DistrictList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid, "district", "ВетисDictionary.District");
	
	Возврат _Объект;
	
КонецФункции
Функция DistrictList_1_4(guid = Неопределено)
	
	_Объект = Создать("DistrictList", "ikar");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid, "district", "ВетисDictionary.District");
	
	Возврат _Объект;
	
КонецФункции

//тип, описывающий предприятие
// Параметры:
//  guid - Строка - собственно guid
//       - Структура - структура со значениями свойств
Функция Enterprise(guid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат Enterprise_2_0(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат Enterprise_2_0(guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат Enterprise_1_4(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция Enterprise_2_0(guid = Неопределено)
	
	_Объект = Создать("Enterprise");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции
Функция Enterprise_1_4(guid = Неопределено)
	
	_Объект = Создать("Enterprise", "enterprise");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция EnterpriseActivity(name = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат EnterpriseActivity_2_0(name);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат EnterpriseActivity_2_0(name);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат EnterpriseActivity(name);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция EnterpriseActivity_2_0(name = Неопределено)
	
	_Объект = Создать("EnterpriseActivity");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, name, "name");
	
	Возврат _Объект;
	
КонецФункции

Функция EnterpriseActivityList(activity = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат EnterpriseActivityList_2_0(activity);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат EnterpriseActivityList_2_0(activity);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат EnterpriseActivityList(activity);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция EnterpriseActivityList_2_0(activity = Неопределено)
	
	_Объект = Создать("EnterpriseActivityList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, activity, "activity");
	
	_Объект.count = _Объект.activity.Количество();
	_Объект.offset = 0;
	_Объект.total = 0;
	
	Возврат _Объект;
	
КонецФункции

Функция EnterpriseList(enterprise = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат EnterpriseList_2_0(enterprise);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат EnterpriseList_2_0(enterprise);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат EnterpriseList_1_4(enterprise);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция EnterpriseList_2_0(enterprise = Неопределено)
	
	_Объект = Создать("EnterpriseList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, enterprise, "enterprise");
	
	_Объект.count = _Объект.enterprise.Количество();
	_Объект.offset = 0;
	_Объект.total = 0;
	
	Возврат _Объект;
	
КонецФункции
Функция EnterpriseList_1_4(enterprise = Неопределено)
	
	_Объект = Создать("EnterpriseList", "enterprise");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, enterprise, "enterprise");
	
	_Объект.count = _Объект.enterprise.Количество();
	_Объект.offset = 0;
	_Объект.total = 0;
	
	Возврат _Объект;
	
КонецФункции

Функция EnterpriseNumberList(enterpriseNumber = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат EnterpriseNumberList_2_0(enterpriseNumber);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат EnterpriseNumberList_2_0(enterpriseNumber);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат EnterpriseNumberList_1_4(enterpriseNumber);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция EnterpriseNumberList_2_0(enterpriseNumber = Неопределено)
	
	_Объект = Создать("EnterpriseNumberList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, enterpriseNumber, "enterpriseNumber");
	
	Возврат _Объект;
	
КонецФункции
Функция EnterpriseNumberList_1_4(enterpriseNumber = Неопределено)
	
	_Объект = Создать("EnterpriseNumberList", "enterprise");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, enterpriseNumber, "enterpriseNumber");
	
	Возврат _Объект;
	
КонецФункции

Функция FederalDistrict(guid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат FederalDistrict_2_0(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат FederalDistrict_2_0(guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат FederalDistrict_1_4(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция FederalDistrict_2_0(guid = Неопределено)
	
	_Объект = Создать("FederalDistrict");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции
Функция FederalDistrict_1_4(guid = Неопределено)
	
	_Объект = Создать("FederalDistrict", "ikar");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция IncorporationForm(code, shortName = "", name = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат IncorporationForm_2_0(code, shortName, name);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат IncorporationForm_2_0(code, shortName, name);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат IncorporationForm_1_4(code, shortName, name);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция IncorporationForm_2_0(code, shortName = "", name = "")
	
	_Объект = Создать("IncorporationForm");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, code, "code");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, name, "name");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, shortName, "shortName");
	
	Возврат _Объект;
	
КонецФункции
Функция IncorporationForm_1_4(code, shortName = "", name = "")
	
	_Объект = Создать("IncorporationForm", "enterprise");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, code, "code");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, name, "name");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, shortName, "shortName");
	
	Возврат _Объект;
	
КонецФункции

Функция Locality(guid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат Locality_2_0(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат Locality_2_0(guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат Locality_1_4(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция Locality_2_0(guid = Неопределено)
	
	_Объект = Создать("Locality");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции
Функция Locality_1_4(guid = Неопределено)
	
	_Объект = Создать("Locality", "ikar");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция LocalityList(guid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат LocalityList_2_0(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат LocalityList_2_0(guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат LocalityList_1_4(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция LocalityList_2_0(guid = Неопределено)
	
	_Объект = Создать("LocalityList");
	
	Если НЕ guid = Неопределено Тогда
		_Объект.locality.Добавить(Country(guid));
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции
Функция LocalityList_1_4(guid = Неопределено)
	
	_Объект = Создать("LocalityList", "ikar");
	
	Если НЕ guid = Неопределено Тогда
		_Объект.locality.Добавить(Country(guid));
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Тип, содержащий информацию о пункте маршрута следования.
//Параметры:
// name - Название пункта перегрузки
// address - Адрес пункта перегрузки
Функция Location(name = Неопределено, address = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат Location_2_0(name, address);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат Location_2_0(name, address);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция Location_2_0(name = Неопределено, address = Неопределено)
	
	_Объект = Создать("Location");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, name, "name");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, address, "address");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий препарат/вакцину, которыми обрабатывались животные.
//Параметры:
// ID - Идентификационный (уникальный) номер препарата
// name - Наименование вакцины/препарата
// series - Номер серии препарата/вакцины
// producer - dt:BusinessMember - Производитель препарата/вакцины
Функция MedicinalDrug(ID = "", name = "", series = "", producer = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат MedicinalDrug_2_0(ID, name, series, producer);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат MedicinalDrug_2_0(ID, name, series, producer);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция MedicinalDrug_2_0(ID = "", name = "", series = "", producer = Неопределено)
	
	_Объект = Создать("MedicinalDrug");
	
	_Объект.ID     = ID;
	_Объект.name   = name;
	_Объект.series = series;
	
	Если НЕ producer = Неопределено Тогда
		_Объект.producer = producer;
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий организацию, в т.ч. учреждения структуры Россельхознадзора, ветеринарных управлений субъектов РФ и т.д.
Функция Organization() Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат Organization_2_0();
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат Organization_2_0();
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция Organization_2_0()
	
	_Объект = Создать("Organization");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий упаковку партии продукции.
//Поддерживается указание многоуровневой упаковки и маркировки партии продукции.
//Параметры:
// level        - dt:PackageLevelType - Уровень упаковки
// packingType  - dt:PackingType - Тип упаковки
// quantity     - xs:integer - Количество единиц упаковки
// productMarks - dt:ProductMarks - Маркировка партии продукции
Функция Package(level = Неопределено, packingType = Неопределено, quantity = Неопределено, productMarks = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат Package_2_0(level, packingType, quantity, productMarks);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат Package_2_0(level, packingType, quantity, productMarks);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция Package_2_0(level = Неопределено, packingType = Неопределено, quantity = Неопределено, productMarks = Неопределено)
	
	_Объект = Создать("Package");
	
	//если level = Неопределено, все остальное не имеет смысла
	//APLM0007 - Wrong application data format. Format validation failed due to XML Schema rules:  Элемент 'quantity' не предусмотрен.
	//APLM0007 - Wrong application data format. Format validation failed due to XML Schema rules:  Элемент 'packingType' не предусмотрен.
	Если НЕ level = Неопределено Тогда
		ВетисОбщегоНазначения.УстановитьЗначение(_Объект, level, "level");
		ВетисОбщегоНазначения.УстановитьЗначение(_Объект, packingType, "packingType", , PackingType());
		ВетисОбщегоНазначения.УстановитьЗначение(_Объект, quantity, "quantity");
		ВетисОбщегоНазначения.УстановитьЗначение(_Объект, productMarks, "productMarks", , ProductMarks());
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция PackageList(package = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат PackageList_2_0(package);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат PackageList_2_0(package);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция PackageList_2_0(package = Неопределено)
	
	_Объект = Создать("PackageList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, package, "package");
	
	//_Объект.count = _Объект.package.Количество();
	//_Объект.offset = 0;
	//_Объект.total = 0;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий вариант фасовки продукции.
//Поддерживается указание многоуровневой упаковки и маркировки партии продукции.
//Параметры:
// packagingType - dt:PackingType - Тип упаковки
// quantity    - xs:integer - Количество единиц упаковки
// volume      - bs:Decimal - Объём единицы упаковки товара
// unit        - dt:Unit - Единица измерения объёма единицы упаковки товара
Функция Packaging(packagingType, quantity = Неопределено, volume = Неопределено, unit = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат Packaging_2_0(packagingType, quantity, volume, unit);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат Packaging_2_0(packagingType, quantity, volume, unit);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция Packaging_2_0(packagingType, quantity = Неопределено, volume = Неопределено, unit = Неопределено)
	
	_Объект = Создать("Packaging");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, packagingType, "packagingType");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, quantity, "quantity");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, volume, "volume");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, unit, "unit");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий вид упаковки.
//по xsd это bs:GenericVersioningEntity, по справке bs:GenericEntity (24.10.2017), считаем что по xsd правильнее
Функция PackingType(guid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат PackingType_2_0(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат PackingType_2_0(guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат PackingForm_1_4(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция PackingType_2_0(guid = Неопределено)
	
	_Объект = Создать("PackingType");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid, "guid");
	
	Возврат _Объект;
	
КонецФункции
Функция PackingForm_1_4(guid = Неопределено)
	
	_Объект = Создать("PackingForm", "common");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid, "guid");
	
	Возврат _Объект;
	
КонецФункции

Функция PackingFormList(packingForm) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат PackingFormList_1_4(packingForm);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция PackingFormList_1_4(packingForm)
	
	_Объект = Создать("PackingFormList", "common");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, packingForm, "packingForm");
	
	Возврат _Объект;
	
КонецФункции

//тип, описывающий производителя продукции
Функция Producer(enterpriseGuid = Неопределено, role = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат Producer_2_0(enterpriseGuid, role);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат Producer_2_0(enterpriseGuid, role);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат Producer_1_4(enterpriseGuid, role);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция Producer_2_0(enterpriseGuid = Неопределено, role = Неопределено)
	
	_Объект = Создать("Producer");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Enterprise(enterpriseGuid), "enterprise");
	
	_Объект.role = ?(role = Неопределено, ВетисКонстанты.EnterpriseRole_PRODUCER(), role);
	
	Возврат _Объект;
	
КонецФункции
Функция Producer_1_4(enterpriseGuid = Неопределено, role = Неопределено)
	
	_Объект = Создать("Producer", "enterprise");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Enterprise(enterpriseGuid), "enterprise");
	
	_Объект.role = ?(role = Неопределено, ВетисКонстанты.EnterpriseRole_PRODUCER(), role);
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий список производителей продукции
Функция ProducerList(guid) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ProducerList_2_0(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ProducerList_2_0(guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ProducerList(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция ProducerList_2_0(guid)
	
	_Объект = Создать("ProducerList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid, "producer", "Producer");
	
	_Объект.count = _Объект.producer.Количество();
	_Объект.offset = 0;
	_Объект.total = 0;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий продукцию.
Функция Product(guid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат Product_2_0(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат Product_2_0(guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат Product_1_4(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция Product_2_0(guid = Неопределено)
	
	_Объект = Создать("Product");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции
Функция Product_1_4(guid = Неопределено)
	
	_Объект = Создать("Product", "production");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий cведения о наименовании продукции в соответствии с номенклатурой производителя.
Функция ProductItem(guid = Неопределено, name = Неопределено, packaging = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ProductItem_2_0(guid, name, packaging);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ProductItem_2_0(guid, name, packaging);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ProductItem_1_4(guid, name);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция ProductItem_2_0(guid = Неопределено, name = Неопределено, packaging = Неопределено)
	
	_Объект = Создать("ProductItem");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, ?(ПустаяСтрока(guid), Неопределено, guid), "guid");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, name, "name");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, packaging, "packaging");
	
	Возврат _Объект;
	
КонецФункции
Функция ProductItem_1_4(guid = Неопределено, name = Неопределено, packaging = Неопределено)
	
	_Объект = Создать("ProductItem", "production");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, ?(ПустаяСтрока(guid), Неопределено, guid), "guid");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, name, "name");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, packaging, "packaging");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий список наименований продукции
//Параметры:
// productItemList - Наименование продукции в номенклатуре производителя. Массив - dt:ProductItem 0..*
Функция ProductItemList(productItemList = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ProductItemList_2_0(productItemList);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ProductItemList_2_0(productItemList);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат ProductItemList_1_4(productItemList);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция ProductItemList_2_0(productItemList = Неопределено)
	
	_Объект = Создать("ProductItemList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, productItemList, "productItem");
	
	_Объект.count = _Объект.productItem.Количество();
	_Объект.offset = 0;
	_Объект.total = 0;
	
	Возврат _Объект;
	
КонецФункции
Функция ProductItemList_1_4(productItemList = Неопределено)
	
	_Объект = Создать("ProductItemList", "production");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, productItemList, "productItem");
	
	_Объект.count = _Объект.productItem.Количество();
	_Объект.offset = 0;
	_Объект.total = 0;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий площадку, на которой выпускается продукция
//Параметры:
// location - Площадка, осуществляющая выпуск продукции. dt:Enterprise 1..1
Функция ProductItemProducing(location = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ProductItemProducing_2_0(location);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ProductItemProducing_2_0(location);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция ProductItemProducing_2_0(location = Неопределено)
	
	_Объект = Создать("ProductItemProducing");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, location, "location");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий список маркировок продукции.
//Под маркировкой понимается всё, что может быть физически нанесено на упаковку или непосредственно на продукцию.
//Для каждой маркировки может быть указан её тип (см. атрибут class), который также может определять формат маркировки.
//Параметры:
// class - Описание упаковки. dt:ProductMarkingClass
Функция ProductMarks(content = Неопределено, class = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ProductMarks_2_0(content, class);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ProductMarks_2_0(content, class);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция ProductMarks_2_0(content = Неопределено, class = Неопределено)
	
	_Объект = Создать("ProductMarks");
	
	//сделать: проверить с пустым __content
	//MERC13457 - Маркировка обязательна для заполнения.
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, content, "__content", , "0123456789");
	
	//MERC13456 - Идентификатор типа маркировки не указан или указан несуществующий.
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, class, "class", , ВетисКонстанты.ProductMarkingClass_UNDEFINED());
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий назначение груза.
Функция Purpose(guid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат Purpose_2_0(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат Purpose_2_0(guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат Purpose_1_4(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция Purpose_2_0(guid = Неопределено)
	
	_Объект = Создать("Purpose");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции
Функция Purpose_1_4(guid = Неопределено)
	
	_Объект = Создать("Purpose", "common");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция Region(guid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат Region_2_0(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат Region_2_0(guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат Region_1_4(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция Region_2_0(guid = Неопределено)
	
	_Объект = Создать("Region");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции
Функция Region_1_4(guid = Неопределено)
	
	_Объект = Создать("Region", "ikar");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция RegionList(guid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат RegionList_2_0(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат RegionList_2_0(guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат RegionList_1_4(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция RegionList_2_0(guid = Неопределено)
	
	_Объект = Создать("RegionList");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid, "region", "Region");
	
	Возврат _Объект;
	
КонецФункции
Функция RegionList_1_4(guid = Неопределено)
	
	_Объект = Создать("RegionList", "ikar");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid, "region", "ВетисDictionary.Region");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий условие регионализации, соблюдаемое при перевозке груза.
//Параметры:
// referenceNumber - Номер условия
// text - xs:Text - Формулировка условия
// strict - xs:boolean - Обязательность соблюдения условия
// relatedDisease - xs:String - Заболевание, к которому относится данное условие
Функция RegionalizationCondition(guid = Неопределено, referenceNumber = Неопределено, text = Неопределено, strict = Неопределено, relatedDisease = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат RegionalizationCondition_2_0(guid, referenceNumber, text, strict, relatedDisease);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат RegionalizationCondition_2_0(guid, referenceNumber, text, strict, relatedDisease);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция RegionalizationCondition_2_0(guid = Неопределено, referenceNumber = Неопределено, text = Неопределено, strict = Неопределено, relatedDisease = Неопределено)
	
	_Объект = Создать("RegionalizationCondition");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid, "guid");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, referenceNumber, "referenceNumber");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, text, "text");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, strict, "strict");
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, relatedDisease, "relatedDisease", "AnimalDisease");
	
	Возврат _Объект;
	
КонецФункции

//Тип, содержащий информацию о пункте маршрута следования.
//Параметры:
// name - Наименование метода исследования
Функция ResearchMethod(name = "") Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат ResearchMethod_2_0(name);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат ResearchMethod_2_0(name);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция ResearchMethod_2_0(name = "")
	
	_Объект = Создать("ResearchMethod");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, Лев(name, 255), "name");
	
	Возврат _Объект;
	
КонецФункции

Функция Street(guid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат Street_2_0(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат Street_2_0(guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат Street_1_4(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция Street_2_0(guid = Неопределено)
	
	_Объект = Создать("Street");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции
Функция Street_1_4(guid = Неопределено)
	
	_Объект = Создать("Street", "ikar");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции

Функция StreetList(guid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат StreetList_2_0(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат StreetList_2_0(guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат StreetList_1_4(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция StreetList_2_0(guid = Неопределено)
	
	_Объект = Создать("StreetList");
	
	Если НЕ guid = Неопределено Тогда
		_Объект.street.Добавить(Country(guid));
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции
Функция StreetList_1_4(guid = Неопределено)
	
	_Объект = Создать("StreetList", "ikar");
	
	Если НЕ guid = Неопределено Тогда
		_Объект.street.Добавить(Country(guid));
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий вид продукции.
Функция SubProduct(guid = Неопределено, name = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат SubProduct_2_0(guid, name);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат SubProduct_1_4(guid, name);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция SubProduct_2_0(guid = Неопределено, name = Неопределено)
	
	_Объект = Создать("SubProduct");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, name, "name");
	
	Возврат _Объект;
	
КонецФункции
Функция SubProduct_1_4(guid = Неопределено, name = Неопределено)
	
	_Объект = Создать("SubProduct", "production");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, name, "name");
	
	Возврат _Объект;
	
КонецФункции

//Тип, описывающий единицу измерения.
Функция Unit(guid = Неопределено) Экспорт
	
	Если Ложь Тогда
	ИначеЕсли Ветис.Версия_2_1() Тогда
		Возврат Unit_2_0(guid);
	ИначеЕсли Ветис.Версия_2_0() Тогда
		Возврат Unit_2_0(guid);
	ИначеЕсли Ветис.Версия_1_4() Тогда
		Возврат Unit_1_4(guid);
	Иначе
		ВетисОбщегоНазначения.ВывестиСообщение(Ветис.ВерсияТекстОшибки());
		ВызватьИсключение Ветис.ВерсияТекстОшибки();
	КонецЕсли;
	
КонецФункции
Функция Unit_2_0(guid = Неопределено)
	
	_Объект = Создать("Unit");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции
Функция Unit_1_4(guid = Неопределено)
	
	_Объект = Создать("Unit", "common");
	
	ВетисОбщегоНазначения.УстановитьЗначение(_Объект, guid);
	
	Возврат _Объект;
	
КонецФункции


//Природа ВСД (электронный или бумажный).
Функция DocumentNature(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.DocumentNature_ELECTRONIC();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.DocumentNature_PAPER();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ProductMarkingClass(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.ProductMarkingClass_UNDEFINED();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.ProductMarkingClass_BN();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.ProductMarkingClass_SSCC();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Тип, описывающий cпособ хранения при перевозке.
Функция TransportationStorageType(value) Экспорт
	
	Если      value = 1 Тогда
		Возврат ВетисКонстанты.TransportationStorageType_FROZEN();
	ИначеЕсли value = 2 Тогда
		Возврат ВетисКонстанты.TransportationStorageType_CHILLED();
	ИначеЕсли value = 3 Тогда
		Возврат ВетисКонстанты.TransportationStorageType_COOLED();
	ИначеЕсли value = 4 Тогда
		Возврат ВетисКонстанты.TransportationStorageType_VENTILATED();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


Функция Создать(Name, uriname = Неопределено, Factory = Неопределено) Экспорт
	
	Возврат ВетисОбщегоНазначения.Создать(Name, URI(uriname), Factory);
	
КонецФункции

Функция URI(name = Неопределено) Экспорт
	
	Если name = Неопределено Тогда
		Возврат "http://api.vetrf.ru/schema/cdm/dictionary/v2";
	ИначеЕсли name = "enterprise" Тогда
		Возврат "http://api.vetrf.ru/schema/cdm/cerberus/enterprise";
	ИначеЕсли name = "ikar" Тогда
		Возврат "http://api.vetrf.ru/schema/cdm/ikar";
	ИначеЕсли name = "shipment" Тогда
		Возврат "http://api.vetrf.ru/schema/cdm/argus/shipment";
	ИначеЕсли name = "production" Тогда
		Возврат "http://api.vetrf.ru/schema/cdm/argus/production";
	ИначеЕсли name = "common" Тогда
		Возврат "http://api.vetrf.ru/schema/cdm/argus/common";
	ИначеЕсли name = "base" Тогда
		Возврат "http://api.vetrf.ru/schema/cdm/base";
	КонецЕсли;
	
КонецФункции
