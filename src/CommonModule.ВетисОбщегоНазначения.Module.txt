
Функция Десериализовать(пТекст, пТип = Неопределено, пФабрика = Неопределено) Экспорт
	
	_Фабрика = ?(пФабрика = Неопределено, ФабрикаXDTO, пФабрика);
	
	_Чтение = Новый ЧтениеXML;
	
	_Чтение.УстановитьСтроку(пТекст);
	
	Если пТип = Неопределено Тогда
		_Результат = _Фабрика.ПрочитатьXML(_Чтение);
	Иначе
		_Результат = _Фабрика.ПрочитатьXML(_Чтение, пТип);
	КонецЕсли;
	
	_Чтение.Закрыть();
	
	Возврат _Результат;
	
КонецФункции

Функция Сериализовать(пОбъект, пФабрика = Неопределено, пЛокальноеИмя = Неопределено, пURI = Неопределено) Экспорт
	
	_Фабрика = ?(пФабрика = Неопределено, ФабрикаXDTO, пФабрика);
	
	_ЗаписьXML = Новый ЗаписьXML;
	_ЗаписьXML.УстановитьСтроку("UTF-8");
	
	Попытка
		Если пЛокальноеИмя = Неопределено Тогда
			_Фабрика.ЗаписатьXML(_ЗаписьXML, пОбъект);
		Иначе
			_Фабрика.ЗаписатьXML(_ЗаписьXML, пОбъект, пЛокальноеИмя, пURI);
		КонецЕсли;
	Исключение
		ВывестиСообщениеОбОшибке(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат _ЗаписьXML.Закрыть();
	
КонецФункции

Функция ПривестиКТипу(пОбъект, пИмя, пURI, пФабрика = Неопределено) Экспорт
	
	Если пФабрика = Неопределено Тогда
		_Фабрика = ВетисПовтИсп.ФабрикаОбщая();
	Иначе
		_Фабрика = пФабрика;
	КонецЕсли;
	
	_Тип = _Фабрика.Тип(пURI, пИмя);
	
	_ЗаписьXML = Новый ЗаписьXML;
	_ЗаписьXML.УстановитьСтроку("UTF-8");
	
	_Фабрика.ЗаписатьXML(_ЗаписьXML, пОбъект, пИмя, пURI);
	
	_Строка = _ЗаписьXML.Закрыть();
	
	_Чтение = Новый ЧтениеXML;
	_Чтение.УстановитьСтроку(_Строка);
	
	Попытка
		_Объект = _Фабрика.ПрочитатьXML(_Чтение, _Тип);
	Исключение
		_Объект = _Фабрика.Создать(_Тип);
		ЗаполнитьЗначенияСвойствXDTO(_Объект, пОбъект, _Фабрика);
	КонецПопытки;
	
	Возврат _Объект;
	
КонецФункции

Процедура ЗаполнитьЗначенияСвойствXDTO(пОбъект, пЗначение, пФабрика = Неопределено) Экспорт
	
	Если пФабрика = Неопределено Тогда
		_Фабрика = ВетисПовтИсп.ФабрикаОбщая();
	Иначе
		_Фабрика = пФабрика;
	КонецЕсли;
	
	Для каждого _Свойство Из пЗначение.Свойства() Цикл
		
		_СвойствоОбъект = пОбъект.Свойства().Получить(_Свойство.Имя);
		
		//у объекта нет свойства
		Если _СвойствоОбъект = Неопределено Тогда Продолжить; КонецЕсли;
		
		_ТипСвойства = пОбъект.Свойства().Получить(_Свойство.Имя).Тип;
		
		Если ТипЗнч(пОбъект[_Свойство.Имя]) = Тип("СписокXDTO") Тогда
			_СписокОбъект = пОбъект.ПолучитьСписок(_Свойство.Имя);
			Если ТипЗнч(пЗначение[_Свойство.Имя]) = Тип("СписокXDTO") Тогда
				Для каждого _Значение Из пЗначение.ПолучитьСписок(_Свойство.Имя) Цикл
					_СписокОбъектЭлемент = _Фабрика.Создать(_ТипСвойства);
					Если _СписокОбъектЭлемент = Неопределено Тогда
						_СписокОбъект.Добавить(_Значение);
					Иначе
						ЗаполнитьЗначенияСвойствXDTO(_СписокОбъектЭлемент, _Значение, _Фабрика);
						_СписокОбъект.Добавить(_СписокОбъектЭлемент);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(пЗначение[_Свойство.Имя]) = Тип("ОбъектXDTO") Тогда
				_СписокОбъектЭлемент = _Фабрика.Создать(_ТипСвойства);
				ЗаполнитьЗначенияСвойствXDTO(_СписокОбъектЭлемент, пЗначение[_Свойство.Имя], _Фабрика);
				_СписокОбъект.Добавить(_СписокОбъектЭлемент);
			Иначе
				_СписокОбъект.Добавить(пЗначение[_Свойство.Имя]);
			КонецЕсли;
		ИначеЕсли ТипЗнч(пОбъект[_Свойство.Имя]) = Тип("ОбъектXDTO") ИЛИ ТипЗнч(_ТипСвойства) = Тип("ТипОбъектаXDTO") Тогда
			_Значение = пЗначение.ПолучитьXDTO(_Свойство.Имя);
			Если НЕ _Значение = Неопределено Тогда
				пОбъект[_Свойство.Имя] = _Фабрика.Создать(_ТипСвойства);
				ЗаполнитьЗначенияСвойствXDTO(пОбъект[_Свойство.Имя], _Значение, _Фабрика);
			КонецЕсли;
		Иначе
			_Значение = пЗначение[_Свойство.Имя];
			Если НЕ ТипЗнч(_Значение) = Тип("ОбъектXDTO") Тогда
				_Значение = ПривестиКФасету(_Значение, _ТипСвойства.Фасеты);
				Если НЕ _Значение = Неопределено Тогда
					Попытка
						пОбъект[_Свойство.Имя] = _Значение;
					Исключение
						ВетисОбщегоНазначения.ВывестиСообщение(_Свойство.Имя +": " + _Значение + " Тип:"+_ТипСвойства.Имя + " (" + ПредставлениеФасетов(_ТипСвойства.Фасеты) + ")");
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПривестиКФасету(пЗначение, пФасеты, ПоУмолчанию = Неопределено)
	
	Если пФасеты = Неопределено Тогда
		Возврат пЗначение;
	КонецЕсли;
	
	_Значение = пЗначение;
	_ЗначениеВрег = ВРег(_Значение);
	_Перечисление = Ложь;
	_ПеречислениеНайдено = Ложь;
	
	Для Каждого _Фасет Из пФасеты Цикл
		Если Ложь Тогда
		//ИначеЕсли _Фасет.Вид = ВидФасетаXDTO.Длина Тогда
		//ИначеЕсли _Фасет.Вид = ВидФасетаXDTO.МаксВключающее Тогда
		ИначеЕсли _Фасет.Вид = ВидФасетаXDTO.МаксДлина Тогда
			_Значение = Лев(_Значение, Число(_Фасет.Значение));
		//ИначеЕсли _Фасет.Вид = ВидФасетаXDTO.МаксИсключающее Тогда
		//ИначеЕсли _Фасет.Вид = ВидФасетаXDTO.МинВключающее Тогда
		ИначеЕсли _Фасет.Вид = ВидФасетаXDTO.МинДлина Тогда
			_Длина = Число(_Фасет.Значение);
			Пока СтрДлина(_Значение) < _Длина Цикл
				_Значение = _Значение + " ";
			КонецЦикла;
		//ИначеЕсли _Фасет.Вид = ВидФасетаXDTO.МинИсключающее Тогда
		//ИначеЕсли _Фасет.Вид = ВидФасетаXDTO.Образец Тогда
		ИначеЕсли _Фасет.Вид = ВидФасетаXDTO.Перечисление Тогда
			_Перечисление = Истина;
			Если ВРег(_Фасет.Значение) = _ЗначениеВрег Тогда
				_Значение = _Фасет.Значение;
				_ПеречислениеНайдено = Истина;
				Прервать;
			КонецЕсли;
		//ИначеЕсли _Фасет.Вид = ВидФасетаXDTO.ПробельныеСимволы Тогда
		//ИначеЕсли _Фасет.Вид = ВидФасетаXDTO.РазрядовВсего Тогда
		ИначеЕсли _Фасет.Вид = ВидФасетаXDTO.РазрядовДробнойЧасти Тогда
			_Значение = Окр(_Значение, Число(_Фасет.Значение));
		КонецЕсли;
	КонецЦикла;
	
	Если _Перечисление И НЕ _ПеречислениеНайдено Тогда
		Возврат ПоУмолчанию;
	Иначе
		Возврат _Значение;
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеФасетов(пФасеты)
	
	Если пФасеты = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	_фасеты = "";
	
	Для Каждого _Фасет Из пФасеты Цикл
		_фасеты = _фасеты + _фасет.Вид + ":" + _Фасет.Значение + ";";
	КонецЦикла;
	
	Возврат _фасеты;
	
КонецФункции


Функция ВывестиСообщение(пТекст, пКонтекст = "") Экспорт
	
	//_Сообщение = Новый СообщениеПользователю;
	//_Сообщение.Текст = пТекст;
	//
	//Если НЕ ТипЗнч(пКонтекст) = Тип("Строка") Тогда
	//	_Сообщение.КлючДанных = пКонтекст;
	//КонецЕсли;
	//
	//_Сообщение.Сообщить();
	
	Ветис.Журнал_Добавить(пТекст, пКонтекст);
	
КонецФункции

Функция ВывестиСообщениеОбОшибке(пИнформацияОбОшибке, пКонтекст = "", пОтказ = Ложь) Экспорт
	
	пОтказ = Истина;
	
	Ветис.Журнал_Добавить(ПодробноеПредставлениеОшибки(пИнформацияОбОшибке), пКонтекст);
	
КонецФункции

Функция ПолучитьНакопленныеСообщения(пУдалять = Истина) Экспорт
	
	ТекстОшибки = "";
	
	СообщенияПользователю = ПолучитьСообщенияПользователю(пУдалять);
	
	Для Каждого Сообщение Из СообщенияПользователю Цикл
		ТекстОшибки = ТекстОшибки + Сообщение.Текст + Символы.ПС;
	КонецЦикла;

	Возврат ТекстОшибки;
	
КонецФункции


Функция Создать(пИмя, пURI = Неопределено, пФабрика = Неопределено) Экспорт
	
	Если пФабрика = Неопределено Тогда
		_Фабрика = ВетисПовтИсп.ФабрикаОбщая();
	Иначе
		_Фабрика = пФабрика;
	КонецЕсли;
	
	Если ТипЗнч(пИмя) = Тип("Строка") Тогда
		_Тип = _Фабрика.Тип(пURI, пИмя);
	Иначе
		_Тип = пИмя;
	КонецЕсли;
	
	Возврат _Фабрика.Создать(_Тип);
	
КонецФункции


Процедура УстановитьЗначение(пОбъект, пЗначение, пИмяСвойства = "guid", пФункцияЗначения = Неопределено, ПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(пЗначение) = Тип("Структура") Тогда
		
		Для каждого _Элемент Из пЗначение Цикл
			_ИмяСвойства = _Элемент.Ключ;
			_Значение = _Элемент.Значение;
			Если НЕ _Значение = Неопределено Тогда
				Если пОбъект[_ИмяСвойства] = Неопределено Тогда
					_ЗначениеХ = Создать(пОбъект.Свойства().Получить(_ИмяСвойства).Тип);
					Если ТипЗнч(_ЗначениеХ) = Тип("ОбъектXDTO") Тогда
						пОбъект[_ИмяСвойства] = _ЗначениеХ;
					КонецЕсли;
				КонецЕсли;
				Если ТипЗнч(пОбъект[_ИмяСвойства]) = Тип("ОбъектXDTO") Тогда
					УстановитьЗначение(пОбъект[_ИмяСвойства], _Значение, _ИмяСвойства, пФункцияЗначения);
				Иначе
					УстановитьЗначение(пОбъект, _Значение, _ИмяСвойства, пФункцияЗначения);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(пЗначение) = Тип("Массив") Тогда
		Для каждого _Значение Из пЗначение Цикл
			Если пФункцияЗначения = Неопределено Тогда
				Если ТипЗнч(_Значение) = Тип("Структура") Тогда
					_ЗначениеХ = Создать(пОбъект.Свойства().Получить(пИмяСвойства).Тип);
					УстановитьЗначение(_ЗначениеХ, _Значение);
					пОбъект[пИмяСвойства].Добавить(_ЗначениеХ);
				Иначе
					пОбъект[пИмяСвойства].Добавить(_Значение);
				КонецЕсли;
			Иначе
				пОбъект[пИмяСвойства].Добавить(Вычислить(пФункцияЗначения+"(_Значение)"));
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(пОбъект) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		Если пОбъект.Свойство(пИмяСвойства) Тогда
			Если пФункцияЗначения = Неопределено Тогда
				пОбъект[пИмяСвойства] = пЗначение;
			Иначе
				пОбъект[пИмяСвойства] = Вычислить(пФункцияЗначения+"(пЗначение)");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли пОбъект.Свойства().Получить(пИмяСвойства) = Неопределено Тогда
		//выходим
		//дальше имя свойства обязательно
	ИначеЕсли ТипЗнч(пОбъект[пИмяСвойства]) = Тип("СписокXDTO") Тогда
		Если ТипЗнч(пЗначение) = Тип("Массив") Тогда
			Для каждого _Значение Из пЗначение Цикл
				Если пФункцияЗначения = Неопределено Тогда
					пОбъект[пИмяСвойства].Добавить(_Значение);
				Иначе
					пОбъект[пИмяСвойства].Добавить(Вычислить(пФункцияЗначения+"(_Значение)"));
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли пЗначение = Неопределено Тогда
			Если НЕ ПоУмолчанию = Неопределено Тогда
				Если пФункцияЗначения = Неопределено Тогда
					пОбъект[пИмяСвойства].Добавить(ПоУмолчанию);
				Иначе
					пОбъект[пИмяСвойства].Добавить(Вычислить(пФункцияЗначения+"(ПоУмолчанию)"));
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если пФункцияЗначения = Неопределено Тогда
				пОбъект[пИмяСвойства].Добавить(пЗначение);
			Иначе
				пОбъект[пИмяСвойства].Добавить(Вычислить(пФункцияЗначения+"(пЗначение)"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли пЗначение = Неопределено Тогда
		Если НЕ ПоУмолчанию = Неопределено Тогда
			Если пФункцияЗначения = Неопределено Тогда
				пОбъект[пИмяСвойства] = ПоУмолчанию;
			Иначе
				пОбъект[пИмяСвойства] = Вычислить(пФункцияЗначения+"(ПоУмолчанию)");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если пФункцияЗначения = Неопределено Тогда
			пОбъект[пИмяСвойства] = пЗначение;
		Иначе
			_Значение = Вычислить(пФункцияЗначения+"(пЗначение)");
			Если _Значение = Неопределено Тогда
				Если НЕ ПоУмолчанию = Неопределено Тогда
					Если пФункцияЗначения = Неопределено Тогда
						пОбъект[пИмяСвойства] = ПоУмолчанию;
					Иначе
						пОбъект[пИмяСвойства] = Вычислить(пФункцияЗначения+"(ПоУмолчанию)");
					КонецЕсли;
				КонецЕсли;
			Иначе
				пОбъект[пИмяСвойства] = _Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначение(пОбъект, пИмяСвойства, ПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(пОбъект) = Тип("Структура") Тогда
		Если пОбъект.Свойство(пИмяСвойства) Тогда
			Возврат пОбъект[пИмяСвойства];
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(пОбъект) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		Если пОбъект.Свойство(пИмяСвойства) Тогда
			Возврат пОбъект[пИмяСвойства];
		КонецЕсли;
		
	ИначеЕсли пОбъект.Свойства().Получить(пИмяСвойства) = Неопределено Тогда
		//выходим
		//дальше имя свойства обязательно
	ИначеЕсли ТипЗнч(пОбъект[пИмяСвойства]) = Тип("СписокXDTO") Тогда
		_Таблица = Новый ТаблицаЗначений;
		Для каждого _Свойство Из пОбъект.Свойства() Цикл
			_Таблица.Колонки.Добавить(_Свойство.Имя);
		КонецЦикла;
		Для каждого _ОбъектСтрока Из пОбъект[пИмяСвойства] Цикл
			_ТаблицаСтрока = _Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(_ТаблицаСтрока, _ОбъектСтрока);
			//Для каждого _Свойство Из пОбъект.Свойства() Цикл
			//	_ТаблицаСтрока[_Свойство.Имя] = _ОбъектСтрока[_Свойство.Имя];
			//КонецЦикла;
		КонецЦикла;
	Иначе
		Возврат пОбъект[пИмяСвойства];
	КонецЕсли;
	
	Возврат ПоУмолчанию;
	
КонецФункции

Функция ЕстьСвойство(пОбъект, пИмяСвойства) Экспорт
	
	Если ТипЗнч(пОбъект) = Тип("Структура") Тогда
		Возврат пОбъект.Свойство(пИмяСвойства);
		
	ИначеЕсли ТипЗнч(пОбъект) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		Возврат пОбъект.Свойство(пИмяСвойства);
		
	Иначе
		Возврат НЕ пОбъект.Свойства().Получить(пИмяСвойства) = Неопределено;
		
	КонецЕсли;
	
КонецФункции


Процедура УдалитьПомеченныеОбъекты(пИмяТаблицы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_Таблица.Ссылка
	|ИЗ
	|	"+пИмяТаблицы+" КАК _Таблица
	|ГДЕ
	|	Истина
	|	И ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			УдалитьПоСсылке(Выборка.Ссылка);
		Исключение
			ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), Выборка.Ссылка);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПоСсылке(пСсылка, пРодитель = Неопределено) Экспорт
	
	_Ссылки = Новый Массив;
	_Ссылки.Добавить(пСсылка);
	
	_ТабСсылок = НайтиПоСсылкам(_Ссылки);
	
	_МассивНайденных = _ТабСсылок.НайтиСтроки(Новый Структура("Ссылка", пСсылка));
	Если _МассивНайденных.Количество() = 0 Тогда
		_Объект = пСсылка.ПолучитьОбъект();
		УдалитьДанные(_Объект);
	Иначе
		_МожноУдалять = Истина;
		Для каждого _Найденная Из _МассивНайденных Цикл
			Если _Найденная.Данные = пРодитель Тогда
				Продолжить;
				
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(_Найденная.Метаданные) Тогда
				_мз = РегистрыСведений[_Найденная.Метаданные.Имя].СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(_мз, _Найденная.Данные);
				Попытка
					_мз.Удалить();
				Исключение
					ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), "УдалитьПоСсылке:"+_Найденная.Метаданные.Имя);
					_МожноУдалять = Ложь;
					Прервать;
				КонецПопытки;
				
			Иначе
				Попытка
					_ОбъектСсылка = _Найденная.Данные;
				Исключение
					ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), "УдалитьПоСсылке:"+_Найденная.Данные);
					_ОбъектСсылка = Неопределено;
					_МожноУдалять = Ложь;
					Прервать;
				КонецПопытки;
				
				Если НЕ _ОбъектСсылка = Неопределено Тогда
					УдалитьПоСсылке(_ОбъектСсылка, пСсылка);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если _МожноУдалять Тогда
			_Объект = пСсылка.ПолучитьОбъект();
			УдалитьДанные(_Объект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДанные(Данные, пЗагрузка = Истина) Экспорт
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Данные.ОбменДанными.Загрузка = пЗагрузка = Истина;
	
	Попытка
		Данные.Удалить();
	Исключение
		ВетисОбщегоНазначения.ВывестиСообщениеОбОшибке(ИнформацияОбОшибке(), Данные.Ссылка);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры


Функция ДобавитьОтбор(пОтбор, пПоле, пЗначение = Неопределено, пВидСравнения = Неопределено, пИспользование = Неопределено) Экспорт
	
	_Поле = Новый ПолеКомпоновкиДанных(пПоле);
	
	_Элементы = ОтборПолучитьЭлементы(пОтбор);
	
	_Найден = Ложь;
	
	Для каждого _Элемент Из _Элементы Цикл
		Если ТипЗнч(_Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") И _Элемент.ЛевоеЗначение = _Поле Тогда
			_Найден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если _Найден = Ложь Тогда
		_Элемент = _Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	
	_Элемент.Использование = ?(пИспользование = Неопределено, Истина, пИспользование);
	
	Если НЕ пВидСравнения = Неопределено Тогда
		_Элемент.ВидСравнения = ПредопределенноеЗначение("ВидСравненияКомпоновкиДанных."+пВидСравнения);
	КонецЕсли;
	
	_Элемент.ЛевоеЗначение = _Поле;
	
	_Элемент.ПравоеЗначение = пЗначение;
	
КонецФункции

Функция ДобавитьГруппу(пОтбор, пИмя, пТипГруппы = Неопределено, пИспользование = Неопределено) Экспорт
	
	_Элементы = ОтборПолучитьЭлементы(пОтбор);
	
	_Найден = Ложь;
	
	Для каждого _Элемент Из _Элементы Цикл
		Если ТипЗнч(_Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И _Элемент.Представление = пИмя Тогда
			_Найден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если _Найден = Ложь Тогда
		_Элемент = _Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	КонецЕсли;
	
	_Элемент.Представление = пИмя;
	
	_Элемент.Использование = ?(пИспользование = Неопределено, Истина, пИспользование);
	
	Если пТипГруппы = Неопределено Тогда
		_Элемент.ТипГруппы = ПредопределенноеЗначение("ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ");
	Иначе
		_Элемент.ТипГруппы = ПредопределенноеЗначение("ТипГруппыЭлементовОтбораКомпоновкиДанных."+пТипГруппы);
	КонецЕсли;
	
	Возврат _Элемент;
	
КонецФункции

Функция ОтборПолучитьЭлементы(Источник) Экспорт
	
	Результат = Неопределено;
	
	Если ТипЗнч(Источник) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Результат = Источник.Настройки.Отбор.Элементы;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("НастройкиКомпоновкиДанных") Тогда
		Результат = Источник.Отбор.Элементы;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ОтборКомпоновкиДанных") Тогда
		Результат = Источник.Элементы;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("КоллекцияЭлементовОтбораКомпоновкиДанных") Тогда
		Результат = Источник;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		Результат = Источник.Элементы;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Процедура ДобавитьПрефиксОрганизации(ДокументОбъект, Префикс) Экспорт
	
	Префикс = "";
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Если НЕ МетаданныеДокумента.Реквизиты.Найти("Отправитель") = Неопределено Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НЕ _Отправитель.BusinessEntity ЕСТЬ NULL
		|			ТОГДА _Отправитель.Префикс
		|		КОГДА НЕ _Получатель.BusinessEntity ЕСТЬ NULL
		|			ТОГДА _Получатель.Префикс
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Префикс
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫРАЗИТЬ(&Отправитель КАК Справочник.ВетисBusinessEntity) КАК Отправитель,
		|		ВЫРАЗИТЬ(&Получатель КАК Справочник.ВетисBusinessEntity) КАК Получатель) КАК _Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетисНастройкиПодключения.ИдентификаторыХС КАК _Отправитель
		|		ПО _Таблица.Отправитель = _Отправитель.BusinessEntity
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВетисНастройкиПодключения.ИдентификаторыХС КАК _Получатель
		|		ПО _Таблица.Получатель = _Получатель.BusinessEntity
		|ГДЕ
		|	ИСТИНА");
		
		//если отправитель и получатель свои, то приоритет у отправителя, если он есть в собственных контрагентах
		
		Запрос.УстановитьПараметр("Отправитель" , ДокументОбъект.Отправитель);
		Запрос.УстановитьПараметр("Получатель" , ДокументОбъект.Получатель);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Префикс) Тогда
			Префикс = Выборка.Префикс;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

Процедура Пауза(пСек) Экспорт
	_Время = ТекущаяДата();
	_Соединение = Новый HTTPСоединение("127.0.0.0",,,,,пСек);
	Пока ТекущаяДата() < _Время + пСек Цикл
		Попытка
			_Соединение.Получить(Новый HTTPЗапрос());
		Исключение
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Функция Онлайн() Экспорт
	Попытка 
		_Соединение = Новый HTTPСоединение("http://api.vetrf.ru/");
		Возврат Истина;
	Исключение 
		Возврат Ложь;
	КонецПопытки;
КонецФункции


Функция ПолучитьСтруктуруСсылки(пСсылка) Экспорт
	
	Возврат ПолучитьСтруктуруОбъекта(пСсылка.ПолучитьОбъект());
	
КонецФункции

Функция ПолучитьСтруктуруОбъекта(пОбъект) Экспорт
	
	_метаданные = пОбъект.Метаданные();
	
	_ответ = Новый Структура;
	
	_Объект = пОбъект;
	
	Для каждого _реквизит Из _метаданные.Реквизиты Цикл
		
		_ответ.Вставить(_реквизит.Имя, _Объект[_реквизит.Имя]);
		
	КонецЦикла;
	
	Для каждого _реквизит Из _метаданные.СтандартныеРеквизиты Цикл
		
		_ответ.Вставить(_реквизит.Имя, _Объект[_реквизит.Имя]);
		
	КонецЦикла;
	
	Для каждого _ТабличнаяЧасть Из _метаданные.ТабличныеЧасти Цикл
		
		_ответТЧ = Новый Массив;
		
		Для каждого _СтрокаТЧ Из _Объект[_ТабличнаяЧасть.Имя] Цикл
			_ответСтрока = Новый Структура;
			
			Для каждого _реквизит Из _ТабличнаяЧасть.СтандартныеРеквизиты Цикл
				_ответСтрока.Вставить(_реквизит.Имя, _СтрокаТЧ[_реквизит.Имя]);
			КонецЦикла;
			
			Для каждого _реквизит Из _ТабличнаяЧасть.Реквизиты Цикл
				_ответСтрока.Вставить(_реквизит.Имя, _СтрокаТЧ[_реквизит.Имя]);
			КонецЦикла;
			
			_ответТЧ.Добавить(_ответСтрока);
		КонецЦикла;
		
		_ответ.Вставить(_ТабличнаяЧасть.Имя, _ответТЧ);
		
	КонецЦикла;
	
	Возврат _ответ;
	
КонецФункции

Функция ПолучитьСтруктуруXDTO(пОбъект) Экспорт
	
	_ТипОбъекта = ТипЗнч(пОбъект);
	
	Если _ТипОбъекта = Тип("СписокXDTO") Тогда
		_Список = Новый Массив;
		Для каждого _Значение Из пОбъект Цикл
			_Список.Добавить(ПолучитьСтруктуруXDTO(_Значение));
		КонецЦикла;
		Возврат _Список;
	ИначеЕсли _ТипОбъекта = Тип("ОбъектXDTO") Тогда
		_Структура = Новый Структура;
		_Тип = пОбъект.Тип();
		_Тип = ПолучитьТип(_Тип.URIПространстваИмен, _Тип.Имя);
		Если НЕ _Тип = Неопределено Тогда
			_Структура.Вставить("Тип", _Тип);
		КонецЕсли;
		Если НЕ пОбъект.Свойства().Получить("guid") = Неопределено И НЕ пОбъект.guid = Неопределено Тогда
			_Структура.Вставить("ref", пОбъект.guid);
		ИначеЕсли НЕ пОбъект.Свойства().Получить("uuid") = Неопределено И НЕ пОбъект.uuid = Неопределено Тогда
			_Структура.Вставить("ref", пОбъект.uuid);
		КонецЕсли;
		Для каждого _Свойство Из пОбъект.Свойства() Цикл
			_Значение = ПолучитьСтруктуруXDTO(пОбъект[_Свойство.Имя]);
			Если НЕ _Значение = Неопределено Тогда
				_Структура.Вставить(_Свойство.Имя, _Значение);
			КонецЕсли;
		КонецЦикла;
		Возврат _Структура;
	Иначе
		Возврат пОбъект;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТип(URI, пИмя, ПоУмолчанию = Неопределено)
	
	Если URI = ВетисDictionary.URI() Тогда
		Если Ложь Тогда
		ИначеЕсли пИмя = "AnimalDisease" Тогда
			Возврат "Справочник.ВетисAnimalDisease";
		ИначеЕсли пИмя = "BusinessEntity" Тогда
			Возврат "Справочник.ВетисBusinessEntity";
		ИначеЕсли пИмя = "Country" Тогда
			Возврат "Справочник.ВетисCountry";
		ИначеЕсли пИмя = "District" Тогда
			Возврат "Справочник.ВетисDistrict";
		ИначеЕсли пИмя = "Enterprise" Тогда
			Возврат "Справочник.ВетисEnterprise";
		ИначеЕсли пИмя = "EnterpriseActivity" Тогда
			Возврат "Справочник.ВетисEnterpriseActivity";
		ИначеЕсли пИмя = "IncorporationForm" Тогда
			Возврат "Справочник.ВетисIncorporationForm";
		ИначеЕсли пИмя = "Locality" Тогда
			Возврат "Справочник.ВетисLocality";
		ИначеЕсли пИмя = "PackingType" Тогда
			Возврат "Справочник.ВетисPackingForm";
		ИначеЕсли пИмя = "PackingForm" Тогда
			Возврат "Справочник.ВетисPackingForm";
		ИначеЕсли пИмя = "Producer" Тогда
			Возврат "Справочник.ВетисEnterprise";
		ИначеЕсли пИмя = "Product" Тогда
			Возврат "Справочник.ВетисProduct";
		ИначеЕсли пИмя = "ProductItem" Тогда
			Возврат "Справочник.ВетисProductItem";
		ИначеЕсли пИмя = "ProductType" Тогда
			Возврат "Справочник.ВетисProductType";
		ИначеЕсли пИмя = "Purpose" Тогда
			Возврат "Справочник.ВетисPurpose";
		ИначеЕсли пИмя = "Region" Тогда
			Возврат "Справочник.ВетисRegion";
		ИначеЕсли пИмя = "RegionalizationCondition" Тогда
			Возврат "Справочник.ВетисRegionalizationCondition";
		ИначеЕсли пИмя = "Street" Тогда
			Возврат "Справочник.ВетисStockEntry";
		ИначеЕсли пИмя = "SubProduct" Тогда
			Возврат "Справочник.ВетисSubProduct";
		ИначеЕсли пИмя = "Unit" Тогда
			Возврат "Справочник.ВетисUnit";
		Иначе
			Возврат ПоУмолчанию;
		КонецЕсли;
	ИначеЕсли URI = ВетисMercuryVetdocument.URI() Тогда
		Если Ложь Тогда
		ИначеЕсли пИмя = "StockEntry" Тогда
			Возврат "Справочник.ВетисStockEntry";
		ИначеЕсли пИмя = "User" Тогда
			Возврат "Справочник.ВетисUser";
		ИначеЕсли пИмя = "VetDocument" Тогда
			Возврат "Документ.ВетисВетеринарноСопроводительныйДокумент";
		Иначе
			Возврат ПоУмолчанию;
		КонецЕсли;
	Иначе
		Возврат ПоУмолчанию;
	КонецЕсли;
	
КонецФункции


Функция ИмяЭлементаПеречисления(ЗначениеПеречисления) Экспорт
	//УТ 10.3
	ИмяЭлемента = Строка(ЗначениеПеречисления);
	Для каждого ЭлементПеречисления Из Метаданные.Перечисления[ЗначениеПеречисления.Метаданные().Имя].ЗначенияПеречисления Цикл
		Если ЭлементПеречисления.Синоним = Строка(ЗначениеПеречисления) Тогда
			ИмяЭлемента = ЭлементПеречисления.Имя;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ИмяЭлемента;
	
КонецФункции

Функция ЭтоСсылка(Тип) Экспорт
	//УТ 10.3
	Если Тип = Тип("Неопределено") Тогда
		Возврат Ложь;
	Иначе
		Возврат Справочники.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
			ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип);
	КонецЕсли;
	
КонецФункции

Функция МенеджерПоИмени(пИмя) Экспорт
	
	_Метаданные = Метаданные.НайтиПоПолномуИмени(пИмя);
	
	Если _Метаданные = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли Метаданные.Справочники.Содержит(_Метаданные) Тогда
		Возврат Справочники[_Метаданные.Имя];
	ИначеЕсли Метаданные.Документы.Содержит(_Метаданные) Тогда
		Возврат Документы[_Метаданные.Имя];
	ИначеЕсли Метаданные.Перечисления.Содержит(_Метаданные) Тогда
		Возврат Перечисления[_Метаданные.Имя];
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(_Метаданные) Тогда
		Возврат РегистрыСведений[_Метаданные.Имя];
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(_Метаданные) Тогда
		Возврат РегистрыНакопления[_Метаданные.Имя];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОбъект(пМенеджер, пУИД, пСоздавать = Истина) Экспорт
	
	_Ссылка = пМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(пУИД));
	
	_Объект = _Ссылка.ПолучитьОбъект();
	Если _Объект = Неопределено И пСоздавать = Истина Тогда
		_метаданные = пМенеджер.ПустаяСсылка().Метаданные();
		Если Метаданные.Документы.Содержит(_метаданные) Тогда
			_Объект = пМенеджер.СоздатьДокумент();
		ИначеЕсли Метаданные.Справочники.Содержит(_метаданные) Тогда
			_Объект = пМенеджер.СоздатьЭлемент();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		_Объект.УстановитьСсылкуНового(_Ссылка);
	КонецЕсли;
	
	Возврат _Объект;
	
КонецФункции

Функция ПолучитьСсылку(пМенеджер, пУИД, пПроверять = Истина) Экспорт
	
	_Ссылка = ?(ТипЗнч(пМенеджер) = Тип("Строка"), Вычислить(пМенеджер), пМенеджер).ПолучитьСсылку(Новый УникальныйИдентификатор(пУИД));
	
	Если пПроверять = Истина Тогда
		Если СсылкаСуществует(_Ссылка) Тогда
			Возврат _Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат _Ссылка;
	КонецЕсли;
	
КонецФункции

Функция СсылкаСуществует(пСсылка) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ "+пСсылка.Метаданные().ПолноеИмя()+" ГДЕ Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", пСсылка);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

Функция ЗначениеРеквизита(пСсылка, пИмя) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ _Таблица."+пИмя+" КАК Значение ИЗ "+пСсылка.Метаданные().ПолноеИмя()+" КАК _Таблица ГДЕ _Таблица.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", пСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Значение;
	
КонецФункции
