
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьРеквизитыФормы();
	
	Для каждого _Элемент Из Элементы Цикл
		Если ТипЗнч(_Элемент) = Тип("ПолеФормы") Тогда
			Если Лев(_Элемент.ПутьКДанным, 2) = "сж" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "ТоварыПриИзменении");
			ИначеЕсли Лев(_Элемент.ПутьКДанным, 3) = "всд" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "ВСДПриИзменении");
			ИначеЕсли Лев(_Элемент.ПутьКДанным, 3) = "осм" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "РезультатыОсмотраПриИзменении");
			ИначеЕсли Лев(_Элемент.ПутьКДанным, 3) = "ттн" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "ТТНПриИзменении");
			ИначеЕсли Лев(_Элемент.ПутьКДанным, 3) = "упк" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "УпаковкаПриИзменении");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОтправительСвязь = Истина;
	
	ПолучательСвязь = Истина;
	
	//МногоуровневаяУпаковка = Ветис.Настройки_МногоуровневаяУпаковка();
	
	ПоказатьСрокГодностиСтрокой = ЗначениеЗаполнено(сжСрокГодностиСтрокой);
	
	ПоказатьДатаВыработкиСтрокой = ЗначениеЗаполнено(сжДатаВыработкиСтрокой);
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.Свойство("РучнойВызов") Тогда
		ЗаписатьРеквизитыФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьВидимость("Запись");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Параметр = ЭтаФорма.ИмяФормы Тогда
		//
	ИначеЕсли ИмяСобытия = "ВетисНастройки" Тогда
		УстановитьВидимость(ИмяСобытия);
	ИначеЕсли ИмяСобытия = "ВетисВерсия" Тогда
		УстановитьВидимость(ИмяСобытия);
	ИначеЕсли ИмяСобытия = "ВетисОтладка" Тогда
		//УстановитьВидимость(ИмяСобытия);
	ИначеЕсли ИмяСобытия = "ВетисТестовый" Тогда
		//
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
	
	Если Ложь Тогда
		//
	ИначеЕсли ЗначениеЗаполнено(Объект.uuid) Тогда
		_текст = "Этот ВСД уже создан в сервисе";
		Если ВетисВызовСервера.РазрешенаОтладка() Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюОбработкаОповещения", ЭтаФорма), _текст + "! Изменять его не рекомендуется. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Иначе
			Сообщить(_текст + " изменять его нельзя!", СтатусСообщения.Внимание);
		КонецЕсли;
	Иначе
		ЗаписатьРеквизитыФормы();
		_Параматры = Новый Структура("РежимЗаписи, РучнойВызов", РежимЗаписиДокумента.Проведение);
		Записать(_Параматры);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюОбработкаОповещения(пРезультат, пПараматры) Экспорт
	
	Если пРезультат = КодВозвратаДиалога.Да Тогда
		ЗаписатьРеквизитыФормы();
		_Параматры = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		Записать(_Параматры);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьИзСервиса(Команда)
	
	Перем _Отказ, _Ошибка;
	
	КомандаЗаполнитьИзСервисаСервер(_Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПогасить(Команда)
	
	Перем _Отказ, _Ошибка;
	
	Если НЕ Объект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (Ложь
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.ПустаяСсылка")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен")) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(сжСтранаПроисхождения) Тогда
		Сообщить("Не выбрана страна происхождения");
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаРезультатыОсмотра.Видимость Тогда
		Если НЕ ЗначениеЗаполнено(осмНазначениеГруза) Тогда
			Сообщить("Не выбрано назначение груза");
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(осмБлагополучиеМестности) Тогда
			Сообщить("Не заполнено благополучие местности");
			Возврат;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(всдНазначениеГруза) Тогда
			Сообщить("Не выбрано назначение груза");
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(всдБлагополучиеМестности) Тогда
			Сообщить("Не заполнено благополучие местности");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КомандаПогаситьСервер(_Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВозврат(Команда)
	
	Перем _Отказ, _Ошибка;
	
	//сделать: тестировать возврат
	
	Если НЕ Объект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (Ложь
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.ПустаяСсылка")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен")) Тогда
		Возврат;
	КонецЕсли;
	
	//Если НЕ ЗначениеЗаполнено(сжПроизводительПредприятие) Тогда
	//	Сообщить("Не выбран производитель");
	//	Возврат;
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(сжСтранаПроисхождения) Тогда
		Сообщить("Не выбрана страна происхождения");
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаРезультатыОсмотра.Видимость Тогда
		Если НЕ ЗначениеЗаполнено(осмНазначениеГруза) Тогда
			Сообщить("Не выбрано назначение груза");
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(осмБлагополучиеМестности) Тогда
			Сообщить("Не заполнено благополучие местности");
			Возврат;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(всдНазначениеГруза) Тогда
			Сообщить("Не выбрано назначение груза");
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(всдБлагополучиеМестности) Тогда
			Сообщить("Не заполнено благополучие местности");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КомандаВозвратСервер(_Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	ТоварыПриИзмененииНаСервере(Элемент.Имя);
	
	Если Элемент = Элементы.сжСкоропортящаяся Тогда
		УстановитьВидимость("Скоропортящаяся");
	КонецЕсли;
	////MERC13283 - При указании упаковки необходимо указать хотя бы одно из следующих полей - UUID/GUID/код.
	//Элементы.сжУпаковка.АвтоОтметкаНезаполненного = сжКоличествоМест > 0;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПриИзмененииНаСервере(ЭлементИмя)
	
	Если Элементы[ЭлементИмя].ПутьКДанным = "сжProductItem" Тогда
		//сжЕдиницаИзмерения = сжProductItem.ЕдиницаХраненияОстатков;
		//сжСтранаПроисхождения = сжProductItem.СтранаПроисхождения;
		//сжSubProduct = сжProductItem.НоменклатурнаяГруппа;
	ИначеЕсли Элементы[ЭлементИмя].ПутьКДанным = "сжSubProduct" Тогда
		сжProductItem = Неопределено;
		сжЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВСДПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатыОсмотраПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТТНПриИзменении(Элемент)
	
	Если Элемент = Элементы.ттнТранспорт Тогда
		ттнТранспортПриИзменении(Элемент);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура сжSubProductПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	сжProductItem = Неопределено;
	
	сжProductItemName = "";
	
	ТоварыПриИзмененииНаСервере("сжSubProduct");
	
КонецПроцедуры

&НаКлиенте
Процедура сжProductItemПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	сжProductItemName = "";
	
	ТоварыПриИзмененииНаСервере("сжProductItem");
	
КонецПроцедуры



&НаКлиенте
Процедура ОтправительПриИзменении(Элемент)
	
	Объект.ОтправительПредприятие = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ОтправительСвязь Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Объект.Отправитель) Тогда
			ОткрытьФорму("Справочник.ВетисEnterprise.ФормаВыбора", Новый Структура("BusinessEntity", Объект.Отправитель),,,,,Новый ОписаниеОповещения("ОтправительПредприятиеОбработкаОповещения",ЭтаФорма));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПредприятиеОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		Объект.ОтправительПредприятие = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительСвязьНажатие(Элемент)
	
	ОтправительСвязь = НЕ ОтправительСвязь;
	
	УстановитьВидимостьКлиент("ОтправительСвязь");
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	Объект.ПолучательПредприятие = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПолучательСвязь Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Объект.Получатель) Тогда
			ОткрытьФорму("Справочник.ВетисEnterprise.ФормаВыбора", Новый Структура("BusinessEntity", Объект.Получатель),,,,,Новый ОписаниеОповещения("ПолучательПредприятиеОбработкаОповещения",ЭтаФорма));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПредприятиеОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		Объект.ПолучательПредприятие = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательСвязьНажатие(Элемент)
	
	ПолучательСвязь = НЕ ПолучательСвязь;
	
	УстановитьВидимостьКлиент("ПолучательСвязь");
	
КонецПроцедуры


&НаКлиенте
Процедура ттнТранспортПриИзменении(Элемент)
	
	ттнТранспортПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ттнТранспортПриИзмененииНаСервере()
	
	ттнНомерТранспорта = ттнТранспорт.Номер;
	
	ттнНомерПрицепа = ттнТранспорт.НомерПрицепа;
	
	ттнТипТранспорта = ттнТранспорт.ТипТранспорта;
	
	ттнПосредник = ттнТранспорт.Перевозчик;
	
	ттнСпособХранения = ттнТранспорт.СпособХранения;
	
КонецФункции


&НаКлиенте
Процедура УпаковкаПриАктивизацииСтроки(Элемент)
	
	_ТекущиеДанные = Элементы.Упаковка.ТекущиеДанные;
	
	Если _ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", _ТекущиеДанные.КлючСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 1;//ссылка всегда на первую(единственную) строку Товары
		Элемент.ТекущиеДанные.КлючСтроки = ПолучитьКлючСтроки();
		Элементы.Маркировка.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", Элемент.ТекущиеДанные.КлючСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПередУдалением(Элемент, Отказ)
	
	Для каждого _Строка Из Объект.Маркировка.НайтиСтроки(Новый Структура("КлючСвязи", Элементы.Упаковка.ТекущиеДанные.КлючСтроки)) Цикл
		Объект.Маркировка.Удалить(_Строка);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура МаркировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Элементы.Упаковка.ТекущиеДанные = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркировкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	_ТекущиеДанные = Элементы.Упаковка.ТекущиеДанные;
	
	Если _ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСвязи = _ТекущиеДанные.КлючСтроки;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьСрокГодностиСтрокойПриИзменении(Элемент)
	
	УстановитьВидимость("СрокГодности");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДатаВыработкиСтрокойПриИзменении(Элемент)
	
	УстановитьВидимость("ДатаВыработки");
	
КонецПроцедуры



&НаСервере
Процедура ЗаполнитьРеквизитыФормы()
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		Для каждого _Строка Из Объект.Товары Цикл
			Если Лев(_Реквизит.Имя, 2) = "сж" Тогда
				ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 3)];
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		//Для каждого _Строка Из Объект.ВСД Цикл
		//	Если Лев(_Реквизит.Имя, 3) = "всд" Тогда
		//		ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 4)];
		//	КонецЕсли;
		//	Прервать;
		//КонецЦикла;
		
		Для каждого _Строка Из Объект.РезультатыОсмотра Цикл
			Если Лев(_Реквизит.Имя, 3) = "осм" Тогда
				ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 4)];
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		Для каждого _Строка Из Объект.ТТН Цикл
			Если Лев(_Реквизит.Имя, 3) = "ттн" Тогда
				ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 4)];
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		Для каждого _Строка Из Объект.Упаковка Цикл
			Если Лев(_Реквизит.Имя, 3) = "упк" Тогда
				ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 4)];
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		Для каждого _Строка Из Объект.Маркировка Цикл
			Если Лев(_Реквизит.Имя, 3) = "мрк" Тогда
				ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 4)];
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРеквизитыФормы()
	
	Объект.Товары.Очистить();
	//Объект.ВСД.Очистить();
	Объект.ТТН.Очистить();
	Объект.РезультатыОсмотра.Очистить();
	
	//Если НЕ МногоуровневаяУпаковка Тогда
	//	Объект.Упаковка.Очистить();
	//	Объект.Маркировка.Очистить();
	//КонецЕсли;
	
	_СтрокаСЖ = Объект.Товары.Добавить();
	//_СтрокаВСД = Объект.ВСД.Добавить();
	_СтрокаТТН = Объект.ТТН.Добавить();
	_СтрокаОСМ = Объект.РезультатыОсмотра.Добавить();
	
	_СтрокаСЖ.КлючСтроки = 1;
	
	//Если НЕ МногоуровневаяУпаковка Тогда
	//	_СтрокаУПК = Объект.Упаковка.Добавить();
	//	_СтрокаМРК = Объект.Маркировка.Добавить();
	//	_СтрокаУПК.КлючСтроки = 1;
	//	_СтрокаУПК.КлючСвязи = 1;
	//	_СтрокаМРК.КлючСвязи = 1;
	//	упкУровень = ?(ЗначениеЗаполнено(упкУровень), упкУровень, Ветис.Настройки_УровеньУпаковки());
	//	мркКлассМаркировки = ?(ЗначениеЗаполнено(мркКлассМаркировки), мркКлассМаркировки, Ветис.Настройки_КлассМаркировки());
	//КонецЕсли;
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		Если Лев(_Реквизит.Имя, 2) = "сж" Тогда
			_СтрокаСЖ[Сред(_Реквизит.Имя, 3)] = ЭтаФорма[_Реквизит.Имя];
		//ИначеЕсли Лев(_Реквизит.Имя, 3) = "всд" Тогда
		//	_СтрокаВСД[Сред(_Реквизит.Имя, 4)] = ЭтаФорма[_Реквизит.Имя];
		ИначеЕсли Лев(_Реквизит.Имя, 3) = "осм" Тогда
			_СтрокаОСМ[Сред(_Реквизит.Имя, 4)] = ЭтаФорма[_Реквизит.Имя];
		ИначеЕсли Лев(_Реквизит.Имя, 3) = "ттн" Тогда
			_СтрокаТТН[Сред(_Реквизит.Имя, 4)] = ЭтаФорма[_Реквизит.Имя];
		//ИначеЕсли НЕ МногоуровневаяУпаковка И Лев(_Реквизит.Имя, 3) = "упк" Тогда
		//	_СтрокаУПК[Сред(_Реквизит.Имя, 4)] = ЭтаФорма[_Реквизит.Имя];
		//ИначеЕсли НЕ МногоуровневаяУпаковка И Лев(_Реквизит.Имя, 3) = "мрк" Тогда
		//	_СтрокаМРК[Сред(_Реквизит.Имя, 4)] = ЭтаФорма[_Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура КомандаЗаполнитьИзСервисаСервер(пОтказ = Ложь, пОшибка = "")
	
	_vetDocument = ВетисMercuryApplicationsСлой1с.getVetDocumentByUuid(Объект, пОтказ, пОшибка);
	
	Если пОтказ = Истина Тогда
		Возврат;
	ИначеЕсли НЕ пОтказ = Истина Тогда
		Если Ветис.Версия_2_0() Тогда
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать_20(Объект, _vetDocument);
		Иначе
			ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(Объект, _vetDocument);
		КонецЕсли;
		ЗаполнитьРеквизитыФормы();
		Если Ветис.РазрешенаОтладка() Тогда
			Модифицированность = Истина;
		ИначеЕсли ЗначениеЗаполнено(Объект.uuid) Тогда
			Записать();
		Иначе
			Модифицированность = Истина;
		КонецЕсли;
		УстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомандаПогаситьСервер(пОтказ = Ложь, пОшибка = "")
	
	ЗаписатьРеквизитыФормы();
	
	_всд = ВетисОбщегоНазначения.ПолучитьСтруктуруОбъекта(Объект.Ссылка);
	
	ВетисMercuryApplicationsСлой1с.IncomingOperation(_всд, пОтказ, пОшибка);
	
	Если НЕ пОтказ = Истина Тогда
		Модифицированность = Истина;
		Объект.uuid = _всд.uuid;
		Объект.Статус = _всд.Статус;
		Записать();
		УстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомандаВозвратСервер(пОтказ = Ложь, пОшибка = "")
	
	//_productItem = ?(Ветис.Версия_2_0(), ВетисDictionaryСлой1с, ВетисArgusProductionСлой1с).ProductItem(сжProductItem);
	//Если ЗначениеЗаполнено(_productItem.guid) Тогда
	//	//
	//Иначе
		_subProductGuid  = ?(Ветис.Версия_2_0(), ВетисDictionaryСлой1с, ВетисArgusProductionСлой1с).SubProduct(сжSubProduct);
		Если НЕ ПустаяСтрока(_subProductGuid) Тогда
			//
		Иначе
			//не заполнены ключевые поля, выходим
			пОтказ = Истина;
			пОшибка = "Нет сопоставления для номенклатуры";
			Возврат;
		КонецЕсли;
	//КонецЕсли;
	
	ЗаписатьРеквизитыФормы();
	
	_сж = Объект.Товары.Получить(0);
	
	_Строка = Новый Структура("Возврат,ВозвратныйВСД,Количество,КоличествоМест,КоличествоВозврат,КоличествоМестВозврат", Истина,,
		_сж.Количество, _сж.КоличествоМест, _сж.Количество, _сж.КоличествоМест);
	
	ВетисMercuryApplicationsСлой1с.IncomingOperation(_Строка, Объект.Упаковка, Объект.Маркировка, Объект, Объект.Дата, пОтказ, пОшибка);
	
	Если НЕ пОтказ = Истина Тогда
		Записать();
		УстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКлиент(пИмяСобытия = Неопределено)
	
	Если пИмяСобытия = "ОтправительСвязь" ИЛИ пИмяСобытия = Неопределено Тогда
		Элементы.ОтправительСвязь.Подсказка = ?(ОтправительСвязь, "с учетом связи", "без учета связи");
		Элементы.ОтправительСвязь.Картинка = ?(ОтправительСвязь, БиблиотекаКартинок.ВетисЕстьСвязь, БиблиотекаКартинок.ВетисНетСвязи);
	КонецЕсли;
	
	Если пИмяСобытия = "ПолучательСвязь" ИЛИ пИмяСобытия = Неопределено Тогда
		Элементы.ПолучательСвязь.Подсказка = ?(ПолучательСвязь, "с учетом связи", "без учета связи");
		Элементы.ПолучательСвязь.Картинка = ?(ПолучательСвязь, БиблиотекаКартинок.ВетисЕстьСвязь, БиблиотекаКартинок.ВетисНетСвязи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость(пИмяСобытия = Неопределено)
	
	//_МногоуровневаяУпаковка = Ветис.Настройки_МногоуровневаяУпаковка();
	
	Если пИмяСобытия = Неопределено Тогда
		Элементы.uuid.Видимость = Ветис.Настройки_ПоказыватьGuid();
	КонецЕсли;
	
	Если пИмяСобытия = Неопределено ИЛИ пИмяСобытия = "ДатаВыработки" ИЛИ пИмяСобытия = "СрокГодности" Тогда
		Элементы.сжВыработкаНачало.Видимость = НЕ ПоказатьДатаВыработкиСтрокой;
		Элементы.сжВыработкаКонец.Видимость = НЕ ПоказатьДатаВыработкиСтрокой;
		Элементы.сжДатаВыработкиСтрокой.Видимость = ПоказатьДатаВыработкиСтрокой;
		Элементы.сжСрокГодностиНачало.Видимость = НЕ ПоказатьСрокГодностиСтрокой;
		Элементы.сжСрокГодностиКонец.Видимость = НЕ ПоказатьСрокГодностиСтрокой;
		Элементы.сжСрокГодностиСтрокой.Видимость = ПоказатьСрокГодностиСтрокой;
	КонецЕсли;
	
	Если пИмяСобытия = Неопределено ИЛИ пИмяСобытия = "ВетисНастройки" ИЛИ пИмяСобытия = "ВетисВерсия" Тогда
		_Версия20 = ?(ЗначениеЗаполнено(Объект.Версия), Объект.Версия, Ветис.Версия_2_0());
		//Элементы.ГруппаУпаковка.Видимость = _Версия20 И _МногоуровневаяУпаковка;
		Элементы.ГруппаМаршрутСледования.Видимость = _Версия20 И Ветис.Настройки_МультимодальныеПеревозки();
		Элементы.ГруппаЛабораторныеИсследования.Видимость = _Версия20 И Ветис.Настройки_ЛабораторныеИсследования();
		Элементы.ГруппаМероприятия.Видимость = _Версия20 И Ветис.Настройки_Мероприятия();
		//Элементы.ГруппаУсловияПеремещения.Видимость = _Версия20 И Ветис.Настройки_УсловияПеремещения();
		Элементы.ГруппаРезультатыОсмотра.Видимость = _Версия20;
		//Элементы.ГруппаПартии.Видимость = _Версия20;
		Элементы.ГруппаСвязанныеДокументы.Видимость = _Версия20 И ЗначениеЗаполнено(Объект.uuid);
		Элементы.ГруппаВСД.Видимость = НЕ _Версия20;
		//Элементы.сжИДПартии.Видимость = _Версия20;
		//Элементы.ГруппаПродукцияКолонка1Упаковка.Видимость = НЕ Элементы.ГруппаУпаковка.Видимость;
		//Элементы.ГруппаПродукцияКолонка2Упаковка.Видимость = НЕ Элементы.ГруппаУпаковка.Видимость;
	КонецЕсли;
	
	//Если пИмяСобытия = "ВетисНастройки" И НЕ МногоуровневаяУпаковка = _МногоуровневаяУпаковка Тогда
	//	Если МногоуровневаяУпаковка Тогда
	//		ЗаполнитьРеквизитыФормы();
	//	Иначе
	//		ЗаписатьРеквизитыФормы();
	//	КонецЕсли;
	//КонецЕсли;
	
	Если пИмяСобытия = "ВетисОтладка" ИЛИ пИмяСобытия = Неопределено Тогда
		_Отладка = Ветис.РазрешенаОтладка();
		//Элементы.ТипПоле1.Видимость = Ложь;
		//Элементы.ТипПоле1.Видимость = _Отладка;
		//Элементы.Тип1.Видимость = НЕ _Отладка;
		Элементы.ГруппаДополнительно.Видимость = _Отладка;
		Элементы.ГруппаStatusChange.Видимость = _Отладка;
		Элементы.ГруппаОтветственный.Видимость = _Отладка;
	КонецЕсли;
	
	Если пИмяСобытия = "Запись" ИЛИ пИмяСобытия = Неопределено Тогда
		Элементы.ФормаЗаполнитьИзСервиса.Видимость = ЗначениеЗаполнено(Объект.uuid);
		Элементы.ФормаКомандаПогасить.Видимость = Объект.Проведен И (Ложь
			ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.ПустаяСсылка")
			ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен"));
		Элементы.ФормаКомандаВозврат.Видимость = Элементы.ФормаКомандаПогасить.Видимость;
	КонецЕсли;
	
	Если пИмяСобытия = "Скоропортящаяся" ИЛИ пИмяСобытия = Неопределено Тогда
		Элементы.сжВыработкаНачало.ФорматРедактирования = ?(сжСкоропортящаяся, "ДФ='dd.MM.yyyy hh'", "ДЛФ=D");
		Элементы.сжВыработкаКонец.ФорматРедактирования = ?(сжСкоропортящаяся, "ДФ='dd.MM.yyyy hh'", "ДЛФ=D");
		Элементы.сжСрокГодностиНачало.ФорматРедактирования = ?(сжСкоропортящаяся, "ДФ='dd.MM.yyyy hh'", "ДЛФ=D");
		Элементы.сжСрокГодностиКонец.ФорматРедактирования = ?(сжСкоропортящаяся, "ДФ='dd.MM.yyyy hh'", "ДЛФ=D");
	КонецЕсли;
	
	//МногоуровневаяУпаковка = _МногоуровневаяУпаковка;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКлючСтроки()
	
	_список = Объект.Упаковка.Выгрузить().ВыгрузитьКолонку("КлючСтроки");
	
	Для _Индекс = 1 По 999 Цикл
		Если _список.Найти(_Индекс) = Неопределено Тогда
			Возврат _Индекс;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции
