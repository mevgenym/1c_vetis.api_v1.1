
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФорматДаты = "Мес";
	
	ЗаполнитьРеквизитыФормы();
	
	Для каждого _Элемент Из Элементы Цикл
		Если ТипЗнч(_Элемент) = Тип("ПолеФормы") Тогда
			Если Лев(_Элемент.ПутьКДанным, 2) = "сж" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "ТоварыПриИзменении");
			ИначеЕсли Лев(_Элемент.ПутьКДанным, 3) = "всд" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "ВСДПриИзменении");
			ИначеЕсли Лев(_Элемент.ПутьКДанным, 3) = "осм" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "РезультатыОсмотраПриИзменении");
			ИначеЕсли Лев(_Элемент.ПутьКДанным, 3) = "ттн" Тогда
				_Элемент.УстановитьДействие("ПриИзменении", "ТТНПриИзменении");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОтправительСвязь = Истина;
	
	ПолучательСвязь = Истина;
	
	ПоказатьСрокГодностиСтрокой = ЗначениеЗаполнено(сжСрокГодностиСтрокой);
	
	ПоказатьДатаВыработкиСтрокой = ЗначениеЗаполнено(сжДатаВыработкиСтрокой);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	
	УстановитьВидимостьКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.Свойство("РучнойВызов") Тогда
		ЗаписатьРеквизитыФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьВидимость("Запись");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Параметр = ЭтаФорма.ИмяФормы Тогда
		//
	ИначеЕсли ИмяСобытия = "ВетисНастройки" Тогда
		УстановитьВидимость(ИмяСобытия);
	ИначеЕсли ИмяСобытия = "ВетисВерсия" Тогда
		УстановитьВидимость(ИмяСобытия);
	ИначеЕсли ИмяСобытия = "ВетисОтладка" Тогда
		//УстановитьВидимость(ИмяСобытия);
	ИначеЕсли ИмяСобытия = "ВетисТестовый" Тогда
		//
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
	
	Если Ложь Тогда
		//
	ИначеЕсли ЗначениеЗаполнено(Объект.uuid) Тогда
		_текст = "Этот ВСД уже создан в сервисе";
		Если ВетисВызовСервера.РазрешенаОтладка() Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюОбработкаОповещения", ЭтаФорма), _текст + "! Изменять его не рекомендуется. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Иначе
			Сообщить(_текст + " изменять его нельзя!", СтатусСообщения.Внимание);
		КонецЕсли;
	Иначе
		ЗаписатьРеквизитыФормы();
		_Параматры = Новый Структура("РежимЗаписи, РучнойВызов", РежимЗаписиДокумента.Проведение);
		Записать(_Параматры);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюОбработкаОповещения(пРезультат, пПараматры) Экспорт
	
	Если пРезультат = КодВозвратаДиалога.Да Тогда
		ЗаписатьРеквизитыФормы();
		_Параматры = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		Записать(_Параматры);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьИзСервиса(Команда)
	
	Перем _Отказ, _Ошибка;
	
	КомандаЗаполнитьИзСервисаСервер(_Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура КомандаЗаполнитьИзСервисаСервер(пОтказ = Ложь, пОшибка = "")
	
	_vetDocument = ВетисMercuryApplicationsСлой1с.getVetDocumentByUuid(Объект, пОтказ, пОшибка);
	
	Если пОтказ = Истина Тогда
		Возврат;
	ИначеЕсли НЕ пОтказ = Истина Тогда
		ВетисMercuryVetdocumentСлой1с.VetDocumentКонвертировать(Объект, _vetDocument);
		ЗаполнитьРеквизитыФормы();
		Если Ветис.РазрешенаОтладка() Тогда
			Модифицированность = Истина;
		ИначеЕсли ЗначениеЗаполнено(Объект.uuid) Тогда
			Записать();
		Иначе
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПогасить(Команда)
	
	Перем _Отказ, _Ошибка;
	
	Если НЕ Объект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (Ложь
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.ПустаяСсылка")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен")) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(сжСтранаПроисхождения) Тогда
		Сообщить("Не выбрана страна происхождения");
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаРезультатыОсмотра.Видимость Тогда
		Если НЕ ЗначениеЗаполнено(осмНазначениеГруза) Тогда
			Сообщить("Не выбрано назначение груза");
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(осмБлагополучиеМестности) Тогда
			Сообщить("Не заполнено благополучие местности");
			Возврат;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(всдНазначениеГруза) Тогда
			Сообщить("Не выбрано назначение груза");
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(всдБлагополучиеМестности) Тогда
			Сообщить("Не заполнено благополучие местности");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КомандаПогаситьСервер(_Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомандаПогаситьСервер(пОтказ = Ложь, пОшибка = "")
	
	ЗаписатьРеквизитыФормы();
	
	_всд = ВетисОбщегоНазначения.ПолучитьСтруктуруОбъекта(Объект.Ссылка);
	
	ВетисMercuryApplicationsСлой1с.IncomingOperation(_всд, пОтказ, пОшибка);
	
	Если НЕ пОтказ = Истина Тогда
		Модифицированность = Истина;
		Объект.uuid = _всд.uuid;
		Объект.Статус = _всд.Статус;
		Объект.statusChange.Очистить();
		Для каждого _statusChange Из _всд.statusChange Цикл
			ЗаполнитьЗначенияСвойств(Объект.statusChange.Добавить(), _statusChange);
		КонецЦикла;
		Записать();
		УстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВозврат(Команда)
	
	Перем _Отказ, _Ошибка;
	
	//сделать: тестировать возврат
	
	Если НЕ Объект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (Ложь
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.ПустаяСсылка")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен")) Тогда
		Возврат;
	КонецЕсли;
	
	//Если НЕ ЗначениеЗаполнено(сжПроизводительПредприятие) Тогда
	//	Сообщить("Не выбран производитель");
	//	Возврат;
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(сжСтранаПроисхождения) Тогда
		Сообщить("Не выбрана страна происхождения");
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаРезультатыОсмотра.Видимость Тогда
		Если НЕ ЗначениеЗаполнено(осмНазначениеГруза) Тогда
			Сообщить("Не выбрано назначение груза");
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(осмБлагополучиеМестности) Тогда
			Сообщить("Не заполнено благополучие местности");
			Возврат;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(всдНазначениеГруза) Тогда
			Сообщить("Не выбрано назначение груза");
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(всдБлагополучиеМестности) Тогда
			Сообщить("Не заполнено благополучие местности");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КомандаВозвратСервер(_Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомандаВозвратСервер(пОтказ = Ложь, пОшибка = "")
	
	Если НЕ ЗначениеЗаполнено(сжSubProduct) Тогда
		//
	Иначе
		//не заполнены ключевые поля, выходим
		пОтказ = Истина;
		пОшибка = "Нет сопоставления для номенклатуры";
		Возврат;
	КонецЕсли;
	
	ЗаписатьРеквизитыФормы();
	
	_сж = Объект.Товары.Получить(0);
	
	_Строка = Новый Структура("Возврат,ВозвратныйВСД,Количество,КоличествоМест,КоличествоВозврат,КоличествоМестВозврат", Истина,,
		_сж.Количество, _сж.КоличествоМест, _сж.Количество, _сж.КоличествоМест);
	
	ВетисMercuryApplicationsСлой1с.IncomingOperation(_Строка, Объект.Упаковка, Объект.Маркировка, Объект, Объект.Дата, пОтказ, пОшибка);
	
	Если НЕ пОтказ = Истина Тогда
		Записать();
		УстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаАннулировать(Команда)
	
	Если НЕ Объект.Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.ТипВСД = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentType.Транспортный") Тогда
		Возврат;
	КонецЕсли;
	
	_Причина = "";
	
	_оо = Новый ОписаниеОповещения("КомандаАннулироватьОбработкаОповещения", ЭтаФорма);
	
	ПоказатьВводСтроки(_оо, _Причина, "Причина аннулирования");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаАннулироватьОбработкаОповещения(Результат, Параметр) Экспорт
	
	Перем _Отказ, _Ошибка;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомандаАннулироватьСервер(Объект.Ссылка, Результат, _Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	Иначе
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КомандаАннулироватьСервер(пСсылка, пПричина, пОтказ = Ложь, пОшибка = "") Экспорт
	
	ВетисMercuryApplicationsСлой1с.WithdrawVetDocumentOperation(пСсылка, пПричина, пОтказ, пОшибка);
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаНажатие(Элемент)
	
	_Параметры = Новый Структура("Заголовок", сжProductItemName);
	
	_Параметры.Вставить("PackageList", Новый Массив);
	Для каждого _УпаковкаСтрока Из Объект.Упаковка Цикл
		_Строка = Новый Структура("КлючСтроки,level,packingType,quantity");
		_Строка.Вставить("КлючСтроки", _УпаковкаСтрока.КлючСтроки);
		_Строка.Вставить("level", _УпаковкаСтрока.Уровень);
		_Строка.Вставить("packingType", _УпаковкаСтрока.Упаковка);
		_Строка.Вставить("quantity", _УпаковкаСтрока.Количество);
		_Параметры.PackageList.Добавить(_Строка);
	КонецЦикла;
	
	_Параметры.Вставить("ProductMarks", Новый Массив);
	Для каждого _МаркировкаСтрока Из Объект.Маркировка Цикл
		_Строка = Новый Структура("КлючСвязи,value,class");
		_Строка.Вставить("КлючСвязи", _МаркировкаСтрока.КлючСвязи);
		_Строка.Вставить("value", _МаркировкаСтрока.Маркировка);
		_Строка.Вставить("class", _МаркировкаСтрока.КлассМаркировки);
		_Параметры.ProductMarks.Добавить(_Строка);
	КонецЦикла;
	
	ОткрытьФорму("Справочник.ВетисStockEntry.Форма.ФормаУпаковка", _Параметры, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводителиНажатие(Элемент)
	
	_Параметры = Новый Структура("Заголовок", сжProductItemName);
	
	_Параметры.Вставить("Список", Новый Массив);
	Для каждого _Строка Из Объект.Производители Цикл
		_Параметры.Список.Добавить(Новый Структура("producer,producerName,role", _Строка.Предприятие, _Строка.Наименование, _Строка.Роль));
	КонецЦикла;
	
	ОткрытьФорму("Справочник.ВетисStockEntry.Форма.ФормаПроизводители", _Параметры, ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	ТоварыПриИзмененииНаСервере(Элемент.Имя);
	
	Если Элемент = Элементы.сжСкоропортящаяся Тогда
		УстановитьВидимость("Скоропортящаяся");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПриИзмененииНаСервере(ЭлементИмя)
	
	Если Элементы[ЭлементИмя].ПутьКДанным = "сжProductItem" Тогда
		//сжЕдиницаИзмерения = сжProductItem.ЕдиницаХраненияОстатков;
		//сжСтранаПроисхождения = сжProductItem.СтранаПроисхождения;
		//сжSubProduct = сжProductItem.НоменклатурнаяГруппа;
	ИначеЕсли Элементы[ЭлементИмя].ПутьКДанным = "сжSubProduct" Тогда
		сжProductItem = Неопределено;
		сжЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВСДПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатыОсмотраПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТТНПриИзменении(Элемент)
	
	Если Элемент = Элементы.ттнТранспорт Тогда
		ттнТранспортПриИзменении(Элемент);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура сжSubProductПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	сжProductItem = Неопределено;
	
	сжProductItemName = "";
	
	ТоварыПриИзмененииНаСервере("сжSubProduct");
	
КонецПроцедуры

&НаКлиенте
Процедура сжProductItemПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	сжProductItemName = "";
	
	ТоварыПриИзмененииНаСервере("сжProductItem");
	
КонецПроцедуры



&НаКлиенте
Процедура ОтправительПриИзменении(Элемент)
	
	Если ОтправительСвязь Тогда
		Объект.ОтправительПредприятие = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	_параметры = Новый Структура("last,active", Истина,Истина);
	
	Если ОтправительСвязь И ЗначениеЗаполнено(Объект.Отправитель) Тогда
		_параметры.Вставить("BusinessEntity", Объект.Отправитель);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ВетисEnterprise.ФормаВыбора", _параметры,,,,,Новый ОписаниеОповещения("ОтправительПредприятиеОбработкаОповещения",ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПредприятиеОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		Объект.ОтправительПредприятие = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительСвязьНажатие(Элемент)
	
	ОтправительСвязь = НЕ ОтправительСвязь;
	
	УстановитьВидимостьКлиент("ОтправительСвязь");
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	Если ПолучательСвязь Тогда
		Объект.ПолучательПредприятие = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	_параметры = Новый Структура("last,active", Истина,Истина);
	
	Если ПолучательСвязь И ЗначениеЗаполнено(Объект.Получатель) Тогда
		_параметры.Вставить("BusinessEntity", Объект.Получатель);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ВетисEnterprise.ФормаВыбора", _параметры,,,,,Новый ОписаниеОповещения("ПолучательПредприятиеОбработкаОповещения",ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПредприятиеОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		Объект.ПолучательПредприятие = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательСвязьНажатие(Элемент)
	
	ПолучательСвязь = НЕ ПолучательСвязь;
	
	УстановитьВидимостьКлиент("ПолучательСвязь");
	
КонецПроцедуры


&НаКлиенте
Процедура ттнТранспортПриИзменении(Элемент)
	
	ттнТранспортПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ттнТранспортПриИзмененииНаСервере()
	
	ттнНомерТранспорта = ттнТранспорт.Номер;
	
	ттнНомерПрицепа = ттнТранспорт.НомерПрицепа;
	
	ттнТипТранспорта = ттнТранспорт.ТипТранспорта;
	
	ттнПосредник = ттнТранспорт.Перевозчик;
	
	ттнСпособХранения = ттнТранспорт.СпособХранения;
	
КонецФункции



&НаКлиенте
Процедура ПоказатьСрокГодностиСтрокойПриИзменении(Элемент)
	
	УстановитьВидимость("СрокГодности");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДатаВыработкиСтрокойПриИзменении(Элемент)
	
	УстановитьВидимость("ДатаВыработки");
	
КонецПроцедуры



&НаСервере
Процедура ЗаполнитьРеквизитыФормы()
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		Для каждого _Строка Из Объект.Товары Цикл
			Если Лев(_Реквизит.Имя, 2) = "сж" Тогда
				ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 3)];
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		//Для каждого _Строка Из Объект.ВСД Цикл
		//	Если Лев(_Реквизит.Имя, 3) = "всд" Тогда
		//		ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 4)];
		//	КонецЕсли;
		//	Прервать;
		//КонецЦикла;
		
		Для каждого _Строка Из Объект.РезультатыОсмотра Цикл
			Если Лев(_Реквизит.Имя, 3) = "осм" Тогда
				ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 4)];
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		Для каждого _Строка Из Объект.ТТН Цикл
			Если Лев(_Реквизит.Имя, 3) = "ттн" Тогда
				ЭтаФорма[_Реквизит.Имя] = _Строка[Сред(_Реквизит.Имя, 4)];
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРеквизитыФормы()
	
	Объект.Товары.Очистить();
	//Объект.ВСД.Очистить();
	Объект.ТТН.Очистить();
	Объект.РезультатыОсмотра.Очистить();
	
	_СтрокаСЖ = Объект.Товары.Добавить();
	//_СтрокаВСД = Объект.ВСД.Добавить();
	_СтрокаТТН = Объект.ТТН.Добавить();
	_СтрокаОСМ = Объект.РезультатыОсмотра.Добавить();
	
	_СтрокаСЖ.КлючСтроки = 1;
	
	Для каждого _Реквизит Из ПолучитьРеквизиты() Цикл
		Если Лев(_Реквизит.Имя, 2) = "сж" Тогда
			_СтрокаСЖ[Сред(_Реквизит.Имя, 3)] = ЭтаФорма[_Реквизит.Имя];
		//ИначеЕсли Лев(_Реквизит.Имя, 3) = "всд" Тогда
		//	_СтрокаВСД[Сред(_Реквизит.Имя, 4)] = ЭтаФорма[_Реквизит.Имя];
		ИначеЕсли Лев(_Реквизит.Имя, 3) = "осм" Тогда
			_СтрокаОСМ[Сред(_Реквизит.Имя, 4)] = ЭтаФорма[_Реквизит.Имя];
		ИначеЕсли Лев(_Реквизит.Имя, 3) = "ттн" Тогда
			_СтрокаТТН[Сред(_Реквизит.Имя, 4)] = ЭтаФорма[_Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьВидимостьКлиент(пИмяСобытия = Неопределено)
	
	Если пИмяСобытия = "ОтправительСвязь" ИЛИ пИмяСобытия = Неопределено Тогда
		Элементы.ОтправительСвязь.Подсказка = ?(ОтправительСвязь, "с учетом связи", "без учета связи");
		Элементы.ОтправительСвязь.Картинка = ?(ОтправительСвязь, БиблиотекаКартинок.ВетисЕстьСвязь, БиблиотекаКартинок.ВетисНетСвязи);
	КонецЕсли;
	
	Если пИмяСобытия = "ПолучательСвязь" ИЛИ пИмяСобытия = Неопределено Тогда
		Элементы.ПолучательСвязь.Подсказка = ?(ПолучательСвязь, "с учетом связи", "без учета связи");
		Элементы.ПолучательСвязь.Картинка = ?(ПолучательСвязь, БиблиотекаКартинок.ВетисЕстьСвязь, БиблиотекаКартинок.ВетисНетСвязи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость(пИмяСобытия = Неопределено)
	
	Если пИмяСобытия = Неопределено ИЛИ пИмяСобытия = "ДатаВыработки" ИЛИ пИмяСобытия = "СрокГодности" Тогда
		Элементы.сжВыработкаНачало.Видимость = НЕ ПоказатьДатаВыработкиСтрокой;
		Элементы.сжВыработкаКонец.Видимость = НЕ ПоказатьДатаВыработкиСтрокой;
		Элементы.сжДатаВыработкиСтрокой.Видимость = ПоказатьДатаВыработкиСтрокой;
		Элементы.сжСрокГодностиНачало.Видимость = НЕ ПоказатьСрокГодностиСтрокой;
		Элементы.сжСрокГодностиКонец.Видимость = НЕ ПоказатьСрокГодностиСтрокой;
		Элементы.сжСрокГодностиСтрокой.Видимость = ПоказатьСрокГодностиСтрокой;
		
		сжДатаВыработкиСтрокой = ?(ПоказатьДатаВыработкиСтрокой, сжДатаВыработкиСтрокой, "");
		сжСрокГодностиСтрокой = ?(ПоказатьСрокГодностиСтрокой, сжСрокГодностиСтрокой, "");
	КонецЕсли;
	
	Если пИмяСобытия = Неопределено ИЛИ пИмяСобытия = "ВетисНастройки" ИЛИ пИмяСобытия = "ВетисВерсия" Тогда
		_Версия20 = ?(ЗначениеЗаполнено(Объект.Версия), Объект.Версия, Ветис.Версия_2_0());
		Элементы.ГруппаМаршрутСледования.Видимость = _Версия20 И Ветис.Настройки_МультимодальныеПеревозки();
		Элементы.ГруппаЛабораторныеИсследования.Видимость = _Версия20 И Ветис.Настройки_ЛабораторныеИсследования();
		Элементы.ГруппаМероприятия.Видимость = _Версия20 И Ветис.Настройки_Мероприятия();
		//Элементы.ГруппаУсловияПеремещения.Видимость = _Версия20 И Ветис.Настройки_УсловияПеремещения();
		//Элементы.ГруппаРезультатыОсмотра.Видимость = _Версия20;
		//Элементы.ГруппаПартии.Видимость = _Версия20;
		Элементы.ГруппаСвязанныеДокументы.Видимость = _Версия20;
		//Элементы.ГруппаВСД.Видимость = НЕ _Версия20;
	КонецЕсли;
	
	Если пИмяСобытия = "ВетисОтладка" ИЛИ пИмяСобытия = Неопределено Тогда
		_Отладка = Ветис.РазрешенаОтладка();
		//Элементы.ТипПоле1.Видимость = Ложь;
		//Элементы.ТипПоле1.Видимость = _Отладка;
		//Элементы.Тип1.Видимость = НЕ _Отладка;
		Элементы.ГруппаДополнительно.Видимость = _Отладка;
		Элементы.ГруппаStatusChange.Видимость = _Отладка;
		Элементы.ГруппаОтветственный.Видимость = _Отладка;
	КонецЕсли;
	
	Если пИмяСобытия = "Запись" ИЛИ пИмяСобытия = Неопределено Тогда
		Элементы.ФормаЗаполнитьИзСервиса.Видимость = ЗначениеЗаполнено(Объект.uuid);
		Элементы.ФормаКомандаПогасить.Видимость = Объект.Проведен И (Ложь
			ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.ПустаяСсылка")
			ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ВетисVetDocumentStatus.Оформлен"));
		Элементы.ФормаКомандаВозврат.Видимость = Элементы.ФормаКомандаПогасить.Видимость;
	КонецЕсли;
	
	Если пИмяСобытия = "ФорматДаты" ИЛИ пИмяСобытия = "Скоропортящаяся" ИЛИ пИмяСобытия = Неопределено Тогда
		ОбработатьФорматДаты();
		//_формат = ?(сжСкоропортящаяся, "ДФ='dd.MM.yy'", ?(_День = 1, "ДФ='MM.yy'", "ДФ='dd.MM.yy'"));
		_формат = ?(ФорматДаты = "Мес", "ДФ='MM.yy'", ?(ФорматДаты = "День", "ДФ='dd.MM.yyyy'", ?(ФорматДаты = "Час", "ДФ='dd.MM.yyyy HH'", "ДФ='dd.MM.yyyy HH:mm'")));
		Элементы.сжВыработкаНачало.ФорматРедактирования = _формат;
		Элементы.сжВыработкаКонец.ФорматРедактирования = _формат;
		Элементы.сжСрокГодностиНачало.ФорматРедактирования = _формат;
		Элементы.сжСрокГодностиКонец.ФорматРедактирования = _формат;
	КонецЕсли;
	
	Если пИмяСобытия = Неопределено ИЛИ пИмяСобытия = "Упаковка" ИЛИ пИмяСобытия = "Производители" Тогда
		_представление = "";
		Для каждого _УпаковкаСтрока Из Объект.Упаковка Цикл
			_представление = _представление + ?(_представление = "", "", "; ") + Строка(_УпаковкаСтрока.Упаковка) + ", " + _УпаковкаСтрока.Количество;
			_маркировка = "";
			Для каждого _МаркировкаСтрока Из Объект.Маркировка Цикл
				Если _МаркировкаСтрока.КлючСвязи = _УпаковкаСтрока.КлючСтроки Тогда
					_маркировка = _маркировка + ?(_маркировка = "", "", "; ") + Строка(_МаркировкаСтрока.Маркировка);
				КонецЕсли;
			КонецЦикла;
			_представление = _представление + ?(_маркировка = "", "", " (" + _маркировка + ")");
		КонецЦикла;
		Если НЕ ПустаяСтрока(_представление) Тогда
			Элементы.Упаковка.Заголовок = ОбработатьПредставление(_представление);
		КонецЕсли;
		_представление = "";
		Для каждого _ПроизводителиСтрока Из Объект.Производители Цикл
			_представление = _представление + ?(ЗначениеЗаполнено(_ПроизводителиСтрока.Предприятие), Строка(_ПроизводителиСтрока.Предприятие), _ПроизводителиСтрока.Наименование);
		КонецЦикла;
		Если НЕ ПустаяСтрока(_представление) Тогда
			Элементы.Производители.Заголовок = ОбработатьПредставление(_представление);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПредставление(пЗначение)
	
	Возврат ?(СтрДлина(пЗначение) > 300, Лев(пЗначение, 300) + "...", пЗначение);
	
КонецФункции


&НаКлиенте
Процедура statusChangespecifiedPersonПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.statusChange.ТекущиеДанные.specifiedPerson) Тогда
		ЗаполнитьЗначенияСвойств(Элементы.statusChange.ТекущиеДанные, СвойстваПользователя(Элементы.statusChange.ТекущиеДанные.specifiedPerson));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура statusChangeПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ЗаполнитьЗначенияСвойств(Элемент.ТекущиеДанные, СвойстваПользователя());
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СвойстваПользователя(пСсылка = Неопределено)
	
	_Значение = Новый Структура;
	
	Если пСсылка = Неопределено Тогда
		_Значение.Вставить("fio", ВетисПовтИсп.ТекущийПользователь_Имя());
		_Значение.Вставить("post", ВетисПовтИсп.ТекущийПользователь_Должность());
		//_Значение.Вставить("specifiedPerson", ВетисПовтИсп.ТекущийПользователь_ПользовательВетис());
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	_Таблица.Ссылка,
		|	_Таблица.Наименование КАК fio,
		|	_Таблица.post
		|ИЗ
		|	Справочник.ВетисUser КАК _Таблица
		|ГДЕ
		|	_Таблица.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", пСсылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			_Значение.Вставить("fio", Выборка.fio);
			_Значение.Вставить("post", Выборка.post);
		КонецЕсли;
	КонецЕсли;
	
	Возврат _Значение;
	
КонецФункции

&НаКлиенте
Процедура ФорматДатыПриИзменении(Элемент)
	
	//ОбработатьФорматДаты();
	
	Если ФорматДаты = "Мес" Тогда
		сжДатаВыработкиНачало = НачалоМесяца(сжДатаВыработкиНачало);
		сжСрокГодностиНачало = НачалоМесяца(сжСрокГодностиНачало);
		сжДатаВыработкиКонец = НачалоМесяца(сжДатаВыработкиКонец);
		сжСрокГодностиКонец = НачалоМесяца(сжСрокГодностиКонец);
	ИначеЕсли ФорматДаты = "День" Тогда
		сжДатаВыработкиНачало = НачалоДня(сжДатаВыработкиНачало);
		сжСрокГодностиНачало = НачалоДня(сжСрокГодностиНачало);
		сжДатаВыработкиКонец = НачалоДня(сжДатаВыработкиКонец);
		сжСрокГодностиКонец = НачалоДня(сжСрокГодностиКонец);
	ИначеЕсли ФорматДаты = "Час" Тогда
		сжДатаВыработкиНачало = НачалоЧаса(сжДатаВыработкиНачало);
		сжСрокГодностиНачало = НачалоЧаса(сжСрокГодностиНачало);
		сжДатаВыработкиКонец = НачалоЧаса(сжДатаВыработкиКонец);
		сжСрокГодностиКонец = НачалоЧаса(сжСрокГодностиКонец);
	ИначеЕсли ФорматДаты = "Мин" Тогда
		сжДатаВыработкиНачало = НачалоМинуты(сжДатаВыработкиНачало);
		сжСрокГодностиНачало = НачалоМинуты(сжСрокГодностиНачало);
		сжДатаВыработкиКонец = НачалоМинуты(сжДатаВыработкиКонец);
		сжСрокГодностиКонец = НачалоМинуты(сжСрокГодностиКонец);
	КонецЕсли;
	
	УстановитьВидимость("ФорматДаты");
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьФорматДаты()
	
	_День = Макс(День(сжСрокГодностиНачало), День(сжСрокГодностиКонец), День(сжДатаВыработкиНачало), День(сжДатаВыработкиКонец));
	_Час = Макс(Час(сжСрокГодностиНачало), Час(сжСрокГодностиКонец), Час(сжДатаВыработкиНачало), Час(сжДатаВыработкиКонец));
	_Мин = Макс(Минута(сжСрокГодностиНачало), Минута(сжСрокГодностиКонец), Минута(сжДатаВыработкиНачало), Минута(сжДатаВыработкиКонец));
	ФорматДаты = ?(_Мин = 0, ?(_Час = 0, ?(_День = 1, ФорматДаты, "День"), "Час"), "Мин");
	
КонецПроцедуры
