
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФорматДаты = "Мес";
	
	уид = Объект.Ссылка.УникальныйИдентификатор();
	
	ПоказатьСрокГодностиСтрокой = ЗначениеЗаполнено(Объект.expiryDateInformal);
	
	ПоказатьДатаВыработкиСтрокой = ЗначениеЗаполнено(Объект.dateOfProductionInformal);
	
	ОтрисоватьЭлементы();
	
	ЗаполнитьРеквизиты(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаЗаполнитьИзСервиса(Команда)
	
	Перем _Ошибка, _Отказ;
	
	КомандаЗаполнитьИзСервисаНаСервере(_Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомандаЗаполнитьИзСервисаНаСервере(пОтказ = Ложь, пОшибка = "")
	
	_guid = Строка(Объект.Ссылка.УникальныйИдентификатор());
	
	_se = ВетисMercuryApplications.GetStockEntryByGuid(_guid, ВетисDictionaryСлой1с.Enterprise(Объект.Enterprise), Объект.BusinessEntity, пОтказ, пОшибка);
	
	Если пОтказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	_Объект = РеквизитФормыВЗначение("Объект");
	
	_Объект.Заполнить(_se);
	
	ЗначениеВРеквизитФормы(_Объект, "Объект");
	
	ОтрисоватьЭлементы();
	
	ЗаполнитьРеквизиты(_se);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьВСервисе(Команда)
	
	Перем _Отказ, _Ошибка;
	
	КомандаОбновитьВСервисеНаСервере(_Отказ, _Ошибка);
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомандаОбновитьВСервисеНаСервере(пОтказ = Ложь, пОшибка = "")
	
	Если НЕ Ветис.Версия_2_0() Тогда
		Возврат;
	КонецЕсли;
	
	_СтруктураПоиска = Новый Структура("КлючСвязи");
	
	_enterpriseGuid = ВетисDictionaryСлой1с.Enterprise(Объект.Enterprise);
	
	_stockEntry = ВетисMercuryVetdocument.StockEntry();
	
	Если ЗначениеЗаполнено(Объект.uuid) Тогда
		_stockEntry.uuid = Объект.uuid;
	КонецЕсли;
	
	_stockEntry.batch = BatchКонвертировать();
	
	Если Объект.ПометкаУдаления Тогда
		_stockEntry.batch.volume = 0;
		Для каждого _package Из _stockEntry.batch.packageList.package Цикл
			_package.quantity = 0;
		КонецЦикла;
	КонецЕсли;
	
	_stockEntryList = Новый Массив;
	_stockEntryList.Add(_stockEntry);
	
	_Результат = ВетисMercuryApplicationsСлой1с.ResolveDiscrepancy(_enterpriseGuid, _stockEntryList, "Инвентаризация", "", Объект.BusinessEntity, пОтказ, пОшибка);
	
	Если пОтказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	//новые идут одной строкой
	//измененные идут по две, новая и старая версия
	Для каждого _stockEntry Из _Результат.stockEntry Цикл
		Если _stockEntry.active И _stockEntry.last Тогда
			ЗаполнитьРеквизиты(_stockEntry);
			_Объект = РеквизитФормыВЗначение("Объект");
			_Объект.Заполнить(_stockEntry);
			ЗначениеВРеквизитФормы(_Объект, "Объект");
		КонецЕсли;
	КонецЦикла;
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСледующая(Команда)
	
	Перем _Отказ, _Ошибка;
	
	Если ЗначениеЗаполнено(next) Тогда
		КомандаСледующаяНаСервере(next, _Отказ, _Ошибка);
	КонецЕсли;
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПредыдущая(Команда)
	
	Перем _Отказ, _Ошибка;
	
	Если ЗначениеЗаполнено(previous) Тогда
		КомандаСледующаяНаСервере(previous, _Отказ, _Ошибка);
	КонецЕсли;
	
	Если _Отказ = Истина Тогда
		Сообщить(_Ошибка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомандаСледующаяНаСервере(Знач пUuid, пОтказ = Ложь, пОшибка = "")
	
	_se = ВетисMercuryApplications.GetStockEntryByUuid(пUuid, ВетисDictionaryСлой1с.Enterprise(Объект.Enterprise), Объект.BusinessEntity, пОтказ, пОшибка);
	
	Если пОтказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	_Объект = РеквизитФормыВЗначение("Объект");
	
	_Объект.Заполнить(_se);
	
	ЗначениеВРеквизитФормы(_Объект, "Объект");
	
	ЗаполнитьРеквизиты(_se);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаНажатие(Элемент)
	
	_Параметры = Новый Структура("Заголовок", Объект.ProductItemName);
	
	_Параметры.Вставить("PackageList", Новый Массив);
	Для каждого _УпаковкаСтрока Из Объект.PackageList Цикл
		_Строка = Новый Структура("КлючСтроки,level,packingType,quantity");
		ЗаполнитьЗначенияСвойств(_Строка, _УпаковкаСтрока);
		_Параметры.PackageList.Добавить(_Строка);
	КонецЦикла;
	
	_Параметры.Вставить("ProductMarks", Новый Массив);
	Для каждого _МаркировкаСтрока Из Объект.ProductMarks Цикл
		_Строка = Новый Структура("КлючСвязи,value,class");
		ЗаполнитьЗначенияСвойств(_Строка, _МаркировкаСтрока);
		_Параметры.ProductMarks.Добавить(_Строка);
	КонецЦикла;
	
	ОткрытьФорму("Справочник.ВетисStockEntry.Форма.ФормаУпаковка", _Параметры, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводителиНажатие(Элемент)
	
	_Параметры = Новый Структура("Заголовок", Объект.ProductItemName);
	
	_Параметры.Вставить("Список", Новый Массив);
	Для каждого _Строка Из Объект.ProducerList Цикл
		_Параметры.Список.Добавить(?(ЗначениеЗаполнено(_Строка.producer), Строка(_Строка.producer), _Строка.producerName));
	КонецЦикла;
	
	ОткрытьФорму("Справочник.ВетисStockEntry.Форма.ФормаПроизводители", _Параметры, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВетДокументыНажатие(Элемент)
	
	Если Объект.VetDocumentList.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли Объект.VetDocumentList.Количество() = 1 Тогда
		ОткрытьЗначение(Объект.VetDocumentList[0].vetDocument);
	Иначе
		//форма списка
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура BusinessEntityПриИзменении(Элемент)
	
	Объект.Enterprise = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура EnterpriseНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПредприятиеСвязь Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Объект.BusinessEntity) Тогда
			ОткрытьФорму("Справочник.ВетисEnterprise.ФормаВыбора", Новый Структура("Ключ, BusinessEntity", Объект.Enterprise, Объект.BusinessEntity),,,,,Новый ОписаниеОповещения("EnterpriseОбработкаОповещения",ЭтаФорма));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура EnterpriseОбработкаОповещения(Результат, Параметр) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Объект.Enterprise = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеСвязьНажатие(Элемент)
	
	ПредприятиеСвязь = НЕ ПредприятиеСвязь;
	
	УстановитьВидимость("ПредприятиеСвязь");
	
КонецПроцедуры


&НаКлиенте
Процедура ProductItemNameПриИзменении(Элемент)
	
	Наименование = Объект.ProductItemName;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУпаковкаНажатие(Элемент)
	
	//открыть форму редактирования упаковок
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПроизводителиНажатие(Элемент)
	
	//открыть форму редактирования производителей
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДатаВыработкиСтрокойПриИзменении(Элемент)
	
	УстановитьВидимость("ДатаВыработки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСрокГодностиСтрокойПриИзменении(Элемент)
	
	УстановитьВидимость("СрокГодности");
	
КонецПроцедуры


&НаКлиенте
Процедура ФорматДатыПриИзменении(Элемент)
	
	Если ФорматДаты = "Мес" Тогда
		Объект.dateOfProductionFirst = НачалоМесяца(Объект.dateOfProductionFirst);
		Объект.expiryDateFirst = НачалоМесяца(Объект.expiryDateFirst);
		Объект.dateOfProductionSecond = НачалоМесяца(Объект.dateOfProductionSecond);
		Объект.expiryDateSecond = НачалоМесяца(Объект.expiryDateSecond);
	ИначеЕсли ФорматДаты = "День" Тогда
		Объект.dateOfProductionFirst = НачалоДня(Объект.dateOfProductionFirst);
		Объект.expiryDateFirst = НачалоДня(Объект.expiryDateFirst);
		Объект.dateOfProductionSecond = НачалоДня(Объект.dateOfProductionSecond);
		Объект.expiryDateSecond = НачалоДня(Объект.expiryDateSecond);
	ИначеЕсли ФорматДаты = "Час" Тогда
		Объект.dateOfProductionFirst = НачалоЧаса(Объект.dateOfProductionFirst);
		Объект.expiryDateFirst = НачалоЧаса(Объект.expiryDateFirst);
		Объект.dateOfProductionSecond = НачалоЧаса(Объект.dateOfProductionSecond);
		Объект.expiryDateSecond = НачалоЧаса(Объект.expiryDateSecond);
	ИначеЕсли ФорматДаты = "Мин" Тогда
		Объект.dateOfProductionFirst = НачалоМинуты(Объект.dateOfProductionFirst);
		Объект.expiryDateFirst = НачалоМинуты(Объект.expiryDateFirst);
		Объект.dateOfProductionSecond = НачалоМинуты(Объект.dateOfProductionSecond);
		Объект.expiryDateSecond = НачалоМинуты(Объект.expiryDateSecond);
	КонецЕсли;
	
	УстановитьВидимость("ФорматДаты");
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьВидимость(пИмяСобытия = Неопределено)
	
	Если пИмяСобытия = Неопределено ИЛИ пИмяСобытия = "ДатаВыработки" ИЛИ пИмяСобытия = "СрокГодности" Тогда
		Элементы.dateOfProductionFirst.Видимость = НЕ ПоказатьДатаВыработкиСтрокой;
		Элементы.dateOfProductionSecond.Видимость = НЕ ПоказатьДатаВыработкиСтрокой;
		Элементы.dateOfProductionInformal.Видимость = ПоказатьДатаВыработкиСтрокой;
		Элементы.expiryDateFirst.Видимость = НЕ ПоказатьСрокГодностиСтрокой;
		Элементы.expiryDateSecond.Видимость = НЕ ПоказатьСрокГодностиСтрокой;
		Элементы.expiryDateInformal.Видимость = ПоказатьСрокГодностиСтрокой;
		
		Объект.dateOfProductionInformal = ?(ПоказатьДатаВыработкиСтрокой, Объект.dateOfProductionInformal, "");
		Объект.expiryDateInformal = ?(ПоказатьСрокГодностиСтрокой, Объект.expiryDateInformal, "");
	КонецЕсли;
	
	Если пИмяСобытия = "ФорматДаты" ИЛИ пИмяСобытия = "Скоропортящаяся" ИЛИ пИмяСобытия = Неопределено Тогда
		ОбработатьФорматДаты();
		_формат = ?(ФорматДаты = "Мес", "ДФ='MM.yy'", ?(ФорматДаты = "День", "ДФ='dd.MM.yyyy'", ?(ФорматДаты = "Час", "ДФ='dd.MM.yyyy HH'", "ДФ='dd.MM.yyyy HH:mm'")));
		Элементы.dateOfProductionFirst.ФорматРедактирования = _формат;
		Элементы.dateOfProductionSecond.ФорматРедактирования = _формат;
		Элементы.expiryDateFirst.ФорматРедактирования = _формат;
		Элементы.expiryDateSecond.ФорматРедактирования = _формат;
	КонецЕсли;
	
	Если пИмяСобытия = "ПредприятиеСвязь" ИЛИ пИмяСобытия = Неопределено Тогда
		Элементы.ПредприятиеСвязь.Подсказка = ?(ПредприятиеСвязь, "с учетом связи", "без учета связи");
		Элементы.ПредприятиеСвязь.Картинка = ?(ПредприятиеСвязь, БиблиотекаКартинок.ВетисЕстьСвязь, БиблиотекаКартинок.ВетисНетСвязи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФорматДаты()
	
	_День = Макс(День(Объект.expiryDateFirst), День(Объект.expiryDateSecond), День(Объект.dateOfProductionFirst), День(Объект.dateOfProductionSecond));
	_Час = Макс(Час(Объект.expiryDateFirst), Час(Объект.expiryDateSecond), Час(Объект.dateOfProductionFirst), Час(Объект.dateOfProductionSecond));
	_Мин = Макс(Минута(Объект.expiryDateFirst), Минута(Объект.expiryDateSecond), Минута(Объект.dateOfProductionFirst), Минута(Объект.dateOfProductionSecond));
	ФорматДаты = ?(_Мин = 0, ?(_Час = 0, ?(_День = 1, ФорматДаты, "День"), "Час"), "Мин");
	
КонецПроцедуры


&НаСервере
Процедура ОтрисоватьЭлементы()
	
	_представление = "";
	Для каждого _УпаковкаСтрока Из Объект.PackageList Цикл
		_представление = _представление + ?(_представление = "", "", "; ") + Строка(_УпаковкаСтрока.packingType) + ", " + _УпаковкаСтрока.quantity;
		_маркировка = "";
		Для каждого _МаркировкаСтрока Из Объект.ProductMarks Цикл
			Если _МаркировкаСтрока.КлючСвязи = _УпаковкаСтрока.КлючСтроки Тогда
				_маркировка = _маркировка + ?(_маркировка = "", "", "; ") + Строка(_МаркировкаСтрока.value);
			КонецЕсли;
		КонецЦикла;
		_представление = _представление + ?(_маркировка = "", "", " (" + _маркировка + ")");
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(_представление) Тогда
		Элементы.Упаковка.Заголовок = ОбработатьПредставление(_представление);
	КонецЕсли;
	
	_представление = "";
	Для каждого _ПроизводителиСтрока Из Объект.ProducerList Цикл
		_представление = _представление + ?(ЗначениеЗаполнено(_ПроизводителиСтрока.producer), Строка(_ПроизводителиСтрока.producer), _ПроизводителиСтрока.producerName);
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(_представление) Тогда
		Элементы.Производители.Заголовок = ОбработатьПредставление(_представление);
	КонецЕсли;
	
	_представление = "";
	Для каждого _ВетДокументыСтрока Из Объект.VetDocumentList Цикл
		_представление = _представление + ?(_представление = "", "", "; ") + Строка(_ВетДокументыСтрока.vetDocument);
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(_представление) Тогда
		Элементы.ВетДокументы.Заголовок = ОбработатьПредставление(_представление);
	КонецЕсли;
	
	Элементы.volume.Заголовок = СтрШаблон("Количество (%1)", Объект.volume1);
	
КонецПроцедуры

Функция ОбработатьПредставление(пЗначение)
	
	Возврат ?(СтрДлина(пЗначение) > 300, Лев(пЗначение, 300) + "...", пЗначение);
	
КонецФункции


&НаСервере
Процедура ЗаполнитьРеквизиты(value)
	
	last     = value.last;
	active   = value.active;
	_uuid    = value.uuid;
	
	Если ТипЗнч(value) = Тип("ОбъектXDTO") Тогда
		status   = ВетисBaseСлой1с.VersionStatus(value.Status);
		next     = value.next;
		previous = value.previous;
		createDate = value.createDate;
		updateDate = value.updateDate;
	Иначе
		status   = value.Status;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция BatchКонвертировать()
	
	_batch = ВетисMercuryVetdocument.Batch();
	
	_batch.productType = ВетисDictionaryСлой1с.ProductType(Объект.productType);
	_batch.product     = ВетисDictionary.Product(ВетисDictionaryСлой1с.Product(Объект.product));
	_batch.subProduct  = ВетисDictionary.SubProduct(ВетисDictionaryСлой1с.SubProduct(Объект.SubProduct));
	Если Объект.ProductItemName="" Тогда
		_batch.productItem = ВетисDictionary.ProductItem(ВетисDictionaryСлой1с.ProductItem(Объект.ProductItem));
	Иначе
		_batch.productItem = ВетисDictionary.ProductItem(, Объект.ProductItemName);
	КонецЕсли;
	
	_batch.volume           = Объект.volume;
	
	_batch.unit = ВетисDictionary.Unit(ВетисDictionaryСлой1с.Unit(Объект.Unit));
	
	_День = Макс(День(Объект.expiryDateFirst), День(Объект.expiryDateSecond), День(Объект.dateOfProductionFirst), День(Объект.dateOfProductionSecond));
	_Час = Макс(Час(Объект.expiryDateFirst), Час(Объект.expiryDateSecond), Час(Объект.dateOfProductionFirst), Час(Объект.dateOfProductionSecond));
	_Мин = Макс(Минута(Объект.expiryDateFirst), Минута(Объект.expiryDateSecond), Минута(Объект.dateOfProductionFirst), Минута(Объект.dateOfProductionSecond));
	
	//Для скоропортящейся продукции обязательны к указанию год/месяц/день и могут быть указаны час/минута.
	//Для не скоропортящейся продукции обязательны к указанию год/месяц и может быть указан день.
	//Для не скоропортящейся продукции дата выработки и дата окончания срока годности должны быть заданы в одном формате
	//(например, если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
	Если ЗначениеЗаполнено(Объект.dateOfProductionInformal) Тогда
		_batch.dateOfProduction = ВетисMercuryVetdocument.GoodsDate(Объект.dateOfProductionInformal);
	Иначе
		_batch.dateOfProduction = ВетисMercuryVetdocument.GoodsDate(Объект.dateOfProductionFirst, Объект.dateOfProductionSecond, _День > 1 ИЛИ _Час > 0 ИЛИ _Мин > 0, _День > 1 ИЛИ _Час > 1 ИЛИ _Мин > 0, _Мин > 0);
	КонецЕсли;
	
	//Не указывается для типа продукции "Живые животные"
	//Для скоропортящейся продукции обязательны к указанию год/месяц/день и могут быть указаны час/минута.
	//Для не скоропортящейся продукции обязательны к указанию год/месяц и может быть указан день.
	//Для не скоропортящейся продукции дата выработки и дата окончания срока годности должны быть заданы в одном формате
	//(например, если дата выработки указывается как год/месяц, то указать дату окончания срока годности как год/месяц/день нельзя).
	Если ЗначениеЗаполнено(Объект.expiryDateInformal) Тогда
		_batch.expiryDate = ВетисMercuryVetdocument.GoodsDate(Объект.expiryDateInformal);
	Иначе
		_batch.expiryDate = ВетисMercuryVetdocument.GoodsDate(Объект.expiryDateFirst, Объект.expiryDateSecond, _День > 1 ИЛИ _Час > 0 ИЛИ _Мин > 0, _День > 1 ИЛИ _Час > 1 ИЛИ _Мин > 0, _Мин > 0);
	КонецЕсли;
	
	_batch.perishable       = Объект.perishable;
	_batch.lowGradeCargo    = Объект.lowGradeCargo;
	_batch.owner            = ВетисDictionary.BusinessEntity(ВетисDictionaryСлой1с.BusinessEntity(Объект.seOwner));
	
	_batch.origin = ВетисMercuryVetdocument.BatchOrigin();
	_batch.origin.country = ВетисDictionary.Country(ВетисDictionaryСлой1с.Country(Объект.country));
	
	Для каждого _Строка Из Объект.ProducerList Цикл
		Если ЗначениеЗаполнено(_Строка.producer) Тогда
			_producer = ВетисDictionary.Producer(ВетисDictionaryСлой1с.Enterprise(_Строка.producer), ВетисDictionaryСлой1с.EnterpriseRole(_Строка.role));
			_batch.origin.producer.Добавить(_producer);
		ИначеЕсли ЗначениеЗаполнено(_Строка.producerName) Тогда
			_producer = ВетисDictionary.Producer();
			_producer.enterprise.name = _Строка.producerName;
			_batch.origin.producer.Добавить(_producer);
		Иначе
			//_Enterprise = ВетисDictionaryСлой1с.Enterprise();
			//Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ProductItemName="" Тогда
		_batch.origin.productItem = ВетисDictionary.ProductItem(ВетисDictionaryСлой1с.ProductItem(Объект.ProductItem));
	Иначе
		_batch.origin.productItem = ВетисDictionary.ProductItem(, Объект.ProductItemName);
	КонецЕсли;
	
	_packageList = Новый Массив;
	
	Для каждого _УпаковкаСтрока Из Объект.PackageList Цикл
		
		_productMarks = Новый Массив;
		Для каждого _МаркировкаСтрока Из Объект.ProductMarks Цикл
			Если _МаркировкаСтрока.КлючСвязи = _УпаковкаСтрока.КлючСтроки Тогда
				_productMarks.Добавить(ВетисDictionary.ProductMarks(_МаркировкаСтрока.value, ВетисDictionaryСлой1с.ProductMarkingClass(_МаркировкаСтрока.class)));
			КонецЕсли;
		КонецЦикла;
		
		_packageList.Добавить(ВетисDictionary.Package(
			ВетисDictionaryСлой1с.PackageLevelType(_УпаковкаСтрока.level),
			ВетисDictionary.PackingType(ВетисDictionaryСлой1с.PackingType(_УпаковкаСтрока.packingType)),
			_УпаковкаСтрока.quantity,
			_productMarks
			));
		
	КонецЦикла;
	
	_batch.packageList = ВетисDictionary.PackageList(_packageList);
	
	//Для каждого _Строка Из Объект.ИДПартии Цикл
	//	_batch.batchID.Добавить(_Строка.batchID);
	//КонецЦикла;
	
	Возврат _batch;
	
КонецФункции
